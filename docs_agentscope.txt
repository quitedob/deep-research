==== docs ====
---- changelog.md ----
# CHANGELOG of v1.0.0
> ‚û°Ô∏è change; ‚úÖ new feature; ‚ùå deprecate
The overall changes from v0.x.x to v1.0.0 are summarized below.
## Overview
- ‚úÖ Support asynchronous execution throughout the library
- ‚úÖ Support tools API thoroughly
## ‚ú®Session
- ‚úÖ Support automatic state management
- ‚úÖ Support session/application-level state management
## ‚ú®Tracing
- ‚úÖ Support OpenTelemetry-based tracing
- ‚úÖ Support third-party tracing platforms, e.g. Arize-Phoenix, Langfuse, etc.
## ‚ú®MCP
- ‚úÖ Support both client- and function-level control over MCP by a new MCP module
- ‚úÖ Support both "pay-as-you-go" and persistent session management
- ‚úÖ Support streamable HTTP, SSE and StdIO transport protocols
## ‚ú®Memory
- ‚úÖ Support long-term memory by providing a `LongTermMemoryBase` class
- ‚úÖ Provide a Mem0-based long-term memory implementation
- ‚úÖ Support both static- and agent-controlled long-term memory modes
## Formatter
- ‚úÖ Support prompt construction/formatting with token count estimation
- ‚úÖ Support tools API in multi-agent prompt formatting
## Model
- ‚ùå Deprecate model configuration, use explicit object instantiation instead
- ‚úÖ Provide a new `ModelResponse` class for structured model responses
- ‚úÖ Support asynchronous model invocation
- ‚úÖ Support reasoning models
- ‚úÖ Support any combination of streaming/non-streaming, reasoning/non-reasoning and tools API
## Agent
- ‚ùå Deprecate `DialogAgent`, `DictDialogAgent` and prompt-based ReAct agent class
- ‚û°Ô∏è Expose memory, formatter interfaces to the agent's constructor in ReActAgent
- ‚û°Ô∏è Unify the signature of pre- and post- agent hooks
- ‚úÖ Support pre-/post-reasoning and pre-/post-acting hooks in ReActAgent class
- ‚úÖ Support asynchronous agent execution
- ‚úÖ Support interrupting agent's replying and customized interruption handling
- ‚úÖ Support automatic state management
- ‚úÖ Support parallel tool calls
- ‚úÖ Support two-modes long-term memory in ReActAgent class
## Tool
- ‚úÖ Provide a more powerful `Toolkit` class for tools management
- ‚úÖ Provide a new `ToolResponse` class for structured and multimodal tool responses
- ‚úÖ Support group-wise tool management
- ‚úÖ Support agent to manage tools by itself
- ‚úÖ Support post-processing of tool responses
- Tool function
- ‚úÖ Support both async and sync functions
- ‚úÖ Support both streaming and non-streaming return
## Evaluation
- ‚úÖ Support ReAct agent-oriented evaluation
- ‚úÖ Support Ray-based distributed and concurrent evaluation
- ‚úÖ Support statistical analysis over evaluation results
## AgentScope Studio
- ‚úÖ Support runtime tracing
- ‚úÖ Provide a built-in copilot agent named Friday
## Logging
- ‚ùå Deprecate `loguru` and use Python native `logging` module instead
## Distribution
- ‚ùå Deprecate distribution functionality momentarily, a new distribution module is coming soon
## RAG
- ‚ùå Deprecate RAG functionality momentarily, a new RAG module is coming soon
## Parsers
- ‚ùå Deprecate parsers module
## WebBrowser
- ‚ùå Deprecate the `WebBrowser` class and shift to MCP-based web browsing
---- roadmap.md ----
# Roadmap
## Long-term Goals
Offering **agent-oriented programming (AOP)** as a new programming paradigm to organize the design and implementation of next-generation LLM-empowered applications.
## Short-term Goals
### AgentScope V1.0.0 Roadmap
We are deeply grateful for the continuous support from the open-source community that has witnessed AgentScope's
growth. Throughout our journey, we have maintained **developer-centric transparency** as our core principle,
which will continue to guide our future development.
As the AI agent ecosystem rapidly evolves, we recognize the need to adapt AgentScope to meet emerging trends and
requirements. We are excited to announce the upcoming release of AgentScope v1.0.0, which marks a significant shift
towards deployment-focused and secondary development direction. This new version will provide comprehensive support for agent developers
with enhanced deployment capabilities and practical features. Specifically, the update will include:
- ‚ú®New Features
- üõ†Ô∏è Tool/MCP
- Support both sync/async tool functions
- Support streaming tool function
- Support parallel execution of tool functions
- Provide more flexible support for the MCP server
- üíæ Memory
- Enhance the existing short-term memory
- Support long-term memory
- ü§ñ Agent
- Provide powerful ReAct-based out-of-the-box agents
- üë®‚Äçüíª Development
- Provide enhanced AgentScope Studio with visual components for developing, tracing and debugging
- Provide a built-in copilot for developing/drafting AgentScope applications
- üîç Evaluation
- Provide built-in benchmarking and evaluation toolkit for agents
- Support result visualization
- üèóÔ∏è Deployment
- Support asynchronous agent execution
- Support session/state management
- Provide sandbox for tool execution
Stay tuned for our detailed release notes and beta version, which will be available soon. Follow our GitHub
repository and official channels for the latest updates. We look forward to your valuable feedback and continued
support in shaping the future of AgentScope.
==== zh_CN ====
---- Makefile ----
# Minimal makefile for Sphinx documentation
#
# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS ?=
SPHINXBUILD ?= sphinx-build
SOURCEDIR = source
BUILDDIR = _build
# Put it first so that "make" without argument is like "make help".
help:
@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
.PHONY: help Makefile
# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option. $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
---- build.sh ----
#!/bin/bash
set -e
# Generate the API rst files
sphinx-apidoc -o api ../../../src/agentscope -t ../_templates -e
# Build the html
sphinx-build -M html ./ build
---- conf.py ----
# -*- coding: utf-8 -*-
# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html
# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information
project = "AgentScope"
copyright = "2025, Alibaba"
author = "Alibaba Tongyi Lab"
# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration
extensions = [
"myst_parser",
"sphinx_gallery.gen_gallery",
"sphinx.ext.autodoc",
"sphinx.ext.viewcode",
"sphinx.ext.napoleon",
]
myst_enable_extensions = [
"colon_fence",
]
sphinx_gallery_conf = {
"download_all_examples": False,
"examples_dirs": [
"src",
],
"gallery_dirs": [
"tutorial",
],
"filename_pattern": "src/.*\.py",
"example_extensions": [".py"],
}
templates_path = ["../_templates"]
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]
languages = ["en", "zh_CN"]
language = "zh_CN"
# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output
html_theme = "furo"
html_title = (
"<span style='font-weight: 700; color: #2196f3;'>AgentScope</span>"
)
html_logo = "../_static/images/logo.svg"
html_favicon = "../_static/images/logo.svg"
html_static_path = ["../_static"]
html_css_files = [
"css/gallery.css",
]
html_js_files = [
"language_switch.js",
]
html_theme_options = {
"footer_icons": [
{
"name": "GitHub",
"url": "https://github.com/agentscope-ai/agentscope",
"html": """
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 16 16">
<path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>
</svg>
""",
"class": "",
},
{
"name": "Discord",
"url": "https://discord.gg/eYMpfnkG8h",
"html": """
<svg stroke="currentColor" fill="currentColor" stroke-width="0" t="1753331148815" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="5721" width="200" height="200">
<path d="M723.903423 359.138018c-69.65045-52.952793-136.256577-51.476757-136.256576-51.476757l-6.088649 7.564685c83.027027 25.738378 121.127207 62.085766 121.127207 62.085766a387.459459 387.459459 0 0 0-145.297297-46.956397 418.179459 418.179459 0 0 0-98.340901 1.752793 73.801802 73.801802 0 0 1-7.564684 1.476036 357.385225 357.385225 0 0 0-110.702703 30.258739 278.786306 278.786306 0 0 0-28.782703 13.653333S353.049369 339.488288 440.873514 313.657658l-4.612613-6.088649s-66.513874-1.476036-136.164324 51.476757A654.252973 654.252973 0 0 0 230.630631 642.167928s40.867748 71.126486 148.341621 73.801802c0 0 16.697658-22.694054 31.827027-40.867748-62.085766-18.45045-84.77982-57.565405-84.77982-57.565405a130.998198 130.998198 0 0 0 13.653334 7.564684s0 1.568288 1.476036 1.568289c1.476036 1.476036 3.044324 1.476036 4.52036 3.044324a238.748829 238.748829 0 0 0 34.779099 16.605405 513.199279 513.199279 0 0 0 71.218739 21.218018 350.558559 350.558559 0 0 0 125.555315 0 329.894054 329.894054 0 0 0 69.650451-21.218018A247.328288 247.328288 0 0 0 702.685405 618.09009s-24.262342 39.391712-87.824144 57.565405c13.653333 18.45045 31.827027 39.299459 31.827027 39.29946 107.473874-2.952072 148.341622-73.801802 146.773334-72.602523a654.990991 654.990991 0 0 0-69.558199-283.214414zM421.131532 596.77982a54.705586 54.705586 0 0 1 0-109.042162 54.705586 54.705586 0 0 1 0 109.042162z m177.124324 0a54.705586 54.705586 0 1 1 49.908468-54.521081 52.491532 52.491532 0 0 1-49.908468 54.521081z" p-id="5722"></path><path d="M512 1024A512 512 0 1 1 1024 512 512.645766 512.645766 0 0 1 512 1024z m0-972.892252a461.261261 461.261261 0 1 0 461.261261 461.261261 461.261261 461.261261 0 0 0-461.261261-461.261261z" p-id="5723"></path>
</svg>
""",
"class": "",
},
{
"name": "DingTalk",
"url": "https://qr.dingtalk.com/action/joingroup?code=v1,k1,OmDlBXpjW+I2vWjKDsjvI9dhcXjGZi3bQiojOq3dlDw=&_dt_no_comment=1&origin=11",
"html": """
<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024">
<path d="M512 0C229.205333 0 0 229.205333 0 512s229.205333 512 512 512 512-229.205333 512-512S794.794667 0 512 0z m237.312 480.810667c-1.109333 4.48-3.712 11.093333-7.424 18.986666h0.128l-0.426667 0.682667c-21.504 46.037333-77.610667 136.106667-77.610666 136.106667l-0.298667-0.597334-16.384 28.501334h79.018667l-150.912 200.917333 34.304-136.533333h-62.208l21.589333-90.282667c-17.493333 4.224-38.101333 10.026667-62.592 17.92 0 0-33.109333 19.370667-95.317333-37.333333 0 0-41.984-36.992-17.578667-46.165334 10.410667-3.925333 50.304-8.917333 81.706667-13.226666 42.410667-5.674667 68.48-8.789333 68.48-8.789334s-130.773333 2.005333-161.792-2.901333c-30.976-4.906667-70.4-56.704-78.805334-102.186667 0 0-12.970667-25.002667 27.904-13.226666 40.917333 11.818667 210.005333 46.08 210.005334 46.08S321.109333 411.434667 306.517333 394.922667c-14.634667-16.469333-43.093333-89.770667-39.424-134.869334 0 0 1.621333-11.221333 13.098667-8.192 0 0 162.602667 74.282667 273.792 114.986667 111.104 40.704 207.786667 61.397333 195.328 114.005333z" opacity=".65" p-id="6077"></path>
</svg>
""",
"class": "",
},
],
"light_css_variables": {
"color-brand-primary": "#2196f3",
"color-brand-content": "#2196f3",
"color-admonition-background": "#f8f9fa",
},
"dark_css_variables": {
"color-link": "#2196f3",
"color-link--hover": "#2196f3",
"color-brand-primary": "#64b5f6",
"color-brand-content": "#64b5f6",
},
}
source_suffix = [".md", ".rst"]
# -- Options for API documentation -------------------------------------------
autodoc_member_order = "bysource"
autodoc_typehints = "description"
autodoc_class_signature = "separated"
autodoc_default_options = {
"special-members": "__call__",
}
add_module_names = False
python_display_short_literal_types = True
def skip_member(app, what, name, obj, skip, options):
if name in [
"__call__",
"_format",
"_format_agent_message",
"_format_tool_sequence",
]:
return False
return skip
def setup(app):
app.connect("autodoc-skip-member", skip_member)
---- index.rst ----
.. AgentScope Doc documentation master file, created by
sphinx-quickstart on Thu Aug 8 15:07:21 2024.
You can adapt this file completely to your liking, but it should at least
contain the root `toctree` directive.
Welcome to AgentScope's documentation!
==========================================
.. toctree::
:maxdepth: 1
:caption: Tutorial
tutorial/quickstart_installation
tutorial/quickstart_key_concept
tutorial/quickstart_message
tutorial/quickstart_agent
.. toctree::
:maxdepth: 1
:caption: Workflow
tutorial/workflow_conversation
tutorial/workflow_multiagent_debate
tutorial/workflow_concurrent_agents
tutorial/workflow_routing
tutorial/workflow_handoffs
.. toctree::
:maxdepth: 1
:caption: FAQ
tutorial/faq
.. toctree::
:maxdepth: 1
:caption: Task Guides
tutorial/task_model
tutorial/task_prompt
tutorial/task_tool
tutorial/task_memory
tutorial/task_long_term_memory
tutorial/task_agent
tutorial/task_pipeline
tutorial/task_plan
tutorial/task_rag
tutorial/task_state
tutorial/task_hook
tutorial/task_mcp
tutorial/task_studio
tutorial/task_tracing
tutorial/task_eval
tutorial/task_embedding
tutorial/task_token
.. toctree::
:maxdepth: 1
:caption: API Docs
api/agentscope
api/agentscope.message
api/agentscope.model
api/agentscope.formatter
api/agentscope.module
api/agentscope.pipeline
api/agentscope.agent
api/agentscope.memory
api/agentscope.tool
api/agentscope.mcp
api/agentscope.embedding
api/agentscope.evaluate
api/agentscope.plan
api/agentscope.rag
api/agentscope.token
api/agentscope.tracing
api/agentscope.session
api/agentscope.exception
---- make.bat ----
@ECHO OFF
pushd %~dp0
REM Command file for Sphinx documentation
if "%SPHINXBUILD%" == "" (
set SPHINXBUILD=sphinx-build
)
set SOURCEDIR=source
set BUILDDIR=build
%SPHINXBUILD% >NUL 2>NUL
if errorlevel 9009 (
echo.
echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
echo.installed, then set the SPHINXBUILD environment variable to point
echo.to the full path of the 'sphinx-build' executable. Alternatively you
echo.may add the Sphinx directory to PATH.
echo.
echo.If you don't have Sphinx installed, grab it from
echo.https://www.sphinx-doc.org/
exit /b 1
)
if "%1" == "" goto help
%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end
:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
:end
popd
==== src ====
---- README.md ----
---- faq.py ----
# -*- coding: utf-8 -*-
"""
.. _faq:
Â∏∏ËßÅÈóÆÈ¢ò
========================================
ÂÖ≥‰∫é AgentScope
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*‰ªÄ‰πàÊòØAgentScopeÔºü*
AgentScope ÊòØ‰∏Ä‰∏™Â§öÊô∫ËÉΩ‰ΩìÊ°ÜÊû∂ÔºåÊó®Âú®Êèê‰æõ‰∏ÄÁßçÁÆÄÂçïÈ´òÊïàÁöÑÊñπÂºèÊù•ÊûÑÂª∫Âü∫‰∫éÂ§ßËØ≠Ë®ÄÊ®°ÂûãÁöÑÊô∫ËÉΩ‰ΩìÂ∫îÁî®Á®ãÂ∫è„ÄÇ
*AgentScope v1.0 ‰∏é v0.x ÁâàÊú¨Êúâ‰ªÄ‰πàÂå∫Âà´Ôºü*
AgentScope v1.0ÊòØÂØπÊ°ÜÊû∂ÁöÑÂÆåÂÖ®ÈáçÂÜôÔºåÈÖçÂ§á‰∫ÜÊñ∞ÂäüËÉΩÂíåÊîπËøõ„ÄÇËØ¶ÁªÜÂèòÊõ¥ËØ∑ÂèÇËÄÉÁõ∏ÂÖ≥ÊñáÊ°£„ÄÇ
ÂÖ≥‰∫éÊ®°Âûã
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Â¶Ç‰ΩïÂú® AgentScope ‰∏≠ÈõÜÊàêÊàëËá™Â∑±ÁöÑÊ®°ÂûãÔºü*
ÈÄöËøáÁªßÊâø ``agentscope.model.ChatModelBase`` Âπ∂ÂÆûÁé∞ ``__call__`` ÊñπÊ≥ïÊù•ÂàõÂª∫ÊÇ®Ëá™Â∑±ÁöÑÊ®°Âûã„ÄÇ
*AgentScope ÊîØÊåÅÂì™‰∫õÊ®°ÂûãÔºü*
ÁõÆÂâçÔºåAgentScope ÂÜÖÁΩÆÊîØÊåÅ DashScope„ÄÅGemini„ÄÅOpenAI„ÄÅAnthropic Âíå Ollama APIÔºå‰ª•Âèä‰∏é DeepSeek Âíå vLLMs Ê®°ÂûãÂÖºÂÆπÁöÑ ``OpenAIChatModel``„ÄÇ
*Â¶Ç‰ΩïÂú® AgentScope ‰∏≠ÁõëÊéßtoken ‰ΩøÁî®ÊÉÖÂÜµÔºü*
Âú® AgentScope Studio‰∏≠ÔºåÊàë‰ª¨Êèê‰æõ‰∫Ü token ‰ΩøÁî®ÊÉÖÂÜµÁöÑÂèØËßÜÂåñÂíåËøΩË∏™ÂäüËÉΩ„ÄÇËØ¶ÊÉÖËØ∑ÂèÇËÄÉ:ref:`studio` ÈÉ®ÂàÜ„ÄÇ
ÂÖ≥‰∫éÊô∫ËÉΩ‰Ωì
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Â¶Ç‰ΩïÂàõÂª∫ÊàëËá™Â∑±ÁöÑÊô∫ËÉΩ‰ΩìÔºü*
ÊÇ®ÂèØ‰ª•ÈÄâÊã©Áõ¥Êé•‰ΩøÁî® ``ReActAgent`` Á±ªÔºåÊàñËÄÖÈÄöËøáÁªßÊâø ``AgentBase`` Êàñ ``ReActAgentBase`` Á±ªÊù•ÂàõÂª∫ÊÇ®Ëá™Â∑±ÁöÑÊô∫ËÉΩ‰Ωì„ÄÇËØ¶ÊÉÖËØ∑ÂèÇËÄÉ :ref:`agent` ÈÉ®ÂàÜ„ÄÇ
*Â¶Ç‰ΩïÂ∞ÜÊô∫ËÉΩ‰ΩìÁöÑÔºàÊµÅÂºèÔºâËæìÂá∫ËΩ¨ÂèëÂà∞ÊàëËá™Â∑±ÁöÑÂâçÁ´ØÊàñÂ∫îÁî®Á®ãÂ∫èÔºü*
‰ΩøÁî® ``print`` ÂáΩÊï∞ÁöÑÂâçÁΩÆÈí©Â≠êÊù•ËΩ¨ÂèëÊâìÂç∞Ê∂àÊÅØ„ÄÇËØ∑ÂèÇËÄÉ :ref:`hook` ÈÉ®ÂàÜ„ÄÇ
ÂÖ≥‰∫éÂ∑•ÂÖ∑
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*AgentScope Êèê‰æõ‰∫ÜÂ§öÂ∞ëÂ∑•ÂÖ∑Ôºü*
AgentScope Êèê‰æõ‰∫Ü‰∏ÄÂ•óÂÜÖÁΩÆÂ∑•ÂÖ∑ÔºåÂåÖÊã¨ ``execute_python_code``„ÄÅ``execute_shell_command``„ÄÅ``write_text_file`` Á≠â„ÄÇÊÇ®ÂèØ‰ª•Âú® ``agentscope.tool`` Ê®°Âùó‰∏ãÊâæÂà∞ÂÆÉ‰ª¨„ÄÇ
ÂÖ≥‰∫éÈîôËØØÊä•Âëä
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Â¶Ç‰ΩïÊä•Âëä AgentScope‰∏≠ÁöÑÈîôËØØÔºü*
Â¶ÇÊûúÊÇ®Âú®‰ΩøÁî® AgentScope Êó∂ÈÅáÂà∞ÈîôËØØÔºåËØ∑ÈÄöËøáÂú®Êàë‰ª¨ÁöÑ GitHub‰ªìÂ∫ì‰∏≠ÂºÄÂêØ‰∏Ä‰∏™issueÊù•Êä•Âëä„ÄÇ
*Â¶Ç‰ΩïÊä•ÂëäAgentScope ‰∏≠ÁöÑÂÆâÂÖ®ÊºèÊ¥ûÔºü*
Â¶ÇÊûúÊÇ®Âú®AgentScope ‰∏≠ÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢òÔºåËØ∑ÈÄöËøá `ÈòøÈáåÂ∑¥Â∑¥ÂÆâÂÖ®ÂìçÂ∫î‰∏≠ÂøÉ(ASRC) <https://security.alibaba.com/>`_ ÂêëÊàë‰ª¨Êä•Âëä„ÄÇ
"""
---- quickstart_agent.py ----
# -*- coding: utf-8 -*-
"""
.. _react-agent:
ÂàõÂª∫ ReAct Êô∫ËÉΩ‰Ωì
====================
AgentScope Âú® ``agentscope.agent`` Ê®°Âùó‰∏ãÊèê‰æõ‰∫ÜÂºÄÁÆ±Âç≥Áî®ÁöÑ ReAct Êô∫ËÉΩ‰Ωì ``ReActAgent`` ‰æõÂºÄÂèëËÄÖ‰ΩøÁî®„ÄÇ
ÂÆÉÂêåÊó∂ÊîØÊåÅ‰ª•‰∏ãÂäüËÉΩÔºö
- ‚ú® Âü∫Á°ÄÂäüËÉΩ
- ÊîØÊåÅÂõ¥Áªï ``reply``„ÄÅ``observe``„ÄÅ``print``„ÄÅ``_reasoning`` Âíå ``_acting`` ÁöÑ **Èí©Â≠êÂáΩÊï∞ÔºàhooksÔºâ**
- ÊîØÊåÅÁªìÊûÑÂåñËæìÂá∫
- ‚úã ÂÆûÊó∂‰ªãÂÖ•ÔºàRealtime SteeringÔºâ
- ÊîØÊåÅÁî®Êà∑ **‰∏≠Êñ≠**
- ÊîØÊåÅËá™ÂÆö‰πâ **‰∏≠Êñ≠Â§ÑÁêÜ**
- üõ†Ô∏è Â∑•ÂÖ∑
- ÊîØÊåÅ **ÂêåÊ≠•/ÂºÇÊ≠•** Â∑•ÂÖ∑ÂáΩÊï∞
- ÊîØÊåÅ **ÊµÅÂºè** Â∑•ÂÖ∑ÂìçÂ∫î
- ÊîØÊåÅ **Áä∂ÊÄÅÂåñ** ÁöÑÂ∑•ÂÖ∑ÁÆ°ÁêÜ
- ÊîØÊåÅ **Âπ∂Ë°å** Â∑•ÂÖ∑Ë∞ÉÁî®
- ÊîØÊåÅ **MCP** ÊúçÂä°Âô®
- üíæ ËÆ∞ÂøÜ
- ÊîØÊåÅÊô∫ËÉΩ‰Ωì **Ëá™‰∏ªÁÆ°ÁêÜ** ÈïøÊúüËÆ∞ÂøÜ
- ÊîØÊåÅ‚ÄúÈùôÊÄÅ‚ÄùÁöÑÈïøÊúüËÆ∞ÂøÜÁÆ°ÁêÜ
.. tip:: ÊúâÂÖ≥Ëøô‰∫õÂäüËÉΩÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇËÄÉ :ref:`agent` ÈÉ®ÂàÜ„ÄÇÊú¨Á´†ËäÇ‰∏≠ÔºåÊàë‰ª¨ÈáçÁÇπ‰ªãÁªçÂ¶Ç‰ΩïÂàõÂª∫ ReAct Êô∫ËÉΩ‰ΩìÂπ∂ËøêË°å„ÄÇ
"""
from agentscope.agent import ReActAgent, AgentBase
from agentscope.formatter import DashScopeChatFormatter
from agentscope.memory import InMemoryMemory
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
import asyncio
import os
from agentscope.tool import Toolkit, execute_python_code
# %%
# ÂàõÂª∫ ReAct Êô∫ËÉΩ‰Ωì
# ------------------------------
# ‰∏∫‰∫ÜÊèêÈ´òÁÅµÊ¥ªÊÄßÔºå``ReActAgent`` Á±ªÂú®ÂÖ∂ÊûÑÈÄ†ÂáΩÊï∞‰∏≠Êö¥Èú≤‰∫Ü‰ª•‰∏ãÂèÇÊï∞Ôºö
#
# .. list-table:: ``ReActAgent`` Á±ªÁöÑÂàùÂßãÂåñÂèÇÊï∞
# :header-rows: 1
#
# * - ÂèÇÊï∞
# - Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# - ÊèèËø∞
# * - ``name`` (ÂøÖÈúÄ)
# -
# - Êô∫ËÉΩ‰ΩìÁöÑÂêçÁß∞
# * - ``sys_prompt`` (ÂøÖÈúÄ)
# -
# - Êô∫ËÉΩ‰ΩìÁöÑÁ≥ªÁªüÊèêÁ§∫
# * - ``model`` (ÂøÖÈúÄ)
# - :ref:`model`
# - Êô∫ËÉΩ‰ΩìÁî®‰∫éÁîüÊàêÂìçÂ∫îÁöÑÊ®°Âûã
# * - ``formatter`` (ÂøÖÈúÄ)
# - :ref:`prompt`
# - ÊèêÁ§∫ÊûÑÂª∫Á≠ñÁï•ÔºåÂ∫î‰∏é‰ΩøÁî®ÁöÑÊ®°Âûã‰øùÊåÅ‰∏ÄËá¥
# * - ``toolkit``
# - :ref:`tool`
# - Áî®‰∫éÊ≥®ÂÜå/Ë∞ÉÁî®Â∑•ÂÖ∑ÂáΩÊï∞ÁöÑÂ∑•ÂÖ∑Ê®°Âùó
# * - ``memory``
# - :ref:`memory`
# - Áî®‰∫éÂ≠òÂÇ®ÂØπËØùÂéÜÂè≤ÁöÑÁü≠ÊúüËÆ∞ÂøÜ
# * - ``long_term_memory``
# - :ref:`long-term-memory`
# - ÈïøÊúüËÆ∞ÂøÜ
# * - ``long_term_memory_mode``
# - :ref:`long-term-memory`
# - ÈïøÊúüËÆ∞ÂøÜÁöÑÁÆ°ÁêÜÊ®°ÂºèÔºö
#
# - ``agent_control``: ÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìÈÄöËøáÂ∑•ÂÖ∑ÂáΩÊï∞Ëá™Â∑±ÊéßÂà∂ÈïøÊúüËÆ∞ÂøÜ
# - ``static_control``: Âú®ÊØèÊ¨°ÂõûÂ§çÔºàreplyÔºâÁöÑÂºÄÂßã/ÁªìÊùüÊó∂Ôºå‰ºöËá™Âä®‰ªéÈïøÊúüËÆ∞ÂøÜ‰∏≠Ê£ÄÁ¥¢/ËÆ∞ÂΩï‰ø°ÊÅØ
# - ``both``: ÂêåÊó∂ÊøÄÊ¥ª‰∏äËø∞‰∏§ÁßçÊ®°Âºè
# * - ``enable_meta_tool``
# - :ref:`tool`
# - ÊòØÂê¶ÂêØÁî®ÂÖÉÂ∑•ÂÖ∑ÔºàMeta toolÔºâÔºåÂç≥ÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìËá™‰∏ªÁÆ°ÁêÜÂ∑•ÂÖ∑ÂáΩÊï∞
# * - ``parallel_tool_calls``
# - :ref:`agent`
# - ÊòØÂê¶ÂÖÅËÆ∏Âπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®
# * - ``max_iters``
# -
# - Êô∫ËÉΩ‰ΩìÁîüÊàêÂìçÂ∫îÁöÑÊúÄÂ§ßËø≠‰ª£Ê¨°Êï∞
# * - ``plan_notebook``
# - :ref:`plan`
# - ËÆ°ÂàíÊ®°ÂùóÔºåÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìÂà∂ÂÆöÂíåÁÆ°ÁêÜËÆ°Âàí‰∏éÂ≠ê‰ªªÂä°
# * - ``print_hint_msg``
# -
# - ÊòØÂê¶Âú®ÁªàÁ´ØÊâìÂç∞ ``plan_notebook`` ÁîüÊàêÁöÑÊèêÁ§∫Ê∂àÊÅØ
#
# ‰ª• DashScope API ‰∏∫‰æãÔºåÊàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìÂØπË±°Â¶Ç‰∏ãÔºö
async def creating_react_agent() -> None:
"""ÂàõÂª∫‰∏Ä‰∏™ ReAct Êô∫ËÉΩ‰ΩìÂπ∂ËøêË°å‰∏Ä‰∏™ÁÆÄÂçï‰ªªÂä°„ÄÇ"""
# ÂáÜÂ§áÂ∑•ÂÖ∑
toolkit = Toolkit()
toolkit.register_tool_function(execute_python_code)
jarvis = ReActAgent(
name="Jarvis",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Jarvis ÁöÑÂä©Êâã",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=True,
enable_thinking=False,
),
formatter=DashScopeChatFormatter(),
toolkit=toolkit,
memory=InMemoryMemory(),
)
msg = Msg(
name="user",
content="‰Ω†Â•ΩÔºÅJarvisÔºåÁî® Python ËøêË°å Hello World„ÄÇ",
role="user",
)
await jarvis(msg)
asyncio.run(creating_react_agent())
# %%
# ‰ªéÈõ∂ÂºÄÂßãÂàõÂª∫
# --------------------------------
# ‰∏∫‰∫ÜÊîØÊåÅÂºÄÂèëËÄÖ‰ªéÈõ∂ÂºÄÂßãÂàõÂª∫Êô∫ËÉΩ‰ΩìÔºåAgentScope Êèê‰æõ‰∫Ü‰∏§‰∏™Âü∫Á±ªÔºö
#
# .. list-table::
# :header-rows: 1
#
# * - Á±ª
# - ÊäΩË±°ÊñπÊ≥ï
# - ÊèèËø∞
# * - ``AgentBase``
# - | ``reply``
# | ``observe``
# | ``handle_interrupt``
# - - ÊâÄÊúâÊô∫ËÉΩ‰ΩìÁöÑÂü∫Á±ªÔºåÊîØÊåÅ ``reply``„ÄÅ``observe`` Âíå ``print`` ÂáΩÊï∞ÁöÑÂâçÁΩÆÂíåÂêéÁΩÆÈí©Â≠êÂáΩÊï∞„ÄÇ
# - Âú® ``__call__`` ÂáΩÊï∞ÂÜÖÂÆûÁé∞‰∫ÜÂü∫Á°ÄÁöÑÂÆûÊó∂‰ªãÂÖ•ÔºàRealtime SteeringÔºâÈÄªËæë„ÄÇ
# * - ``ReActAgentBase``
# - | ``reply``
# | ``observe``
# | ``handle_interrupt``
# | ``_reasoning``
# | ``_acting``
# - Âú® ``AgentBase`` ÁöÑÂü∫Á°Ä‰∏äÊ∑ªÂä†‰∫Ü‰∏§‰∏™ÊäΩË±°ÂáΩÊï∞ ``_reasoning`` Âíå ``_acting``Ôºå‰ª•ÂèäÂÆÉ‰ª¨ÁöÑÈí©Â≠êÂáΩÊï∞„ÄÇ
#
# ÊúâÂÖ≥Êô∫ËÉΩ‰ΩìÁ±ªÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇËÄÉ :ref:`agent` ÈÉ®ÂàÜ„ÄÇ
#
# ‰ª• ``AgentBase`` Á±ª‰∏∫‰æãÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáÁªßÊâøÂÆÉÂπ∂ÂÆûÁé∞ ``reply`` ÊñπÊ≥ïÊù•ÂàõÂª∫Ëá™ÂÆö‰πâÊô∫ËÉΩ‰ΩìÁ±ª„ÄÇ
class MyAgent(AgentBase):
"""Ëá™ÂÆö‰πâÊô∫ËÉΩ‰ΩìÁ±ª"""
def __init__(self) -> None:
"""ÂàùÂßãÂåñÊô∫ËÉΩ‰Ωì"""
super().__init__()
self.name = "Friday"
self.sys_prompt = "‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Friday ÁöÑÂä©Êâã„ÄÇ"
self.model = DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
)
self.formatter = DashScopeChatFormatter()
self.memory = InMemoryMemory()
async def reply(self, msg: Msg | list[Msg] | None) -> Msg:
"""Áõ¥Êé•Ë∞ÉÁî®Â§ßÊ®°ÂûãÔºå‰∫ßÁîüÂõûÂ§çÊ∂àÊÅØ„ÄÇ"""
await self.memory.add(msg)
# ÂáÜÂ§áÊèêÁ§∫
prompt = await self.formatter.format(
[
Msg("system", self.sys_prompt, "system"),
*await self.memory.get_memory(),
],
)
# Ë∞ÉÁî®Ê®°Âûã
response = await self.model(prompt)
msg = Msg(
name=self.name,
content=response.content,
role="assistant",
)
# Âú®ËÆ∞ÂøÜ‰∏≠ËÆ∞ÂΩïÂìçÂ∫î
await self.memory.add(msg)
# ÊâìÂç∞Ê∂àÊÅØ
await self.print(msg)
return msg
async def observe(self, msg: Msg | list[Msg] | None) -> None:
"""ËßÇÂØüÊ∂àÊÅØ„ÄÇ"""
# Â∞ÜÊ∂àÊÅØÂ≠òÂÇ®Âú®ËÆ∞ÂøÜ‰∏≠
await self.memory.add(msg)
async def handle_interrupt(self) -> Msg:
"""Â§ÑÁêÜ‰∏≠Êñ≠„ÄÇ"""
# ‰ª•Âõ∫ÂÆöÂìçÂ∫î‰∏∫‰æã
return Msg(
name=self.name,
content="ÊàëÊ≥®ÊÑèÂà∞ÊÇ®ÊâìÊñ≠‰∫ÜÊàëÁöÑÂõûÂ§çÔºåÊàëËÉΩ‰∏∫‰Ω†ÂÅö‰∫õ‰ªÄ‰πàÔºü",
role="assistant",
)
async def run_custom_agent() -> None:
"""ËøêË°åËá™ÂÆö‰πâÊô∫ËÉΩ‰Ωì„ÄÇ"""
agent = MyAgent()
msg = Msg(
name="user",
content="‰Ω†ÊòØË∞ÅÔºü",
role="user",
)
await agent(msg)
asyncio.run(run_custom_agent())
# %%
#
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ---------------------
# - :ref:`agent`
# - :ref:`model`
# - :ref:`prompt`
# - :ref:`tool`
#
---- quickstart_installation.py ----
# -*- coding: utf-8 -*-
"""
.. _installation:
ÂÆâË£Ö
============================
AgentScope ÈúÄË¶Å Python 3.10 ÊàñÊõ¥È´òÁâàÊú¨„ÄÇÊÇ®ÂèØ‰ª•‰ªéÊ∫ê‰ª£Á†ÅÊàñ PyPI ÂÆâË£Ö„ÄÇ
‰ªé PyPI ÂÆâË£Ö
----------------
.. code-block:: bash
pip install agentscope
‰ªéÊ∫ê‰ª£Á†ÅÂÆâË£Ö
----------------
‰ªéÊ∫ê‰ª£Á†ÅÂÆâË£Ö AgentScopeÔºåÈúÄË¶Å‰ªé GitHub ÂÖãÈöÜ‰ªìÂ∫ìÔºåÂπ∂ÈÄöËøá‰ª•‰∏ãÂëΩ‰ª§ÂÆâË£Ö
.. code-block:: bash
git clone -b main https://github.com/agentscope-ai/agentscope
cd agentscope
pip install -e .
ÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÁ°Æ‰øù AgentScope Ê≠£Â∏∏ÂÆâË£ÖÔºö
"""
import agentscope
print(agentscope.__version__)
# %%
# È¢ùÂ§ñ‰æùËµñ
# ----------------------------
#
# ‰∏∫‰∫ÜÊª°Ë∂≥‰∏çÂêåÂäüËÉΩÁöÑÈúÄÊ±ÇÔºåAgentScope Êèê‰æõ‰∫ÜÈ¢ùÂ§ñ‰æùËµñÈ°π„ÄÇ
#
# - full: ÂåÖÂê´Ê®°Âûã API ÂíåÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑÈ¢ùÂ§ñ‰æùËµñÈ°π
# - dev: ÂºÄÂèë‰æùËµñÈ°πÔºåÂåÖÊã¨ÊµãËØïÂíåÊñáÊ°£Â∑•ÂÖ∑
#
# ‰ª• full Ê®°Âºè‰∏∫‰æãÔºåÂÆâË£ÖÂëΩ‰ª§Ê†πÊçÆÊÇ®ÁöÑÊìç‰ΩúÁ≥ªÁªüËÄåÊúâÊâÄ‰∏çÂêå„ÄÇ
#
# ÂØπ‰∫é Windows Áî®Êà∑Ôºö
#
# .. code-block:: bash
#
# pip install agentscope[full]
#
# ÂØπ‰∫é Mac Âíå Linux Áî®Êà∑Ôºö
#
# .. code-block:: bash
#
# pip install agentscope\[full\]
---- quickstart_key_concept.py ----
# -*- coding: utf-8 -*-
"""
.. key-concepts:
Ê†∏ÂøÉÊ¶ÇÂøµ
====================================
Êú¨Á´†‰ªéÂ∑•Á®ãÂÆûË∑µÁöÑËßíÂ∫¶‰ªãÁªç AgentScope ‰∏≠ÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÔºå‰ªéËÄåÈòêÊòé AgentScope ÁöÑËÆæËÆ°ÁêÜÂøµ„ÄÇ
.. note:: ‰ªãÁªçÊ†∏ÂøÉÊ¶ÇÂøµÁöÑÁõÆÊ†áÊòØ‰∏∫‰∫ÜÊõ¥Â•ΩÁöÑÈòêÊòé AgentScope Âú®Â∑•Á®ãÂÆûË∑µ‰∏≠Ëß£ÂÜ≥ÁöÑÈóÆÈ¢òÔºå‰ª•Âèä‰∏∫ÂºÄÂèëËÄÖÊèê‰æõÁöÑÂ∏ÆÂä©ÔºåËÄåÈùûÁªôÂá∫‰∏•Ë∞®ÁöÑÂÆö‰πâ„ÄÇ
Áä∂ÊÄÅ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Áä∂ÊÄÅÔºàStateÔºâÁÆ°ÁêÜÊòØ AgentScope Ê°ÜÊû∂ÊûÑÂª∫ÁöÑÂü∫Á°Ä„ÄÇÂÖ∂‰∏≠ÔºåÁä∂ÊÄÅË°®Á§∫ÂØπË±°ËøêË°åÊó∂Êüê‰∏ÄÊó∂ÂàªÊï∞ÊçÆÁöÑÂø´ÁÖß„ÄÇ
AgentScope Â∞ÜÂØπË±°ÁöÑ‚ÄúÂàùÂßãÂåñ‚Äù‰∏é‚ÄúÁä∂ÊÄÅÁÆ°ÁêÜ‚ÄùÂàÜÁ¶ªÔºåÂØπË±°Âú®ÂàùÂßãÂåñÂêéÈÄöËøá ``load_state_dict`` Âíå ``state_dict`` ÊñπÊ≥ïÊÅ¢Â§çÂà∞‰∏çÂêåÁöÑÁä∂ÊÄÅÔºåÊàñÂØºÂá∫ÂΩìÂâçÁöÑÁä∂ÊÄÅ„ÄÇ
Âú® AgentScope ‰∏≠ÔºåÊô∫ËÉΩ‰ΩìÔºàAgentÔºâ„ÄÅËÆ∞ÂøÜÔºàmemoryÔºâ„ÄÅÈïøÊúüËÆ∞ÂøÜÔºàLong-term memoryÔºâÂíåÂ∑•ÂÖ∑Ê®°ÂùóÔºàtoolkitÔºâÈÉΩÊòØÊúâÁä∂ÊÄÅÁöÑÂØπË±°„ÄÇ
AgentScope ÈÄöËøáÊîØÊåÅÂµåÂ•óÂºèÁöÑÁä∂ÊÄÅÁÆ°ÁêÜÔºåÂ∞ÜËøô‰∫õÂØπË±°ÁöÑÁä∂ÊÄÅÁÆ°ÁêÜËÅîÁ≥ªËµ∑Êù•„ÄÇ
Ê∂àÊÅØ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ê∂àÊÅØÔºàmessageÔºâÊòØ AgentScope ÊúÄÊ†∏ÂøÉÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÁî®‰∫é
- Âú®Êô∫ËÉΩ‰Ωì‰πãÈó¥‰∫§Êç¢‰ø°ÊÅØÔºå
- Âú®Áî®Êà∑‰∫§‰∫íÁïåÈù¢ÊòæÁ§∫‰ø°ÊÅØÔºå
- Âú®ËÆ∞ÂøÜ‰∏≠Â≠òÂÇ®‰ø°ÊÅØÔºå
- ‰Ωú‰∏∫ AgentScope ‰∏é‰∏çÂêå LLM API ‰πãÈó¥ÁöÑÁªü‰∏ÄÂ™í‰ªã„ÄÇ
Â∑•ÂÖ∑
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope ‰∏≠ÁöÑ‚ÄúÂ∑•ÂÖ∑‚ÄùÊåáÁöÑÊòØÂèØË∞ÉÁî®ÁöÑ Python ÂØπË±°ÔºåÂåÖÊã¨
- ÂáΩÊï∞Ôºå
- ÂÅèÂáΩÊï∞ÔºàPartial functionÔºâÔºå
- ÂÆû‰æãÊñπÊ≥ïÔºå
- Á±ªÊñπÊ≥ïÔºå
- ÈùôÊÄÅÊñπÊ≥ïÔºå‰ª•Âèä
- Â∏¶Êúâ ``__call__`` ÊñπÊ≥ïÁöÑÂèØË∞ÉÁî®ÂÆû‰æã„ÄÇ
Ê≠§Â§ñÔºåÂèØË∞ÉÁî®ÂØπË±°ÂèØ‰ª•ÊòØ
- ÂºÇÊ≠•ÊàñÂêåÊ≠•Ë∞ÉÁî®ÁöÑÔºå
- ÊµÅÂºèÊàñÈùûÊµÅÂºèËøîÂõûÁªìÊûúÁöÑ„ÄÇ
Âõ†Ê≠§ÔºåËØ∑ÊîæÂøÉÂú® AgentScope ‰∏≠‰ΩøÁî®‰ªª‰ΩïË∞ÉÁî®ÂØπË±°‰Ωú‰∏∫Êô∫ËÉΩ‰ΩìÁöÑÂ∑•ÂÖ∑„ÄÇ
Êô∫ËÉΩ‰Ωì
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Âú® AgentScope ‰∏≠ÔºåÊô∫ËÉΩ‰ΩìÔºàAgentÔºâË°å‰∏∫Ë¢´ÊäΩË±°‰∏∫ ``AgentBase`` Á±ª‰∏≠ÁöÑ‰∏â‰∏™Ê†∏ÂøÉÂáΩÊï∞Ôºö
- ``reply``ÔºöÂ§ÑÁêÜ‰º†ÂÖ•ÁöÑÊ∂àÊÅØÂπ∂ÁîüÊàêÂìçÂ∫îÊ∂àÊÅØ„ÄÇ
- ``observe``ÔºöÊé•Êî∂Êù•Ëá™ÁéØÂ¢ÉÊàñÂÖ∂ÂÆÉÊô∫ËÉΩ‰ΩìÁöÑÊ∂àÊÅØÔºå‰ΩÜ‰∏çËøîÂõûÂìçÂ∫î„ÄÇ
- ``print``ÔºöÂ∞ÜÊ∂àÊÅØÊòæÁ§∫Âà∞ÁõÆÊ†áËæìÂá∫Ôºà‰æãÂ¶ÇÁªàÁ´Ø„ÄÅWeb ÁïåÈù¢Ôºâ„ÄÇ
‰∏∫‰∫ÜÊîØÊåÅÁî®Êà∑ÂÆûÊó∂‰ªãÂÖ•ÔºàRealtime SteeringÔºâÔºåAgentScope Êèê‰æõ‰∫ÜÈ¢ùÂ§ñ
ÁöÑ ``handle_interrupt`` ÂáΩÊï∞Êù•Â§ÑÁêÜÊô∫ËÉΩ‰ΩìÂõûÂ§çËøáÁ®ã‰∏≠ÁöÑÁî®Êà∑‰∏≠Êñ≠„ÄÇ
Ê≠§Â§ñÔºåReAct Êô∫ËÉΩ‰ΩìÊòØ AgentScope ‰∏≠ÊúÄÈáçË¶ÅÁöÑÊô∫ËÉΩ‰ΩìÔºåËØ•Êô∫ËÉΩ‰ΩìÁöÑÂõûÂ§çËøáÁ®ãÂàÜ‰∏∫‰∏§‰∏™Èò∂ÊÆµÔºö
- Êé®ÁêÜÔºàReasoningÔºâÔºöÈÄöËøáË∞ÉÁî® LLM ËøõË°åÊé®ÁêÜÂπ∂ÁîüÊàêÂ∑•ÂÖ∑Ë∞ÉÁî®
- Ë°åÂä®ÔºàActingÔºâÔºöÊâßË°åÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
Âõ†Ê≠§ÔºåÊàë‰ª¨Âú® ``ReActAgentBase`` Á±ª‰∏≠Êèê‰æõ‰∫Ü‰∏§‰∏™È¢ùÂ§ñÁöÑÊ†∏ÂøÉÂáΩÊï∞Ôºå``_reasoning`` Âíå ``_acting``„ÄÇ
ÊèêÁ§∫ËØçÊ†ºÂºèÂåñ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ÊèêÁ§∫ËØçÊ†ºÂºèÂåñÂô®ÔºàPrompt FormatterÔºâÊòØ AgentScope ‰∏≠‰øùËØÅ LLM ÂÖºÂÆπÊÄßÁöÑÊ†∏ÂøÉÁªÑ‰ª∂ÔºåË¥üË¥£Â∞ÜÊ∂àÊÅØÂØπË±°ËΩ¨Êç¢‰∏∫ LLM API ÊâÄÈúÄÁöÑÊ†ºÂºè„ÄÇ
Ê≠§Â§ñÔºåËØ∏Â¶ÇÊèêÁ§∫Â∑•Á®ã„ÄÅÊà™Êñ≠ÂíåÊ∂àÊÅØÈ™åËØÅÁ≠âÈôÑÂä†ÂäüËÉΩ‰πüÂèØ‰ª•Âú®Ê†ºÂºèÂåñÂô®‰∏≠ÂÆûÁé∞„ÄÇ
Âú®Ê†ºÂºèÂåñÂô®‰∏≠Ôºå"Â§öÊô∫ËÉΩ‰Ωì"ÔºàÊàñ"Â§öÂÆû‰Ωì"ÔºâÊ¶ÇÂøµ‰∏éÂ∏∏ËßÅÁöÑÂ§öÊô∫ËÉΩ‰ΩìÁºñÊéíÊ¶ÇÂøµ‰∏çÂêå„ÄÇ
ÂÆÉ‰∏ìÊ≥®‰∫éÁªôÂÆöÊ∂àÊÅØ‰∏≠ÂåÖÂê´Â§ö‰∏™Ë∫´‰ªΩÂÆû‰ΩìÁöÑÂú∫ÊôØÔºåÂõ†Ê≠§ LLM API ‰∏≠Â∏∏Áî®ÁöÑ ``role`` Â≠óÊÆµÔºàÈÄöÂ∏∏ÂèñÂÄº‰∏∫ "user"„ÄÅ"assistant" Êàñ "system"ÔºâÊó†Ê≥ïÂå∫ÂàÜÂÆÉ‰ª¨„ÄÇ
Âõ†Ê≠§ÔºåAgentScope Êèê‰æõ MultiAgentFormatter Êù•Â§ÑÁêÜËøôÁßçÂú∫ÊôØÔºåÈÄöÂ∏∏Áî®‰∫éÊ∏∏Êàè„ÄÅÂ§ö‰∫∫ËÅäÂ§©ÂíåÁ§æ‰∫§‰ªøÁúü„ÄÇ
.. note:: Â§öÊô∫ËÉΩ‰ΩìÂ∑•‰ΩúÊµÅ **!=** Ê†ºÂºèÂåñÂô®‰∏≠ÁöÑÂ§öÊô∫ËÉΩ‰Ωì„ÄÇ‰æãÂ¶ÇÔºåÂç≥‰Ωø‰ª•‰∏ã‰ª£Á†ÅÁâáÊÆµÂèØËÉΩÊ∂âÂèäÂ§ö‰∏™
Êô∫ËÉΩ‰ΩìÔºà``tool_agent`` Âíå ``tool_function`` ÁöÑË∞ÉÁî®ËÄÖÔºâÔºå‰ΩÜÊòØËæìÂÖ•ÁöÑ ``query`` ÂèÇÊï∞
Ë¢´ÂåÖË£ÖÊàê‰∫Ü ``role`` ‰∏∫ **‚Äúuser‚Äù** Ê∂àÊÅØÔºåÂõ†Ê≠§ ``role`` Â≠óÊÆµ‰ªçÁÑ∂ÂèØ‰ª•Âå∫ÂàÜÂÆÉ‰ª¨„ÄÇ
.. code-block:: python
async def tool_function(query: str) -> str:
\"\"\"Ë∞ÉÁî®Âè¶‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞\"\"\"
msg = Msg("user", query, role="user")
tool_agent = Agent(name="Programmer")
return await tool_agent(msg)
ÁêÜËß£ËøôÁßçÂå∫Âà´ÊúâÂä©‰∫éÂºÄÂèëËÄÖ‰∫ÜËß£Ê†ºÂºèÂåñÂô®ÈÉ®ÂàÜ‰∏≠ÂçïÊô∫ËÉΩ‰ΩìÂíåÂ§öÊô∫ËÉΩ‰ΩìÁöÑÂå∫Âà´„ÄÇ
ÈïøÊúüËÆ∞ÂøÜ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ËôΩÁÑ∂ AgentScope ‰∏∫Áü≠ÊúüËÆ∞ÂøÜÂíåÈïøÊúüËÆ∞ÂøÜÊèê‰æõ‰∫Ü‰∏çÂêåÁöÑÂü∫Á±ªÔºå‰ΩÜÊòØ AgentScope ‰∏≠Âπ∂Ê≤°Êúâ‰∏•Ê†ºÂå∫ÂàÜÂÆÉ‰ª¨ÁöÑ‰ΩúÁî®„ÄÇ
Âú®Êàë‰ª¨ÁúãÊù•Ôºå‰∏ÄÂàáÈÉΩÂ∫îËØ•ÊòØ **ÈúÄÊ±ÇÈ©±Âä®ÁöÑ**„ÄÇÂè™Ë¶ÅÂºÄÂèëËÄÖÁöÑÈúÄÊ±ÇÂæóÂà∞‰∫ÜÂæàÂ•ΩÁöÑÊª°Ë∂≥ÔºåÂÆåÂÖ®ÂèØ‰ª•Âè™‰ΩøÁî®‰∏Ä‰∏™Âº∫Â§ßÁöÑËÆ∞ÂøÜÁ≥ªÁªü„ÄÇ
ËøôÈáå‰∏∫‰∫ÜÁ°Æ‰øù AgentScope ÁöÑÁÅµÊ¥ªÊÄßÔºåÊàë‰ª¨‰∏∫ÈïøÊúüËÆ∞ÂøÜÊèê‰æõ‰∫Ü‰∏§ÁßçËøêË°åÂíåÁÆ°ÁêÜÊñπÂºèÔºåÂºÄÂèëËÄÖÂèØ‰ª•Ê†πÊçÆËá™Â∑±ÁöÑÈúÄË¶ÅËøõË°åÈÄâÊã©„ÄÇ
ÂÖ∂‰∏≠‚Äúagent_control‚ÄùÊ®°ÂºèÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìËá™Â∑±‰∏ªÂä®ÁÆ°ÁêÜÈïøÊúüËÆ∞ÂøÜÔºåËÄå‚Äústatic_control‚ÄùÂàôÊòØ‰º†ÁªüÁöÑÁî±ÂºÄÂèëËÄÖÁÆ°ÁêÜÁöÑÈïøÊúüËÆ∞ÂøÜ
Ê®°Âºè„ÄÇ
"""
---- quickstart_message.py ----
# -*- coding: utf-8 -*-
"""
.. _message:
ÂàõÂª∫Ê∂àÊÅØ
====================
Ê∂àÊÅØÊòØ AgentScope ‰∏≠ÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÔºåÁî®‰∫éÊîØÊåÅÂ§öÊ®°ÊÄÅÊï∞ÊçÆ„ÄÅÂ∑•ÂÖ∑ API„ÄÅ‰ø°ÊÅØÂ≠òÂÇ®/‰∫§Êç¢ÂíåÊèêÁ§∫ÊûÑÂª∫„ÄÇ
‰∏Ä‰∏™Ê∂àÊÅØÁî±Âõõ‰∏™Â≠óÊÆµÁªÑÊàêÔºö
- ``name``Ôºå
- ``role``Ôºå
- ``content``Ôºå‰ª•Âèä
- ``metadata``
Ëøô‰∫õÂ≠óÊÆµÁöÑÁ±ªÂûãÂíåÂê´‰πâÂ¶Ç‰∏ãÔºö
.. list-table:: Ê∂àÊÅØÂØπË±°‰∏≠ÁöÑÂ≠óÊÆµ
:header-rows: 1
* - Â≠óÊÆµ
- Á±ªÂûã
- ÊèèËø∞
* - name
- ``str``
- Ê∂àÊÅØÂèëÈÄÅËÄÖÁöÑÂêçÁß∞/Ë∫´‰ªΩ
* - role
- | ``Literal[``
| ``"system",``
| ``"assistant",``
| ``"user"``
| ``]``
- Ê∂àÊÅØÂèëÈÄÅËÄÖÁöÑËßíËâ≤ÔºåÂøÖÈ°ªÊòØ "system"„ÄÅ"assistant" Êàñ "user" ‰πã‰∏Ä„ÄÇ
* - content
- ``str | list[ContentBlock]``
- Ê∂àÊÅØÂåÖÂê´ÁöÑÊï∞ÊçÆÔºåÂèØ‰ª•ÊòØÂ≠óÁ¨¶‰∏≤Êàñ block ÁöÑÂàóË°®„ÄÇ
* - metadata
- ``dict[str, JSONSerializableObject] | None``
- ÂåÖÂê´È¢ùÂ§ñÂÖÉÊï∞ÊçÆÁöÑÂ≠óÂÖ∏ÔºåÈÄöÂ∏∏Áî®‰∫éÁªìÊûÑÂåñËæìÂá∫„ÄÇ
.. tip:: - Âú®ÂÖ∑ÊúâÂ§ö‰∏™Ë∫´‰ªΩÂÆû‰ΩìÁöÑÂ∫îÁî®Á®ãÂ∫è‰∏≠Ôºå``name`` Â≠óÊÆµÁî®‰∫éÂå∫ÂàÜ‰∏çÂêåÁöÑË∫´‰ªΩ„ÄÇ
- Âª∫ËÆÆÂ∞Ü ``metadata`` Â≠óÊÆµÁî®‰∫éÁªìÊûÑÂåñËæìÂá∫ÔºåÂú® AgentScope ÂÜÖÁΩÆÁöÑÊ®°Âùó‰∏≠Ôºå``metadata`` ‰∏ç‰ºöÂèÇ‰∏é LLM ÁöÑÊèêÁ§∫ÊûÑÂª∫„ÄÇ
Êé•‰∏ãÊù•ÔºåÊàë‰ª¨Ê†πÊçÆ‰∏çÂêåÁöÑÂú∫ÊôØÂàÜÂà´‰ªãÁªç ``content`` Â≠óÊÆµ‰∏≠ÊîØÊåÅÁöÑ‰∏çÂêåÊï∞ÊçÆÁªìÊûÑÔºàblockÔºâ„ÄÇ
"""
from agentscope.message import (
Msg,
Base64Source,
TextBlock,
ThinkingBlock,
ImageBlock,
AudioBlock,
VideoBlock,
ToolUseBlock,
ToolResultBlock,
)
import json
# %%
# ÂàõÂª∫ÊñáÊú¨Ê∂àÊÅØ
# -----------------------------
# ÈÄöËøáÊèê‰æõ ``name``„ÄÅ``role`` Âíå ``content`` Â≠óÊÆµÊù•ÂàõÂª∫Ê∂àÊÅØÂØπË±°„ÄÇ
#
msg = Msg(
name="Jarvis",
role="assistant",
content="‰Ω†Â•ΩÔºÅÊàëËÉΩÊÄé‰πàÂ∏ÆÂä©‰Ω†Ôºü",
)
print(f"ÂèëÈÄÅËÄÖÁöÑÂêçÁß∞: {msg.name}")
print(f"ÂèëÈÄÅËÄÖÁöÑËßíËâ≤: {msg.role}")
print(f"Ê∂àÊÅØÁöÑÂÜÖÂÆπ: {msg.content}")
# %%
# ÂàõÂª∫Â§öÊ®°ÊÄÅÊ∂àÊÅØ
# --------------------------------------
# Message Á±ªÈÄöËøáÊèê‰æõ‰∏çÂêåÁöÑ block ÁªìÊûÑÊù•ÊîØÊåÅÂ§öÊ®°ÊÄÅÂÜÖÂÆπÔºö
#
# .. list-table:: AgentScope ‰∏≠ÁöÑÂ§öÊ®°ÊÄÅ block
# :header-rows: 1
#
# * - Á±ª
# - ÊèèËø∞
# - Á§∫‰æã
# * - TextBlock
# - Á∫ØÊñáÊú¨Êï∞ÊçÆ
# - .. code-block:: python
#
# TextBlock(
# type="text",
# text="Hello, world!"
# )
# * - ImageBlock
# - ÂõæÂÉèÊï∞ÊçÆ
# - .. code-block:: python
#
# ImageBlock(
# type="image",
# source=URLSource(
# type="url",
# url="https://example.com/image.jpg"
# )
# )
# * - AudioBlock
# - Èü≥È¢ëÊï∞ÊçÆ
# - .. code-block:: python
#
# AudioBlock(
# type="audio",
# source=URLSource(
# type="url",
# url="https://example.com/audio.mp3"
# )
# )
# * - VideoBlock
# - ËßÜÈ¢ëÊï∞ÊçÆ
# - .. code-block:: python
#
# VideoBlock(
# type="video",
# source=URLSource(
# type="url",
# url="https://example.com/video.mp4"
# )
# )
#
# ÂØπ‰∫é ``ImageBlock``„ÄÅ``AudioBlock`` Âíå ``VideoBlock``ÔºåËøòÂèØ‰ª•‰ΩøÁî® base64 ÁºñÁ†ÅÁöÑÂ≠óÁ¨¶‰∏≤‰Ωú‰∏∫Êï∞ÊçÆÊ∫êÔºàSourceÔºâÔºö
#
msg = Msg(
name="Jarvis",
role="assistant",
content=[
TextBlock(
type="text",
text="ËøôÊòØ‰∏Ä‰∏™ÂåÖÂê´ base64 ÁºñÁ†ÅÊï∞ÊçÆÁöÑÂ§öÊ®°ÊÄÅÊ∂àÊÅØ„ÄÇ",
),
ImageBlock(
type="image",
source=Base64Source(
type="base64",
media_type="image/jpeg",
data="/9j/4AAQSkZ...",
),
),
AudioBlock(
type="audio",
source=Base64Source(
type="base64",
media_type="audio/mpeg",
data="SUQzBAAAAA...",
),
),
VideoBlock(
type="video",
source=Base64Source(
type="base64",
media_type="video/mp4",
data="AAAAIGZ0eX...",
),
),
],
)
# %%
# ÂàõÂª∫Êé®ÁêÜÊ∂àÊÅØ
# --------------------------------------
# ``ThinkingBlock`` Áî®‰∫éÊîØÊåÅÊé®ÁêÜÊ®°ÂûãÔºåÂåÖÂê´Ê®°ÂûãÁöÑÊÄùËÄÉËøáÁ®ã„ÄÇ
#
msg_thinking = Msg(
name="Jarvis",
role="assistant",
content=[
ThinkingBlock(
type="thinking",
thinking="ÊàëÊ≠£Âú®‰∏∫ AgentScope ÊûÑÂª∫‰∏Ä‰∏™ÊÄùËÄÉÂùóÁöÑÁ§∫‰æã„ÄÇ",
),
TextBlock(
type="text",
text="ËøôÊòØ‰∏Ä‰∏™ÊÄùËÄÉÂùóÁöÑÁ§∫‰æã„ÄÇ",
),
],
)
# %%
# .. _tool-block:
#
# ÂàõÂª∫Â∑•ÂÖ∑‰ΩøÁî®/ÁªìÊûúÊ∂àÊÅØ
# --------------------------------------
# ``ToolUseBlock`` Âíå ``ToolResultBlock`` Áî®‰∫éÊîØÊåÅÂ∑•ÂÖ∑ APIÔºö
#
msg_tool_call = Msg(
name="Jarvis",
role="assistant",
content=[
ToolUseBlock(
type="tool_use",
id="343",
name="get_weather",
input={
"location": "Beijing",
},
),
],
)
msg_tool_res = Msg(
name="system",
role="system",
content=[
ToolResultBlock(
type="tool_result",
id="343",
name="get_weather",
output="Âåó‰∫¨ÁöÑÂ§©Ê∞îÊòØÊô¥Â§©ÔºåÊ∏©Â∫¶‰∏∫ 25¬∞C„ÄÇ",
),
],
)
# %%
# .. tip:: AgentScope ‰∏≠ÔºåÈÄöÂ∏∏‰ΩøÁî® ``role`` ‰∏∫‚Äúsystem‚ÄùÁöÑÊ∂àÊÅØÊù•ËÆ∞ÂΩïÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑÊâßË°åÁªìÊûú„ÄÇÊúâÂÖ≥ AgentScope ‰∏≠Â∑•ÂÖ∑ÁöÑÊõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇËÄÉ :ref:`tool` ÈÉ®ÂàÜ„ÄÇ
#
# Â∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñ
# ------------------------------------------------
# Ê∂àÊÅØÂØπË±°ÂèØ‰ª•ÂàÜÂà´ÈÄöËøá ``to_dict`` Âíå ``from_dict`` ÊñπÊ≥ïËøõË°åÂ∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñ„ÄÇ
serialized_msg = msg.to_dict()
print(type(serialized_msg))
print(json.dumps(serialized_msg, indent=4, ensure_ascii=False))
# %%
# ‰ªé JSON Ê†ºÂºèÁöÑÊï∞ÊçÆÂèçÂ∫èÂàóÂåñÊ∂àÊÅØ„ÄÇ
new_msg = Msg.from_dict(serialized_msg)
print(type(new_msg))
print(f'Ê∂àÊÅØÁöÑÂèëÈÄÅËÄÖ: "{new_msg.name}"')
print(f'ÂèëÈÄÅËÄÖÁöÑËßíËâ≤: "{new_msg.role}"')
print(f'Ê∂àÊÅØÁöÑÂÜÖÂÆπ: "{json.dumps(new_msg.content, indent=4, ensure_ascii=False)}"')
# %%
# Â±ûÊÄßÂáΩÊï∞
# ------------------------------------------------
# ‰∏∫‰∫Ü‰æø‰∫é‰ΩøÁî® Msg ÂØπË±°ÔºåAgentScope Êèê‰æõ‰∫Ü‰ª•‰∏ãÂáΩÊï∞Ôºö
#
# .. list-table:: Msg ÂØπË±°ÁöÑÂáΩÊï∞
# :header-rows: 1
#
# * - ÂáΩÊï∞
# - ÂèÇÊï∞
# - ÊèèËø∞
# * - ``get_text_content``
# -
# - Â∞ÜÊâÄÊúâ ``TextBlock`` ‰∏≠ÁöÑÂÜÖÂÆπÊî∂ÈõÜÂà∞Âçï‰∏™Â≠óÁ¨¶‰∏≤‰∏≠ÔºàÁî® "\\n" ÂàÜÈöîÔºâ„ÄÇ
# * - ``get_content_blocks``
# - ``block_type``
# - ËøîÂõûÊåáÂÆöÁ±ªÂûãÁöÑÂÜÖÂÆπÂùóÂàóË°®„ÄÇÂ¶ÇÊûúÊú™Êèê‰æõ ``block_type``ÔºåÂàô‰ª•ÂùóÊ†ºÂºèËøîÂõûÂÖ®ÈÉ®ÂÜÖÂÆπ„ÄÇ
# * - ``has_content_blocks``
# - ``block_type``
# - Ê£ÄÊü•Ê∂àÊÅØÊòØÂê¶ÂÖ∑ÊúâÊåáÂÆöÁ±ªÂûãÁöÑÂÜÖÂÆπÂùó„ÄÇ``str`` ÂÜÖÂÆπ‰ºöË¢´ËßÜ‰∏∫ ``TextBlock`` Á±ªÂûã„ÄÇ
---- task_agent.py ----
# -*- coding: utf-8 -*-
"""
.. _agent:
Êô∫ËÉΩ‰Ωì
=========================
Âú®Á´†Êàë‰ª¨È¶ñÂÖàÈáçÁÇπ‰ªãÁªç AgentScope ‰∏≠ÁöÑ ReAct Êô∫ËÉΩ‰ΩìÔºåÁÑ∂ÂêéÁÆÄË¶Å‰ªãÁªçÂ¶Ç‰Ωï‰ªéÈõ∂ÂºÄÂßãËá™ÂÆö‰πâÊô∫ËÉΩ‰Ωì„ÄÇ
ReAct Êô∫ËÉΩ‰Ωì
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Âú® AgentScope ‰∏≠Ôºå``ReActAgent`` Á±ªÂ∞ÜÂêÑÁßçÂäüËÉΩÈõÜÊàêÂà∞ÊúÄÁªàÂÆûÁé∞‰∏≠ÔºåÂÖ∑‰ΩìÂåÖÊã¨
.. list-table:: ``ReActAgent`` ÁöÑÂäüËÉΩÁâπÊÄß
:header-rows: 1
* - ÂäüËÉΩÁâπÊÄß
- ÂèÇËÄÉÊñáÊ°£
* - ÊîØÊåÅÂÆûÊó∂‰ªãÂÖ•ÔºàRealtime SteeringÔºâ
-
* - ÊîØÊåÅÂπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®
-
* - ÊîØÊåÅÁªìÊûÑÂåñËæìÂá∫
-
* - ÊîØÊåÅÊô∫ËÉΩ‰ΩìËá™‰∏ªÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºàMeta toolÔºâ
- :ref:`tool`
* - ÊîØÊåÅÂáΩÊï∞Á≤íÂ∫¶ÁöÑ MCP ÊéßÂà∂
- :ref:`mcp`
* - ÊîØÊåÅÊô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂ÈïøÊúüËÆ∞ÂøÜ
- :ref:`long-term-memory`
* - ÊîØÊåÅËá™Âä®Áä∂ÊÄÅÁÆ°ÁêÜ
- :ref:`state`
Áî±‰∫éÁØáÂπÖÈôêÂà∂ÔºåÊú¨Á´†Êàë‰ª¨‰ªÖÊºîÁ§∫ ``ReActAgent`` Á±ªÁöÑÂâç‰∏â‰∏™ÂäüËÉΩÁâπÊÄßÔºåÂÖ∂ÂÆÉÂäüËÉΩÊàë‰ª¨Âú®ÂØπÂ∫îÁöÑÁ´†ËäÇËøõË°å‰ªãÁªç„ÄÇ
"""
import asyncio
import json
import os
from datetime import datetime
import time
from pydantic import BaseModel, Field
from agentscope.agent import ReActAgent
from agentscope.formatter import DashScopeChatFormatter
from agentscope.memory import InMemoryMemory
from agentscope.message import TextBlock, Msg
from agentscope.model import DashScopeChatModel
from agentscope.tool import Toolkit, ToolResponse
# %%
# ÂÆûÊó∂ÊéßÂà∂
# ---------------------------------------
#
# ÂÆûÊó∂ÊéßÂà∂Êåá **ÂÖÅËÆ∏Áî®Êà∑ÈöèÊó∂‰∏≠Êñ≠Êô∫ËÉΩ‰ΩìÁöÑÂõûÂ§çÔºå‰ªãÂÖ•Êô∫ËÉΩ‰ΩìÁöÑÊâßË°åËøáÁ®ã**ÔºåAgentScope Âü∫‰∫é asyncio ÂèñÊ∂àÊú∫Âà∂ÂÆûÁé∞‰∫ÜËØ•ÂäüËÉΩ„ÄÇ
#
# ÂÖ∑‰ΩìÊù•ËØ¥ÔºåAgentScope ‰∏≠Êô∫ËÉΩ‰ΩìÊèê‰æõ‰∫Ü ``interrupt`` ÊñπÊ≥ïÔºåÂΩìËØ•ÂáΩÊï∞Ë¢´Ë∞ÉÁî®Êó∂ÔºåÂÆÉÂ∞ÜÂèñÊ∂àÂΩìÂâçÊ≠£Âú®ÊâßË°åÁöÑ `reply` ÂáΩÊï∞ÔºåÂπ∂ÊâßË°å ``handle_interrupt`` ÊñπÊ≥ïËøõË°åÂêéÂ§ÑÁêÜ„ÄÇ
#
# .. hint:: ÁªìÂêà :ref:`tool` ‰∏≠ÊèêÂà∞ÁöÑ AgentScope ÊîØÊåÅÂ∑•ÂÖ∑ÂáΩÊï∞ÊµÅÂºèËøîÂõûÁªìÊûúÁöÑÂäüËÉΩÔºåÂ∑•ÂÖ∑ÊâßË°åËøáÁ®ã‰∏≠Â¶ÇÊûúÊâßË°åÊó∂Èó¥ËøáÈïøÊàñÂÅèÁ¶ªÁî®Êà∑ÊúüÊúõÔºåÁî®Êà∑ÂèØ‰ª•ÈÄöËøáÂú®ÁªàÁ´Ø‰∏≠Êåâ Ctrl+C ÊàñÂú®‰ª£Á†Å‰∏≠Ë∞ÉÁî®Êô∫ËÉΩ‰ΩìÁöÑ
# ``interrupt`` ÊñπÊ≥ïÊù•‰∏≠Êñ≠Â∑•ÂÖ∑ÊâßË°å„ÄÇ
#
# .. hint:: ``ReActAgent`` ‰∏≠Êèê‰æõ‰∫ÜÂÆåÂñÑÁöÑ‰∏≠Êñ≠ÈÄªËæëÔºåÊô∫ËÉΩ‰ΩìÁöÑËÆ∞ÂøÜÂíåÁä∂ÊÄÅ‰ºöÂú®‰∏≠Êñ≠ÂèëÁîüÊó∂Ë¢´Ê≠£Á°ÆÁöÑ‰øùÂ≠ò„ÄÇ
#
# ‰∏≠Êñ≠ÈÄªËæëÂ∑≤Âú® ``AgentBase`` Á±ª‰∏≠‰Ωú‰∏∫Âü∫Êú¨ÂäüËÉΩÂÆûÁé∞ÔºåÂπ∂Êèê‰æõ ``handle_interrupt`` ÊäΩË±°ÊñπÊ≥ï‰æõÁî®Êà∑Ëá™ÂÆö‰πâ
# ‰∏≠Êñ≠ÁöÑÂêéÂ§ÑÁêÜÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
# .. code-block:: python
#
# # AgentBase ÁöÑ‰ª£Á†ÅÁâáÊÆµ
# class AgentBase:
# ...
# async def __call__(self, *args: Any, **kwargs: Any) -> Msg:
# ...
# reply_msg: Msg | None = None
# try:
# self._reply_task = asyncio.current_task()
# reply_msg = await self.reply(*args, **kwargs)
#
# except asyncio.CancelledError:
# # ÊçïËé∑‰∏≠Êñ≠Âπ∂ÈÄöËøá handle_interrupt ÊñπÊ≥ïÂ§ÑÁêÜ
# reply_msg = await self.handle_interrupt(*args, **kwargs)
#
# ...
#
# @abstractmethod
# async def handle_interrupt(self, *args: Any, **kwargs: Any) -> Msg:
# pass
#
#
# Âú® ``ReActAgent`` Á±ªÁöÑÂÆûÁé∞‰∏≠ÔºåÊàë‰ª¨ËøîÂõû‰∏Ä‰∏™Âõ∫ÂÆöÊ∂àÊÅØ"I noticed that you have interrupted me. What can I do for you?"ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
# .. figure:: ../../_static/images/interruption_zh.gif
# :width: 100%
# :align: center
# :class: bordered-image
# :alt: ‰∏≠Êñ≠Á§∫‰æã
#
# ‰∏≠Êñ≠Êô∫ËÉΩ‰Ωì ``reply`` ÁöÑÊâßË°åËøáÁ®ã
#
# ÂºÄÂèëËÄÖÂèØ‰ª•ÈÄöËøáË¶ÜÁõñ ``handle_interrupt`` ÂáΩÊï∞ÂÆûÁé∞Ëá™ÂÆö‰πâÁöÑ‰∏≠Êñ≠ÂêéÂ§ÑÁêÜÈÄªËæëÔºå‰æãÂ¶ÇÔºåË∞ÉÁî® LLM ÁîüÊàêÂØπ‰∏≠Êñ≠ÁöÑÁÆÄÂçïÂìçÂ∫î„ÄÇ
#
#
# Âπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®
# ----------------------------------------
# ``ReActAgent`` ÈÄöËøáÂú®ÂÖ∂ÊûÑÈÄ†ÂáΩÊï∞‰∏≠Êèê‰æõ ``parallel_tool_calls`` ÂèÇÊï∞Êù•ÊîØÊåÅÂπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®„ÄÇ
# ÂΩì LLM ÁîüÊàêÂ§ö‰∏™Â∑•ÂÖ∑Ë∞ÉÁî®‰∏î ``parallel_tool_calls`` ËÆæÁΩÆ‰∏∫ ``True`` Êó∂Ôºå
# ÂÆÉ‰ª¨Â∞ÜÈÄöËøá ``asyncio.gather`` ÂáΩÊï∞Âπ∂Ë°åÊâßË°å„ÄÇ
#
# .. note:: ``ReActAgent`` ‰∏≠ÁöÑÂ∑•ÂÖ∑Âπ∂Ë°åË∞ÉÁî®ÊòØÂü∫‰∫éÂºÇÊ≠• ``asyncio.gather`` ÂÆûÁé∞ÁöÑÔºåÂõ†Ê≠§ÔºåÂè™ÊúâÂΩìÂ∑•ÂÖ∑ÂáΩÊï∞ÊòØÂºÇÊ≠•ÂáΩÊï∞ÔºåÂêåÊó∂Â∑•ÂÖ∑ÂáΩÊï∞ÂÜÖ‰πü‰∏∫ÂºÇÊ≠•ÈÄªËæëÊó∂ÔºåÊâçËÉΩÊúÄÂ§ßÁ®ãÂ∫¶ÂèëÊå•Â∑•ÂÖ∑Âπ∂Ë°åÊâßË°åÁöÑÊïàÊûú
#
# .. note:: ËøêË°åÊó∂ËØ∑Á°Æ‰øùÊ®°ÂûãÂ±ÇÈù¢ÊîØÊåÅÂ∑•ÂÖ∑Âπ∂Ë°åË∞ÉÁî®ÔºåÂπ∂‰∏îÁõ∏Â∫îÂèÇÊï∞ËÆæÁΩÆÊ≠£Á°ÆÔºàÂèØ‰ª•ÈÄöËøá ``generate_kwargs`` ‰º†ÂÖ•ÔºâÔºå‰æãÂ¶ÇÂØπ‰∫éDashScope APIÔºåÈúÄË¶ÅËÆæÁΩÆ ``parallel_tool_calls`` ‰∏∫ ``True``ÔºåÂê¶ÂàôÂ∞ÜÊó†Ê≥ïËøõË°åÂπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®„ÄÇ
# ÂáÜÂ§á‰∏Ä‰∏™Â∑•ÂÖ∑ÂáΩÊï∞
async def example_tool_function(tag: str) -> ToolResponse:
"""‰∏Ä‰∏™Á§∫‰æãÂ∑•ÂÖ∑ÂáΩÊï∞"""
start_time = datetime.now().strftime("%H:%M:%S.%f")
# ‰ºëÁú† 3 Áßí‰ª•Ê®°ÊãüÈïøÊó∂Èó¥ËøêË°åÁöÑ‰ªªÂä°
await asyncio.sleep(3)
end_time = datetime.now().strftime("%H:%M:%S.%f")
return ToolResponse(
content=[
TextBlock(
type="text",
text=f"Ê†áÁ≠æ {tag} ÂºÄÂßã‰∫é {start_time}ÔºåÁªìÊùü‰∫é {end_time}„ÄÇ",
),
],
)
toolkit = Toolkit()
toolkit.register_tool_function(example_tool_function)
# ÂàõÂª∫‰∏Ä‰∏™ ReAct Êô∫ËÉΩ‰Ωì
agent = ReActAgent(
name="Jarvis",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Jarvis ÁöÑÊúâÁî®Âä©Êâã„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
# ÂêØÁî®Âπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®
generate_kwargs={
"parallel_tool_calls": True,
},
),
memory=InMemoryMemory(),
formatter=DashScopeChatFormatter(),
toolkit=toolkit,
parallel_tool_calls=True,
)
async def example_parallel_tool_calls() -> None:
"""Âπ∂Ë°åÂ∑•ÂÖ∑Ë∞ÉÁî®Á§∫‰æã"""
# ÊèêÁ§∫Êô∫ËÉΩ‰ΩìÂêåÊó∂ÁîüÊàê‰∏§‰∏™Â∑•ÂÖ∑Ë∞ÉÁî®
await agent(
Msg(
"user",
"ÂêåÊó∂ÁîüÊàê‰∏§‰∏™ 'example_tool_function' ÂáΩÊï∞ÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®ÔºåÊ†áÁ≠æÂàÜÂà´‰∏∫ 'tag1' Âíå 'tag2'Ôºå‰ª•‰æøÂÆÉ‰ª¨ÂèØ‰ª•Âπ∂Ë°åÊâßË°å„ÄÇ",
"user",
),
)
asyncio.run(example_parallel_tool_calls())
# %%
# ÁªìÊûÑÂåñËæìÂá∫
# ----------------------------------------
# AgentScope ‰∏≠ÁöÑÁªìÊûÑÂåñËæìÂá∫ÊòØ‰∏éÂ∑•ÂÖ∑Ë∞ÉÁî®Á¥ßÂØÜÁªìÂêàÁöÑ„ÄÇÂÖ∑‰ΩìÊù•ËØ¥Ôºå``ReActAgent`` Á±ªÂú®ÂÖ∂ ``__call__`` ÂáΩÊï∞‰∏≠Êé•Êî∂ ``pydantic.BaseModel`` ÁöÑÂ≠êÁ±ª‰Ωú‰∏∫ ``structured_model`` ÂèÇÊï∞„ÄÇ
# ‰ªéËÄåÊèê‰æõÂ§çÊùÇÁöÑÁªìÊûÑÂåñËæìÂá∫ÈôêÂà∂„ÄÇ
# ÁÑ∂ÂêéÊàë‰ª¨ÂèØ‰ª•‰ªé ËøîÂõûÊ∂àÊÅØÁöÑ ``metadata`` Â≠óÊÆµËé∑ÂèñÁªìÊûÑÂåñËæìÂá∫„ÄÇ
#
# ‰ª•‰ªãÁªçÁà±Âõ†ÊñØÂù¶‰∏∫‰æãÔºö
#
# ÂàõÂª∫‰∏Ä‰∏™ ReAct Êô∫ËÉΩ‰Ωì
agent = ReActAgent(
name="Jarvis",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Jarvis ÁöÑÊúâÁî®Âä©Êâã„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
),
formatter=DashScopeChatFormatter(),
)
# ÁªìÊûÑÂåñÊ®°Âûã
class Model(BaseModel):
name: str = Field(description="‰∫∫Áâ©ÁöÑÂßìÂêç")
description: str = Field(description="‰∫∫Áâ©ÁöÑ‰∏ÄÂè•ËØùÊèèËø∞")
age: int = Field(description="Âπ¥ÈæÑ")
honor: list[str] = Field(description="‰∫∫Áâ©Ëç£Ë™âÂàóË°®")
async def example_structured_output() -> None:
"""ÁªìÊûÑÂåñËæìÂá∫Á§∫‰æã"""
res = await agent(
Msg(
"user",
"‰ªãÁªçÁà±Âõ†ÊñØÂù¶",
"user",
),
structured_model=Model,
)
print("\nÁªìÊûÑÂåñËæìÂá∫Ôºö")
print(json.dumps(res.metadata, indent=4, ensure_ascii=False))
asyncio.run(example_structured_output())
# %%
# Ëá™ÂÆö‰πâÊô∫ËÉΩ‰Ωì
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope Êèê‰æõ‰∫Ü‰∏§‰∏™Âü∫Á±ªÔºö``AgentBase`` Âíå ``ReActAgentBase``ÔºåÂÆÉ‰ª¨Âú®ÊäΩË±°ÊñπÊ≥ïÂíåÊîØÊåÅÁöÑÈí©Â≠êÂáΩÊï∞ÊñπÈù¢ÊúâÊâÄ‰∏çÂêå„ÄÇ
# ÂÖ∑‰ΩìÊù•ËØ¥Ôºå``ReActAgentBase`` Êâ©Â±ï‰∫Ü ``AgentBase``ÔºåÂ¢ûÂä†‰∫ÜÈ¢ùÂ§ñÁöÑ ``_reasoning`` Âíå ``_acting`` ÊäΩË±°ÊñπÊ≥ïÔºå‰ª•ÂèäÂÆÉ‰ª¨ÁöÑÂâçÁΩÆÂíåÂêéÁΩÆÈí©Â≠êÂáΩÊï∞„ÄÇ
#
# ÂºÄÂèëËÄÖÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÈÄâÊã©ÁªßÊâøËøô‰∏§‰∏™Âü∫Á±ª‰∏≠ÁöÑ‰ªª‰∏Ä‰∏™„ÄÇ
# Êàë‰ª¨ÊÄªÁªì‰∫Ü ``agentscope.agent`` Ê®°Âùó‰∏ãÁöÑÊô∫ËÉΩ‰ΩìÂ¶Ç‰∏ãÔºö
#
# .. list-table:: AgentScope ‰∏≠ÁöÑÊô∫ËÉΩ‰ΩìÁ±ª
# :header-rows: 1
#
# * - Á±ª
# - ÊäΩË±°ÊñπÊ≥ï
# - ÊîØÊåÅÁöÑÈí©Â≠êÂáΩÊï∞
# - ÊèèËø∞
# * - ``AgentBase``
# - | ``reply``
# | ``observe``
# | ``print``
# | ``handle_interrupt``
# - | pre\_/post_reply
# | pre\_/post_observe
# | pre\_/post_print
# - ÊâÄÊúâÊô∫ËÉΩ‰ΩìÁöÑÂü∫Á±ªÔºåÊèê‰æõÂü∫Êú¨Êé•Âè£ÂíåÈí©Â≠ê„ÄÇ
# * - ``ReActAgentBase``
# - | ``reply``
# | ``observe``
# | ``print``
# | ``handle_interrupt``
# | ``_reasoning``
# | ``_acting``
# - | pre\_/post_reply
# | pre\_/post_observe
# | pre\_/post_print
# | pre\_/post_reasoning
# | pre\_/post_acting
# - ReAct Á±ªÊô∫ËÉΩ‰ΩìÁöÑÊäΩË±°Á±ªÔºåÊâ©Â±ï‰∫Ü ``AgentBase``ÔºåÂ¢ûÂä†‰∫Ü ``_reasoning`` Âíå ``_acting`` ÊäΩË±°ÊñπÊ≥ïÂèäÂÖ∂Èí©Â≠ê„ÄÇ
# * - ``ReActAgent``
# - \-
# - | pre\_/post_reply
# | pre\_/post_observe
# | pre\_/post_print
# | pre\_/post_reasoning
# | pre\_/post_acting
# - ``ReActAgentBase`` ÁöÑÂÆûÁé∞
# * - ``UserAgent``
# -
# -
# - ‰ª£Ë°®Áî®Êà∑ÁöÑÁâπÊÆäÊô∫ËÉΩ‰ΩìÔºåÁî®‰∫é‰∏éÊô∫ËÉΩ‰Ωì‰∫§‰∫í
#
#
#
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - :ref:`tool`
# - :ref:`hook`
#
---- task_embedding.py ----
# -*- coding: utf-8 -*-
"""
.. _embedding:
ÂµåÂÖ•(Embedding)
=========================
AgentScope ‰∏≠ÔºåÂµåÂÖ•Ê®°ÂùóÊèê‰æõ‰∫ÜÁî®‰∫éÂêëÈáèÁîüÊàêÁöÑÁªü‰∏ÄÊé•Âè£ÔºåÂÖ∑Êúâ‰ª•‰∏ãÁâπÊÄßÔºö
- ÊîØÊåÅ **ÁºìÂ≠ò embedding** ‰ª•ÈÅøÂÖçÂÜó‰ΩôÁöÑ API Ë∞ÉÁî®
- ÊîØÊåÅ **‰∏çÂêå embedding API Êèê‰æõÂïÜ** Âπ∂Êèê‰æõ‰∏ÄËá¥ÁöÑÊé•Âè£
AgentScope ÂÜÖÁΩÆÊîØÊåÅ‰ª•‰∏ã APIÔºö
.. list-table::
:header-rows: 1
* - API Êèê‰æõÂïÜ
- Á±ª
* - OpenAI
- ``OpenAITextEmbedding``
* - Gemini
- ``GeminiTextEmbedding``
* - DashScope
- ``DashScopeTextEmbedding``, ``DashScopeMultiModalEmbedding``
* - Ollama
- ``OllamaTextEmbedding``
ÊâÄÊúâÁ±ªÈÉΩÁªßÊâøËá™ ``EmbeddingModelBase``ÔºåÂÆûÁé∞‰∫Ü ``__call__`` ÊñπÊ≥ïÂπ∂ÁîüÊàêÂåÖÂê´ÂµåÂÖ•Âíå‰ΩøÁî®‰ø°ÊÅØÁöÑ ``EmbeddingResponse`` ÂØπË±°„ÄÇ
ÂÖ∂‰∏≠ ``DashScopeMultiModalEmbedding`` ÊîØÊåÅÊñáÊú¨ÔºåÂõæÂÉèÂíåËßÜÈ¢ëÁöÑÂ§öÊ®°ÊÄÅÂµåÂÖ•„ÄÇ
‰ª• DashScope ÂµåÂÖ•Á±ª‰∏∫‰æãÔºåÂèØ‰ª•ÊåâÂ¶Ç‰∏ãÊñπÂºè‰ΩøÁî®Ôºö
"""
import asyncio
import os
import tempfile
from agentscope.embedding import DashScopeTextEmbedding, FileEmbeddingCache
async def example_dashscope_embedding() -> None:
"""DashScope ÊñáÊú¨ÂµåÂÖ•ÁöÑ‰ΩøÁî®Á§∫‰æã„ÄÇ"""
texts = [
"Ê≥ïÂõΩÁöÑÈ¶ñÈÉΩÊòØ‰ªÄ‰πàÔºü",
"Â∑¥ÈªéÊòØÊ≥ïÂõΩÁöÑÈ¶ñÈÉΩÂüéÂ∏Ç„ÄÇ",
]
# ÂàùÂßãÂåñ DashScope ÊñáÊú¨ÂµåÂÖ•ÂÆû‰æã
embedding_model = DashScopeTextEmbedding(
model_name="text-embedding-v2",
api_key=os.getenv("DASHSCOPE_API_KEY"),
)
# ‰ªéÊ®°ÂûãËé∑ÂèñÂµåÂÖ•
response = await embedding_model(texts)
print("ÂµåÂÖ• ID: ", response.id)
print("ÂµåÂÖ•ÂàõÂª∫Êó∂Èó¥: ", response.created_at)
print("ÂµåÂÖ•‰ΩøÁî®ÊÉÖÂÜµ: ", response.usage)
print("ÂµåÂÖ•ÂêëÈáè:")
print(response.embeddings)
asyncio.run(example_dashscope_embedding())
# %%
# ÂèØ‰ª•ÈÄöËøáÁªßÊâø ``EmbeddingModelBase`` Âπ∂ÂÆûÁé∞ ``__call__`` ÊñπÊ≥ïÊù•Ëá™ÂÆö‰πâ embedding Ê®°Âûã„ÄÇ
#
# Embedding ÁºìÂ≠ò
# ---------------------
# AgentScope Êèê‰æõ‰∫ÜÁî®‰∫éÁºìÂ≠ò embedding ÁöÑÂü∫Á±ª ``EmbeddingCacheBase``Ôºå‰ª•ÂèäÂü∫‰∫éÊñá‰ª∂ÁöÑÂÆûÁé∞ ``FileEmbeddingCache``„ÄÇ
# ÂÆÉÂú® embedding Ê®°Âùó‰∏≠ÁöÑÂ∑•‰ΩúÊñπÂºèÂ¶Ç‰∏ãÔºö
#
# .. image:: ../../_static/images/embedding_cache.png
# :align: center
# :width: 90%
#
# Ë¶Å‰ΩøÁî®ÁºìÂ≠òÔºåÂè™ÈúÄÂ∞Ü ``FileEmbeddingCache`` ÂÆû‰æãÔºàÊàñËá™ÂÆö‰πâÁºìÂ≠òÔºâ‰º†ÁªôÊ®°ÂûãÁöÑÊûÑÈÄ†ÂáΩÊï∞ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
async def example_embedding_cache() -> None:
"""ÊºîÁ§∫Â∏¶ÊúâÁºìÂ≠òÂäüËÉΩÁöÑ embedding„ÄÇ"""
# Á§∫‰æãÊñáÊú¨
texts = [
"Ê≥ïÂõΩÁöÑÈ¶ñÈÉΩÊòØ‰ªÄ‰πàÔºü",
"Â∑¥ÈªéÊòØÊ≥ïÂõΩÁöÑÈ¶ñÈÉΩÂüéÂ∏Ç„ÄÇ",
]
# ‰∏∫ÁºìÂ≠òÊºîÁ§∫ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï
# Âú®ÂÆûÈôÖÂ∫îÁî®‰∏≠ÔºåÂª∫ËÆÆ‰ΩøÁî®ÊåÅ‰πÖÁõÆÂΩï‰ª•ÊúÄÂ§ßÂèëÊå•ÁºìÂ≠òÊïàÊûú
cache_dir = tempfile.mkdtemp(prefix="embedding_cache_")
print(f"‰ΩøÁî®ÁºìÂ≠òÁõÆÂΩï: {cache_dir}")
# ‰ΩøÁî®ÁºìÂ≠òÂàùÂßãÂåñÂµåÂÖ•Ê®°Âûã
# ‰∏∫ÊºîÁ§∫ÁõÆÁöÑÔºåÊàë‰ª¨Â∞ÜÁºìÂ≠òÈôêÂà∂‰∏∫ 100 ‰∏™Êñá‰ª∂Âíå 10MB
embedder = DashScopeTextEmbedding(
model_name="text-embedding-v3",
api_key=os.getenv("DASHSCOPE_API_KEY"),
embedding_cache=FileEmbeddingCache(
cache_dir=cache_dir,
max_file_number=100,
max_cache_size=10, # ÊúÄÂ§ßÁºìÂ≠òÂ§ßÂ∞èÔºàMBÔºâ
),
)
# Á¨¨‰∏ÄÊ¨°Ë∞ÉÁî® - Â∞Ü‰ªé API Ëé∑ÂèñÂπ∂Â≠òÂÇ®Âú®ÁºìÂ≠ò‰∏≠
print("\n=== Á¨¨‰∏ÄÊ¨° API Ë∞ÉÁî®ÔºàÊó†ÁºìÂ≠òÂëΩ‰∏≠Ôºâ===")
start_time = asyncio.get_event_loop().time()
response1 = await embedder(texts)
elapsed_time1 = asyncio.get_event_loop().time() - start_time
print(f"Êù•Ê∫ê: {response1.source}") # Â∫îËØ•ÊòØ 'api'
print(f"ËÄóÊó∂: {elapsed_time1:.4f} Áßí")
print(f"‰ΩøÁî®ÁöÑ token: {response1.usage.tokens}")
# ‰ΩøÁî®Áõ∏ÂêåÊñáÊú¨ÁöÑÁ¨¨‰∫åÊ¨°Ë∞ÉÁî® - Â∫îËØ•‰ΩøÁî®ÁºìÂ≠ò
print("\n=== Á¨¨‰∫åÊ¨° API Ë∞ÉÁî®ÔºàÈ¢ÑÊúüÁºìÂ≠òÂëΩ‰∏≠Ôºâ===")
start_time = asyncio.get_event_loop().time()
response2 = await embedder(texts)
elapsed_time2 = asyncio.get_event_loop().time() - start_time
print(f"Êù•Ê∫ê: {response2.source}") # Â∫îËØ•ÊòØ 'cache'
print(f"ËÄóÊó∂: {elapsed_time2:.4f} Áßí")
print(
f"‰ΩøÁî®ÁöÑ token: {response2.usage.tokens}",
) # ÁºìÂ≠òÁªìÊûúÂ∫îËØ•‰∏∫ 0
print(
f"ÈÄüÂ∫¶ÊèêÂçá: ‰ΩøÁî®ÁºìÂ≠òÂø´ {elapsed_time1 / elapsed_time2:.1f} ÂÄç",
)
asyncio.run(example_embedding_cache())
---- task_eval.py ----
# -*- coding: utf-8 -*-
"""
.. _eval:
Êô∫ËÉΩ‰ΩìËØÑÊµã
=========================
AgentScope Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÂÜÖÁΩÆÁöÑËØÑÊµãÊ°ÜÊû∂ÔºåÁî®‰∫éËØÑÊµãÊô∫ËÉΩ‰ΩìÂú®‰∏çÂêå‰ªªÂä°ÂíåÂü∫ÂáÜÊµãËØï‰∏≠ÁöÑÊÄßËÉΩÔºå‰∏ªË¶ÅÁâπÊÄßÂåÖÊã¨Ôºö
- Âü∫‰∫é `Ray <https://github.com/ray-project/ray>`_ ÁöÑÂπ∂Ë°åÂíåÂàÜÂ∏ÉÂºèËØÑ‰º∞
- ÊîØÊåÅ‰∏≠Êñ≠ÂêéÁªßÁª≠ËØÑ‰º∞
- [ÂºÄÂèë‰∏≠] ËØÑ‰º∞ÁªìÊûúÂèØËßÜÂåñ
.. note:: Êàë‰ª¨Ê≠£Âú®ÊåÅÁª≠ÈõÜÊàêÊñ∞ÁöÑÂü∫ÂáÜÊµãËØïÂà∞ AgentScope ‰∏≠Ôºö
- ‚úÖ `ACEBench <https://github.com/ACEBench/ACEBench>`_
- üöß `GAIA <https://huggingface.co/datasets/gaia-benchmark/GAIA/tree/main>`_ Âü∫ÂáÜÊµãËØï
Ê¶ÇËø∞
---------------------------
AgentScope ËØÑ‰º∞Ê°ÜÊû∂Áî±Âá†‰∏™ÂÖ≥ÈîÆÁªÑ‰ª∂ÁªÑÊàêÔºö
- **Âü∫ÂáÜÊµãËØï (Benchmark)**: Áî®‰∫éÁ≥ªÁªüÊÄßËØÑ‰º∞ÁöÑ‰ªªÂä°ÈõÜÂêà
- **‰ªªÂä° (Task)**: ÂåÖÂê´ËæìÂÖ•„ÄÅÊ†áÂáÜÁ≠îÊ°àÂíåÊåáÊ†áÁöÑÁã¨Á´ãËØÑ‰º∞ÂçïÂÖÉ
- **ÊåáÊ†á (Metric)**: ËØÑ‰º∞Ëß£ÂÜ≥ÊñπÊ°àË¥®ÈáèÁöÑÊµãÈáèÂáΩÊï∞
- **ËØÑ‰º∞Âô® (Evaluator)**: ËøêË°åËØÑ‰º∞ÁöÑÂºïÊìéÔºåËÅöÂêàÁªìÊûúÂπ∂ÂàÜÊûêÊÄßËÉΩ
- **ËØÑ‰º∞Âô®Â≠òÂÇ® (Evaluator Storage)**: Áî®‰∫éËÆ∞ÂΩïÂíåÊ£ÄÁ¥¢ËØÑ‰º∞ÁªìÊûúÁöÑÊåÅ‰πÖÂåñÂ≠òÂÇ®
- **Ëß£ÂÜ≥ÊñπÊ°à (Solution)**: Áî®Êà∑ÂÆö‰πâÁöÑËß£ÂÜ≥ÊñπÊ°à
.. figure:: ../../_static/images/evaluation.png
:width: 90%
:alt: AgentScope ËØÑ‰º∞Ê°ÜÊû∂
*AgentScope ËØÑ‰º∞Ê°ÜÊû∂*
AgentScope ÂΩìÂâçÁöÑÂÆûÁé∞ÂåÖÊã¨Ôºö
- ËØÑ‰º∞Âô®Ôºö
- ``RayEvaluator``: Âü∫‰∫é ray ÁöÑËØÑ‰º∞Âô®ÔºåÊîØÊåÅÂπ∂Ë°åÂíåÂàÜÂ∏ÉÂºèËØÑ‰º∞„ÄÇ
- ``GeneralEvaluator``: ÈÄöÁî®ËØÑ‰º∞Âô®ÔºåÊåâÈ°∫Â∫èËøêË°å‰ªªÂä°Ôºå‰æø‰∫éË∞ÉËØï„ÄÇ
- Âü∫ÂáÜÊµãËØïÔºö
- ``ACEBench``: Áî®‰∫éËØÑ‰º∞Êô∫ËÉΩ‰ΩìËÉΩÂäõÁöÑÂü∫ÂáÜÊµãËØï„ÄÇ
Êàë‰ª¨Âú® `GitHub ‰ªìÂ∫ì <https://github.com/agentscope-ai/agentscope/tree/main/examples/evaluation/ace_bench>`_ ‰∏≠Êèê‰æõ‰∫Ü‰∏Ä‰∏™‰ΩøÁî® ``RayEvaluator`` Âíå ACEBench ‰∏≠Êô∫ËÉΩ‰ΩìÂ§öÊ≠•È™§‰ªªÂä°ÁöÑÁé©ÂÖ∑Á§∫‰æã„ÄÇ
Ê†∏ÂøÉÁªÑ‰ª∂
---------------
Êàë‰ª¨Â∞ÜÊûÑÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÁé©Â≠¶ÈóÆÈ¢òÂü∫ÂáÜÊµãËØïÊù•ÊºîÁ§∫Â¶Ç‰Ωï‰ΩøÁî® AgentScope ËØÑ‰º∞Ê®°Âùó„ÄÇ
"""
TOY_BENCHMARK = [
{
"id": "math_problem_1",
"question": "What is 2 + 2?",
"ground_truth": 4.0,
"tags": {
"difficulty": "easy",
"category": "math",
},
},
{
"id": "math_problem_2",
"question": "What is 12345 + 54321 + 6789 + 9876?",
"ground_truth": 83331,
"tags": {
"difficulty": "medium",
"category": "math",
},
},
]
# %%
# ‰ªé‰ªªÂä°„ÄÅËß£ÂÜ≥ÊñπÊ°àÂíåÊåáÊ†áÂà∞Âü∫ÂáÜÊµãËØï
# ~~~~~~~~~~~~~~~~~~~
#
# - ‰∏Ä‰∏™ ``SolutionOutput`` (AgentËß£ÂÜ≥ÊñπÊ°àËæìÂá∫) ÂåÖÂê´Êô∫ËÉΩ‰ΩìÁîüÊàêÁöÑÊâÄÊúâ‰ø°ÊÅØÔºåÂåÖÊã¨ËΩ®ËøπÂíåÊúÄÁªàËæìÂá∫„ÄÇ
# - ‰∏Ä‰∏™ ``Metric`` (ËØÑÊµãÊåáÊ†á) ‰ª£Ë°®‰∏Ä‰∏™Âçï‰∏ÄÁöÑËØÑ‰º∞ÂèØË∞ÉÁî®ÂÆû‰æãÔºåÂÆÉÂ∞ÜÁîüÊàêÁöÑËß£ÂÜ≥ÊñπÊ°àÔºà‰æãÂ¶ÇÔºåËΩ®ËøπÊàñÊúÄÁªàËæìÂá∫Ôºâ‰∏éÊ†áÂáÜÁ≠îÊ°àËøõË°åÊØîËæÉ„ÄÇ
# Âú®Ëøô‰∏™Á§∫‰æã‰∏≠ÔºåÊàë‰ª¨ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™ÊåáÊ†áÔºåÁÆÄÂçïÂú∞Ê£ÄÊü•Ëß£ÂÜ≥ÊñπÊ°à‰∏≠ÁöÑ ``output`` Â≠óÊÆµÊòØÂê¶‰∏éÊ†áÂáÜÁ≠îÊ°àÂåπÈÖç„ÄÇ
from agentscope.evaluate import (
SolutionOutput,
MetricBase,
MetricResult,
MetricType,
)
class CheckEqual(MetricBase):
def __init__(
self,
ground_truth: float,
):
super().__init__(
name="math check number equal",
metric_type=MetricType.NUMERICAL,
description="Toy metric checking if two numbers are equal",
categories=[],
)
self.ground_truth = ground_truth
async def __call__(
self,
solution: SolutionOutput,
) -> MetricResult:
if solution.output == self.ground_truth:
return MetricResult(
name=self.name,
result=1.0,
message="Correct",
)
else:
return MetricResult(
name=self.name,
result=0.0,
message="Incorrect",
)
# %%
# - ‰∏Ä‰∏™ ``Task`` (‰ªªÂä°) ÊòØÂü∫ÂáÜÊµãËØï‰∏≠ÁöÑ‰∏Ä‰∏™ÂçïÂÖÉÔºåÂåÖÂê´Êô∫ËÉΩ‰ΩìÊâßË°åÂíåËØÑ‰º∞ÊâÄÈúÄÁöÑÊâÄÊúâ‰ø°ÊÅØÔºà‰æãÂ¶ÇÔºåËæìÂÖ•/Êü•ËØ¢ÂèäÂÖ∂Ê†áÂáÜÁ≠îÊ°àÔºâ„ÄÇ
# - ‰∏Ä‰∏™ ``Benchmark`` (Âü∫ÂáÜÊµãËØï) ÁªÑÁªáÂ§ö‰∏™‰ªªÂä°ËøõË°åÁ≥ªÁªüÊÄßËØÑ‰º∞„ÄÇ
from typing import Generator
from agentscope.evaluate import (
Task,
BenchmarkBase,
)
class ToyBenchmark(BenchmarkBase):
def __init__(self):
super().__init__(
name="Toy bench",
description="A toy benchmark for demonstrating the evaluation module.",
)
self.dataset = self._load_data()
@staticmethod
def _load_data() -> list[Task]:
dataset = []
for item in TOY_BENCHMARK:
dataset.append(
Task(
id=item["id"],
input=item["question"],
ground_truth=item["ground_truth"],
tags=item.get("tags", {}),
metrics=[
CheckEqual(item["ground_truth"]),
],
metadata={},
),
)
return dataset
def __iter__(self) -> Generator[Task, None, None]:
"""ÈÅçÂéÜÂü∫ÂáÜÊµãËØï„ÄÇ"""
for task in self.dataset:
yield task
def __getitem__(self, index: int) -> Task:
"""Ê†πÊçÆÁ¥¢ÂºïËé∑Âèñ‰ªªÂä°„ÄÇ"""
return self.dataset[index]
def __len__(self) -> int:
"""Ëé∑ÂèñÂü∫ÂáÜÊµãËØïÁöÑÈïøÂ∫¶„ÄÇ"""
return len(self.dataset)
# %%
# ËØÑ‰º∞Âô®
# ~~~~~~~~~~
#
# ËØÑ‰º∞Âô® (Evaluators) ÁÆ°ÁêÜËØÑ‰º∞ËøáÁ®ã„ÄÇÂÆÉ‰ª¨ÂèØ‰ª•Ëá™Âä®ÈÅçÂéÜ
# Âü∫ÂáÜÊµãËØï‰∏≠ÁöÑ‰ªªÂä°ÔºåÂπ∂Â∞ÜÊØè‰∏™‰ªªÂä°ËæìÂÖ•Âà∞Ëß£ÂÜ≥ÊñπÊ°àÁîüÊàêÂáΩÊï∞‰∏≠Ôºå
# ÂºÄÂèëËÄÖÈúÄË¶ÅÂú®ÂÖ∂‰∏≠ÂÆö‰πâËøêË°åÊô∫ËÉΩ‰ΩìÂíåÊ£ÄÁ¥¢
# ÊâßË°åÁªìÊûúÂíåËΩ®ËøπÁöÑÈÄªËæë„ÄÇ‰∏ãÈù¢ÊòØ‰∏Ä‰∏™
# ‰ΩøÁî®Êàë‰ª¨ÁöÑÁé©ÂÖ∑Âü∫ÂáÜÊµãËØïËøêË°å ``GeneralEvaluator`` (ÈÄöÁî®ËØÑ‰º∞Âô®) ÁöÑÁ§∫‰æã„ÄÇÂ¶ÇÊûúÊúâ‰∏Ä‰∏™Â§ßÂûã
# Âü∫ÂáÜÊµãËØïÔºåÂºÄÂèëËÄÖÂ∏åÊúõÈÄöËøáÂπ∂Ë°åÂåñÊõ¥È´òÊïàÂú∞ËøõË°åËØÑ‰º∞Ôºå
# ``RayEvaluator`` (RayËØÑ‰º∞Âô®) ‰πüÂèØ‰Ωú‰∏∫ÂÜÖÁΩÆËß£ÂÜ≥ÊñπÊ°à‰ΩøÁî®„ÄÇ
import os
import asyncio
from typing import Callable
from pydantic import BaseModel
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.formatter import DashScopeChatFormatter
from agentscope.agent import ReActAgent
from agentscope.evaluate import (
GeneralEvaluator,
FileEvaluatorStorage,
)
class ToyBenchAnswerFormat(BaseModel):
answer_as_number: float
async def toy_solution_generation(
task: Task,
pre_hook: Callable,
) -> SolutionOutput:
agent = ReActAgent(
name="Friday",
sys_prompt="You are a helpful assistant named Friday. "
"Your target is to solve the given task with your tools. "
"Try to solve the task as best as you can.",
model=DashScopeChatModel(
api_key=os.environ.get("DASHSCOPE_API_KEY"),
model_name="qwen-max",
stream=False,
),
formatter=DashScopeChatFormatter(),
)
agent.register_instance_hook(
"pre_print",
"save_logging",
pre_hook,
)
msg_input = Msg("user", task.input, role="user")
res = await agent(
msg_input,
structured_model=ToyBenchAnswerFormat,
)
return SolutionOutput(
success=True,
output=res.metadata.get("answer_as_number", None),
trajectory=[],
)
async def main() -> None:
evaluator = GeneralEvaluator(
name="Toy benchmark evaluation",
benchmark=ToyBenchmark(),
# ÈáçÂ§çÂ§öÂ∞ëÊ¨°
n_repeat=1,
storage=FileEvaluatorStorage(
save_dir="./results",
),
# ‰ΩøÁî®Â§öÂ∞ë‰∏™Â∑•‰ΩúËøõÁ®ã
n_workers=1,
)
# ËøêË°åËØÑ‰º∞
await evaluator.run(toy_solution_generation)
asyncio.run(main())
---- task_hook.py ----
# -*- coding: utf-8 -*-
"""
.. _hook:
Êô∫ËÉΩ‰ΩìÈí©Â≠êÂáΩÊï∞
===========================
Èí©Â≠êÔºàHookÔºâÊòØ AgentScope ‰∏≠ÁöÑÊâ©Â±ïÁÇπÔºåÂÖÅËÆ∏ÂºÄÂèëËÄÖÂú®ÁâπÂÆö‰ΩçÁΩÆËá™ÂÆö‰πâÊô∫ËÉΩ‰ΩìË°å‰∏∫ÔºåÊèê‰æõ‰∫Ü‰∏ÄÁßçÁÅµÊ¥ªÁöÑÊñπÂºèÊù•‰øÆÊîπÊàñÊâ©Â±ïÊô∫ËÉΩ‰ΩìÁöÑÂäüËÉΩÔºåËÄåÊó†ÈúÄÊõ¥ÊîπÂÖ∂Ê†∏ÂøÉÂÆûÁé∞„ÄÇ
Âú® AgentScope ‰∏≠ÔºåÈí©Â≠êÂõ¥ÁªïÊô∫ËÉΩ‰ΩìÁöÑÊ†∏ÂøÉÂáΩÊï∞ÂÆûÁé∞Ôºö
.. list-table:: AgentScope ‰∏≠ÊîØÊåÅÁöÑÈí©Â≠êÁ±ªÂûã
:header-rows: 1
* - Êô∫ËÉΩ‰ΩìÁ±ª
- Ê†∏ÂøÉÂáΩÊï∞
- Èí©Â≠êÁ±ªÂûã
- ÊèèËø∞
* - | ``AgentBase`` ÂèäÂÖ∂Â≠êÁ±ª
- ``reply``
- | ``pre_reply``
| ``post_reply``
- Êô∫ËÉΩ‰ΩìÂõûÂ§çÊ∂àÊÅØÂâç/ÂêéÁöÑÈí©Â≠ê
* -
- ``print``
- | ``pre_print``
| ``post_print``
- ÂêëÁõÆÊ†áËæìÂá∫ÔºàÂ¶ÇÁªàÁ´Ø„ÄÅWeb ÁïåÈù¢ÔºâÊâìÂç∞Ê∂àÊÅØÂâç/ÂêéÁöÑÈí©Â≠ê
* -
- ``observe``
- | ``pre_observe``
| ``post_observe``
- ‰ªéÁéØÂ¢ÉÊàñÂÖ∂ÂÆÉÊô∫ËÉΩ‰ΩìËßÇÂØüÊ∂àÊÅØÂâç/ÂêéÁöÑÈí©Â≠ê
* - | ``ReActAgentBase`` ÂèäÂÖ∂Â≠êÁ±ª
- | ``reply``
| ``print``
| ``observe``
- | ``pre_reply``
| ``post_reply``
| ``pre_print``
| ``post_print``
| ``pre_observe``
| ``post_observe``
-
* -
- ``_reasoning``
- | ``pre_reasoning``
| ``post_reasoning``
- Êô∫ËÉΩ‰ΩìÊé®ÁêÜËøáÁ®ãÂâç/ÂêéÁöÑÈí©Â≠ê
* -
- ``_acting``
- | ``pre_acting``
| ``post_acting``
- Êô∫ËÉΩ‰ΩìË°åÂä®ËøáÁ®ãÂâç/ÂêéÁöÑÈí©Â≠ê
.. tip:: Áî±‰∫é AgentScope ‰∏≠ÁöÑÈí©Â≠êÂáΩÊï∞ÊòØÈÄöËøá meta class ÂÆûÁé∞ÁöÑÔºåÂõ†Ê≠§ÊîØÊåÅÁªßÊâø„ÄÇ
‰∏∫‰∫ÜÁÆÄÂåñ‰ΩøÁî®ÔºåAgentScope ‰∏∫ÊâÄÊúâÈí©Â≠êÊèê‰æõ‰∫ÜÁªü‰∏ÄÁöÑÁ≠æÂêç„ÄÇ
"""
import asyncio
from typing import Any, Type
from agentscope.agent import ReActAgentBase, AgentBase
from agentscope.message import Msg
# %%
# Èí©Â≠êÁ≠æÂêç
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# AgentScope ‰∏∫ÊâÄÊúâÂâçÁΩÆÔºàpre_ÔºâÂíåÂêéÁΩÆÔºàpost_ÔºâÈí©Â≠êÊèê‰æõÁªü‰∏ÄÁöÑÈí©Â≠êÁ≠æÂêçÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
# **ÂâçÁΩÆÈí©Â≠êÁ≠æÂêç**
#
# .. list-table:: ÊâÄÊúâÂâçÁΩÆÈí©Â≠êÁöÑÁ≠æÂêç
# :header-rows: 1
#
# * -
# - ÂêçÁß∞
# - ÊèèËø∞
# * - ÂèÇÊï∞
# - ``self: AgentBase | ReActAgentBase``
# - Êô∫ËÉΩ‰ΩìÂÆû‰æã
# * -
# - ``kwargs: dict[str, Any]``
# - | ÁõÆÊ†áÂáΩÊï∞ÁöÑËæìÂÖ•ÂèÇÊï∞ÔºåÊàñÊù•Ëá™ÊúÄËøë
# | ‰∏Ä‰∏™Èùû None ËøîÂõûÂÄºÁöÑÈí©Â≠ê‰øÆ
# | ÊîπÂêéÁöÑÂèÇÊï∞
# * - ËøîÂõûÂÄº
# - ``dict[str, Any] | None``
# - ‰øÆÊîπÂêéÁöÑÂèÇÊï∞Êàñ None
#
# .. note:: Ê†∏ÂøÉÂáΩÊï∞ÁöÑÊâÄÊúâ‰ΩçÁΩÆÂèÇÊï∞Ôºà*argsÔºâÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ôºà**kwargsÔºâË¢´Áªü‰∏ÄÊàêÂçï‰∏™ ``kwargs`` Â≠óÂÖ∏‰º†ÈÄíÁªôÈí©Â≠êÂáΩÊï∞
#
# ÂâçÁΩÆÈí©Â≠êÊ®°ÊùøÂÆö‰πâÂ¶Ç‰∏ãÔºö
#
def pre_hook_template(
self: AgentBase | ReActAgentBase,
kwargs: dict[str, Any],
) -> dict[str, Any] | None: # ‰øÆÊîπÂêéÁöÑËæìÂÖ•
"""ÂâçÁΩÆÈí©Â≠êÊ®°Êùø„ÄÇ"""
pass
# %%
# **ÂêéÁΩÆÈí©Â≠êÁ≠æÂêç**
#
# ÂØπ‰∫éÂêéÁΩÆÈí©Â≠êÔºåÂú®Á≠æÂêç‰∏≠Â¢ûÂä†‰∫Ü‰∏Ä‰∏™È¢ùÂ§ñÁöÑ ``output`` ÂèÇÊï∞ÔºåË°®Á§∫ÁõÆÊ†áÂáΩÊï∞ÁöÑËæìÂá∫„ÄÇ
# Â¶ÇÊûúÊ†∏ÂøÉÂáΩÊï∞Ê≤°ÊúâËæìÂá∫Ôºå``output`` ÂèÇÊï∞Â∞Ü‰∏∫ ``None``„ÄÇ
#
# .. list-table:: ÊâÄÊúâÂêéÁΩÆÈí©Â≠êÁöÑÁ≠æÂêç
# :header-rows: 1
#
# * -
# - ÂêçÁß∞
# - ÊèèËø∞
# * - ÂèÇÊï∞
# - ``self: AgentBase | ReActAgentBase``
# - Êô∫ËÉΩ‰ΩìÂÆû‰æã
# * -
# - ``kwargs: dict[str, Any]``
# - | ÂåÖÂê´ÁõÆÊ†áÂáΩÊï∞ÊâÄÊúâÂèÇÊï∞ÁöÑÂ≠óÂÖ∏
# * -
# - ``output: Any``
# - | ÁõÆÊ†áÂáΩÊï∞ÁöÑËæìÂá∫ÊàñÊù•Ëá™ÂâçÂ∫èÈí©Â≠ê
# | ÊúÄËøë‰∏Ä‰∏™Èùû None ËøîÂõûÂÄº
# * - ËøîÂõûÂÄº
# - ``dict[str, Any] | None``
# - ‰øÆÊîπÂêéÁöÑËæìÂá∫Êàñ None
#
def post_hook_template(
self: AgentBase | ReActAgentBase,
kwargs: dict[str, Any],
output: Any, # ÁõÆÊ†áÂáΩÊï∞ÁöÑËæìÂá∫
) -> Any: # ‰øÆÊîπÂêéÁöÑËæìÂá∫
"""ÂêéÁΩÆÈí©Â≠êÊ®°Êùø„ÄÇ"""
pass
# %%
# Èí©Â≠êÁÆ°ÁêÜ
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# AgentScope Êèê‰æõÂÆû‰æãÁ∫ßÔºàinstanceÔºâÂíåÁ±ªÁ∫ßÔºàclassÔºâÈí©Â≠êÔºåÂÖ∂Âå∫Âà´Âú®‰∫éÈí©Â≠êÂáΩÊï∞ÁöÑ‰ΩúÁî®ËåÉÂõ¥„ÄÇ
# ÂÆÉ‰ª¨Êåâ‰ª•‰∏ãÈ°∫Â∫èÊâßË°åÔºö
#
# .. image:: ../../_static/images/sequential_hook.png
# :width: 90%
# :align: center
# :alt: AgentScope ‰∏≠ÁöÑÈí©Â≠ê
# :class: bordered-image
#
# AgentScope Êèê‰æõÂÜÖÁΩÆÊñπÊ≥ïÊù•ÁÆ°ÁêÜÂÆû‰æãÁ∫ßÂíåÁ±ªÁ∫ßÁöÑÈí©Â≠êÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
# .. list-table:: AgentScope ‰∏≠ÁöÑÈí©Â≠êÁÆ°ÁêÜÊñπÊ≥ï
# :header-rows: 1
#
# * - Á∫ßÂà´
# - ÊñπÊ≥ï
# - ÊèèËø∞
# * - ÂÆû‰æãÁ∫ß
# - ``register_instance_hook``
# - | ‰∏∫ÂΩìÂâçÂØπË±°Ê≥®ÂÜåÂÖ∑ÊúâÁªôÂÆöÈí©Â≠êÁ±ªÂûã
# | ÂíåÂêçÁß∞ÁöÑÈí©Â≠ê„ÄÇ
# * -
# - ``remove_instance_hook``
# - | ÁßªÈô§ÂΩìÂâçÂØπË±°ÂÖ∑ÊúâÁªôÂÆöÈí©Â≠êÁ±ªÂûã
# | ÂíåÂêçÁß∞ÁöÑÈí©Â≠ê„ÄÇ
# * -
# - ``clear_instance_hooks``
# - | Ê∏ÖÈô§ÂΩìÂâçÂØπË±°ÂÖ∑ÊúâÁªôÂÆöÈí©Â≠êÁ±ªÂûã
# | ÁöÑÊâÄÊúâÈí©Â≠ê„ÄÇ
# * - Á±ªÁ∫ß
# - ``register_class_hook``
# - | ‰∏∫ËØ•Á±ªÁöÑÊâÄÊúâÂØπË±°Ê≥®ÂÜåÂÖ∑ÊúâÁªôÂÆö
# | Èí©Â≠êÁ±ªÂûãÂíåÂêçÁß∞ÁöÑÈí©Â≠ê„ÄÇ
# * -
# - ``remove_class_hook``
# - | ÁßªÈô§ËØ•Á±ªÊâÄÊúâÂØπË±°ÂÖ∑ÊúâÁªôÂÆö
# | Èí©Â≠êÁ±ªÂûãÂíåÂêçÁß∞ÁöÑÈí©Â≠ê„ÄÇ
# * -
# - ``clear_class_hooks``
# - | Ê∏ÖÈô§ËØ•Á±ªÊâÄÊúâÂØπË±°ÂÖ∑ÊúâÁªôÂÆö
# | Èí©Â≠êÁ±ªÂûãÁöÑÊâÄÊúâÈí©Â≠ê„ÄÇ
#
# ‰ΩøÁî®Èí©Â≠êÊó∂ÔºåÂºÄÂèëËÄÖÈúÄË¶ÅÊ≥®ÊÑè‰ª•‰∏ãËßÑÂàôÔºö
#
# .. important:: **ÊâßË°åÈ°∫Â∫è**
#
# - Èí©Â≠êÊåâÊ≥®ÂÜåÈ°∫Â∫èÊâßË°å
# - Â§ö‰∏™Èí©Â≠êÂèØ‰ª•ÈìæÂºèËøûÊé•
# **ËøîÂõûÂÄºÂ§ÑÁêÜ**
#
# - ÂØπ‰∫éÂâçÁΩÆÈí©Â≠êÔºöÈùû None ËøîÂõûÂÄº‰ºö‰º†ÈÄíÁªô‰∏ã‰∏Ä‰∏™Èí©Â≠êÊàñÊ†∏ÂøÉÂáΩÊï∞
# - ÂΩìÈí©Â≠êËøîÂõû None Êó∂Ôºå‰∏ã‰∏Ä‰∏™Èí©Â≠êÂ∞Ü‰ΩøÁî®ÂâçÂ∫èÈí©Â≠ê‰∏≠ÊúÄËøëÁöÑÈùû None ËøîÂõûÂÄº
# - Â¶ÇÊûúÊâÄÊúâÂâçÂ∫èÈí©Â≠êÈÉΩËøîÂõû NoneÔºåÈÇ£ËØ•Èí©Â≠êÊé•Êî∂ÂéüÂßãÂèÇÊï∞ÁöÑÂâØÊú¨‰Ωú‰∏∫ËæìÂÖ•
# - ÊúÄÂêé‰∏Ä‰∏™Èùû None ËøîÂõûÂÄºÔºàÊàñÂ¶ÇÊûúÊâÄÊúâÈí©Â≠êÈÉΩËøîÂõû None Âàô‰ΩøÁî®ÂéüÂßãÂèÇÊï∞Ôºâ‰º†ÈÄíÁªôÊ†∏ÂøÉÂáΩÊï∞
# - ÂØπ‰∫éÂêéÁΩÆÈí©Â≠êÔºöÂ∑•‰ΩúÊñπÂºè‰∏éÂâçÁΩÆÈí©Â≠êÁõ∏‰ºº„ÄÇ
# **ÈáçË¶ÅÊèêÁ§∫**Ôºö‰∏çË¶ÅÂú®Èí©Â≠êÂÜÖË∞ÉÁî®Ê†∏ÂøÉÂáΩÊï∞Ôºàreply/speak/observe/_reasoning/_actingÔºâ‰ª•ÈÅøÂÖçÂæ™ÁéØË∞ÉÁî®ÔºÅ
#
# ‰ª•‰∏ãÈù¢ÁöÑÊô∫ËÉΩ‰Ωì‰∏∫‰æãÔºåÊàë‰ª¨ÂèØ‰ª•ÁúãÂà∞Â¶Ç‰ΩïÊ≥®ÂÜå„ÄÅÁßªÈô§ÂíåÊ∏ÖÈô§Èí©Â≠êÔºö
#
# ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊµãËØïÊô∫ËÉΩ‰ΩìÁ±ª
class TestAgent(AgentBase):
"""Áî®‰∫éÊºîÁ§∫Èí©Â≠êÁöÑÊµãËØïÊô∫ËÉΩ‰Ωì„ÄÇ"""
async def reply(self, msg: Msg) -> Msg:
"""ÂõûÂ§çÊ∂àÊÅØ„ÄÇ"""
return msg
# %%
# Êàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™ÂÆû‰æãÁ∫ßÈí©Â≠êÂíå‰∏Ä‰∏™Á±ªÁ∫ßÈí©Â≠êÊù•Âú®ÂõûÂ§çÂâç‰øÆÊîπÊ∂àÊÅØÂÜÖÂÆπ„ÄÇ
#
# ÂàõÂª∫‰∏§‰∏™ÂâçÁΩÆÂõûÂ§çÈí©Â≠ê
def instance_pre_reply_hook(
self: AgentBase,
kwargs: dict[str, Any],
) -> dict[str, Any]:
"""‰øÆÊîπÊ∂àÊÅØÂÜÖÂÆπÁöÑÂâçÁΩÆÂõûÂ§çÈí©Â≠ê„ÄÇ"""
msg = kwargs["msg"]
msg.content += "[instance-pre-reply]"
# ËøîÂõû‰øÆÊîπÂêéÁöÑ kwargs
return {
**kwargs,
"msg": msg,
}
def cls_pre_reply_hook(
self: AgentBase,
kwargs: dict[str, Any],
) -> dict[str, Any]:
"""‰øÆÊîπÊ∂àÊÅØÂÜÖÂÆπÁöÑÂâçÁΩÆÂõûÂ§çÈí©Â≠ê„ÄÇ"""
msg = kwargs["msg"]
msg.content += "[cls-pre-reply]"
# ËøîÂõû‰øÆÊîπÂêéÁöÑ kwargs
return {
**kwargs,
"msg": msg,
}
# Ê≥®ÂÜåÁ±ªÈí©Â≠ê
TestAgent.register_class_hook(
hook_type="pre_reply",
hook_name="test_pre_reply",
hook=cls_pre_reply_hook,
)
# Ê≥®ÂÜåÂÆû‰æãÈí©Â≠ê
agent = TestAgent()
agent.register_instance_hook(
hook_type="pre_reply",
hook_name="test_pre_reply",
hook=instance_pre_reply_hook,
)
async def example_test_hook() -> None:
"""ÊµãËØïÈí©Â≠êÁöÑÁ§∫‰æãÂáΩÊï∞„ÄÇ"""
msg = Msg(
name="user",
content="Hello, world!",
role="user",
)
res = await agent(msg)
print("ÂìçÂ∫îÂÜÖÂÆπÔºö", res.content)
TestAgent.clear_class_hooks()
asyncio.run(example_test_hook())
# %%
# Êàë‰ª¨ÂèØ‰ª•ÁúãÂà∞ "[instance-pre-reply]" Âíå "[cls-pre-reply]" Ë¢´Ê∑ªÂä†Âà∞‰∫ÜÊ∂àÊÅØÂÜÖÂÆπ‰∏≠„ÄÇ
#
---- task_long_term_memory.py ----
# -*- coding: utf-8 -*-
"""
.. _long-term-memory:
ÈïøÊúüËÆ∞ÂøÜ
========================
AgentScope ‰∏∫ÈïøÊúüËÆ∞ÂøÜÊèê‰æõ‰∫Ü‰∏Ä‰∏™Âü∫Á±ª ``LongTermMemoryBase`` Âíå‰∏Ä‰∏™Âü∫‰∫é `mem0 <https://github.com/mem0ai/mem0>`_ ÁöÑÂÖ∑‰ΩìÂÆûÁé∞ ``Mem0LongTermMemory``„ÄÇ
ÁªìÂêà :ref:`agent` Á´†ËäÇ‰∏≠ ``ReActAgent`` Á±ªÁöÑËÆæËÆ°ÔºåÊàë‰ª¨Êèê‰æõ‰∫Ü‰∏§ÁßçÈïøÊúüËÆ∞ÂøÜÊ®°ÂºèÔºö
- ``agent_control``ÔºöÊô∫ËÉΩ‰ΩìÈÄöËøáÂ∑•ÂÖ∑Ë∞ÉÁî®Ëá™‰∏ªÁÆ°ÁêÜÈïøÊúüËÆ∞ÂøÜ„ÄÇ
- ``static_control``ÔºöÂºÄÂèëËÄÖÈÄöËøáÁºñÁ®ãÊòæÂºèÊéßÂà∂ÈïøÊúüËÆ∞ÂøÜÊìç‰Ωú„ÄÇ
ÂΩìÁÑ∂ÔºåÂºÄÂèëËÄÖ‰πüÂèØ‰ª•‰ΩøÁî® ``both`` ÂèÇÊï∞ÔºåÂ∞ÜÂêåÊó∂ÊøÄÊ¥ª‰∏äËø∞‰∏§ÁßçËÆ∞ÂøÜÁÆ°ÁêÜÊ®°Âºè„ÄÇ
.. hint:: ‰∏çÂêåÁöÑËÆ∞ÂøÜÊ®°ÂºèÈÄÇÁî®‰∫é‰∏çÂêåÁöÑ‰ΩøÁî®Âú∫ÊôØÔºåÂºÄÂèëËÄÖÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÈÄâÊã©ÂêàÈÄÇÁöÑÊ®°Âºè„ÄÇ
‰ΩøÁî® mem0 ÈïøÊúüËÆ∞ÂøÜ
~~~~~~~~~~~~~~~~~~~~~~~~
.. note:: Âú® GitHub ‰ªìÂ∫ìÁöÑ ``examples/long_term_memory/mem0`` ÁõÆÂΩï‰∏ãÊàë‰ª¨Êèê‰æõ‰∫Ü mem0 ÈïøÊúüËÆ∞ÂøÜÁöÑ‰ΩøÁî®Á§∫‰æã„ÄÇ
"""
import os
import asyncio
from agentscope.message import Msg
from agentscope.memory import InMemoryMemory, Mem0LongTermMemory
from agentscope.agent import ReActAgent
from agentscope.embedding import DashScopeTextEmbedding
from agentscope.formatter import DashScopeChatFormatter
from agentscope.model import DashScopeChatModel
from agentscope.tool import Toolkit
# ÂàõÂª∫ mem0 ÈïøÊúüËÆ∞ÂøÜÂÆû‰æã
long_term_memory = Mem0LongTermMemory(
agent_name="Friday",
user_name="user_123",
model=DashScopeChatModel(
model_name="qwen-max-latest",
api_key=os.environ.get("DASHSCOPE_API_KEY"),
stream=False,
),
embedding_model=DashScopeTextEmbedding(
model_name="text-embedding-v2",
api_key=os.environ.get("DASHSCOPE_API_KEY"),
),
on_disk=False,
)
# %%
# ``Mem0LongTermMemory`` Á±ªÊèê‰æõ‰∫Ü‰∏§‰∏™Êìç‰ΩúÈïøÊúüËÆ∞ÂøÜÁöÑÊñπÊ≥ïÔºå``record` Âíå `retrieve`„ÄÇ
# ÂÆÉ‰ª¨Êé•Êî∂Ê∂àÊÅØÂØπË±°ÁöÑÂàóË°®‰Ωú‰∏∫ËæìÂÖ•ÔºåÂàÜÂà´ËÆ∞ÂΩïÂíåÊ£ÄÁ¥¢ÈïøÊúüËÆ∞ÂøÜ‰∏≠ÁöÑ‰ø°ÊÅØ„ÄÇ
#
# ‰æãÂ¶Ç‰∏ãÈù¢ÁöÑ‰æãÂ≠ê‰∏≠ÔºåÊàë‰ª¨ÂÖàÂ≠òÂÖ•Áî®Êà∑ÁöÑ‰∏ÄÊù°ÂÅèÂ•ΩÔºåÁÑ∂ÂêéÂú®ÈïøÊúüËÆ∞ÂøÜ‰∏≠Ê£ÄÁ¥¢Áõ∏ÂÖ≥‰ø°ÊÅØ„ÄÇ
#
# Âü∫Êú¨‰ΩøÁî®Á§∫‰æã
async def basic_usage():
"""Âü∫Êú¨‰ΩøÁî®Á§∫‰æã"""
# ËÆ∞ÂΩïËÆ∞ÂøÜ
await long_term_memory.record([Msg("user", "ÊàëÂñúÊ¨¢‰ΩèÊ∞ëÂÆø", "user")])
# Ê£ÄÁ¥¢ËÆ∞ÂøÜ
results = await long_term_memory.retrieve(
[Msg("user", "ÊàëÁöÑ‰ΩèÂÆøÂÅèÂ•Ω", "user")],
)
print(f"Ê£ÄÁ¥¢ÁªìÊûú: {results}")
asyncio.run(basic_usage())
# %%
# ‰∏é ReAct Êô∫ËÉΩ‰ΩìÈõÜÊàê
# ----------------------------------------
# AgentScope ‰∏≠ÁöÑ ``ReActAgent`` Âú®ÊûÑÈÄ†ÂáΩÊï∞‰∏≠ÂåÖÂê´ ``long_term_memory`` Âíå ``long_term_memory_mode`` ‰∏§‰∏™ÂèÇÊï∞Ôºå
# ÂÖ∂‰∏≠ ``long_term_memory`` Áî®‰∫éÊåáÂÆöÈïøÊúüËÆ∞ÂøÜÂÆû‰æãÔºå``long_term_memory_mode`` ÁöÑÂèñÂÄº‰∏∫ ``"agent_control"``, ``"static_control"`` Êàñ ``"both"``„ÄÇ
#
# ÂΩì ``long_term_memory_mode`` ËÆæÁΩÆ‰∏∫ ``"agent_control"`` Êàñ ``both`` Êó∂ÔºåÂú® ``ReActAgent`` ÁöÑÊûÑÈÄ†ÂáΩÊï∞‰∏≠Â∞Ü
# Ê≥®ÂÜå‰∏§‰∏™Â∑•ÂÖ∑ÂáΩÊï∞Ôºö``record_to_memory`` Âíå ``retrieve_from_memory``„ÄÇ
# ‰ªéËÄå‰ΩøÊô∫ËÉΩ‰ΩìËÉΩÂ§üËá™‰∏ªÁöÑÁÆ°ÁêÜÈïøÊúüËÆ∞ÂøÜ„ÄÇ
#
# .. note:: ‰∏∫‰∫ÜËææÂà∞ÊúÄÂ•ΩÁöÑÊïàÊûúÔºå``"agent_control"`` Ê®°ÂºèÂèØËÉΩËøòÈúÄË¶ÅÂú®Á≥ªÁªüÊèêÁ§∫Ôºàsystem promptÔºâ‰∏≠Ê∑ªÂä†Áõ∏Â∫îÁöÑËØ¥Êòé„ÄÇ
#
# ÂàõÂª∫Â∏¶ÊúâÈïøÊúüËÆ∞ÂøÜÁöÑ ReAct Êô∫ËÉΩ‰Ωì
agent = ReActAgent(
name="Friday",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™ÂÖ∑ÊúâÈïøÊúüËÆ∞ÂøÜÂäüËÉΩÁöÑÂä©Êâã„ÄÇ",
model=DashScopeChatModel(
api_key=os.environ.get("DASHSCOPE_API_KEY"),
model_name="qwen-max-latest",
),
formatter=DashScopeChatFormatter(),
toolkit=Toolkit(),
memory=InMemoryMemory(),
long_term_memory=long_term_memory,
long_term_memory_mode="static_control", # ‰ΩøÁî® static_control Ê®°Âºè
)
async def record_preferences():
"""ReAct agent integration example"""
# ÂØπËØùÁ§∫‰æã
msg = Msg("user", "ÊàëÂéªÊù≠Â∑ûÊóÖË°åÊó∂ÔºåÂñúÊ¨¢‰ΩèÊ∞ëÂÆø", "user")
await agent(msg)
asyncio.run(record_preferences())
# %%
# ÁÑ∂ÂêéÊàë‰ª¨Ê∏ÖÁ©∫Êô∫ËÉΩ‰ΩìÁöÑÁü≠ÊúüËÆ∞ÂøÜÔºå‰ª•ÈÅøÂÖçÈÄ†ÊàêÂπ≤Êâ∞ÔºåÂπ∂ÊµãËØïÊô∫ËÉΩ‰ΩìÊòØÂê¶‰ºöËÆ∞‰Ωè‰πãÂâçÁöÑÂØπËØù„ÄÇ
#
async def retrieve_preferences():
"""Retrieve user preferences from long-term memory"""
# Êàë‰ª¨Ê∏ÖÁ©∫Êô∫ËÉΩ‰ΩìÁöÑÁü≠ÊúüËÆ∞ÂøÜÔºå‰ª•ÈÅøÂÖçÈÄ†ÊàêÂπ≤Êâ∞
await agent.memory.clear()
# ÊµãËØïÊô∫ËÉΩ‰ΩìÊòØÂê¶‰ºöËÆ∞‰Ωè‰πãÂâçÁöÑÂØπËØù
msg2 = Msg("user", "ÊàëÊúâ‰ªÄ‰πàÂÅèÂ•ΩÔºüÁÆÄË¶ÅÁöÑÂõûÁ≠îÊàë", "user")
await agent(msg2)
asyncio.run(retrieve_preferences())
# %%
# ‰ΩøÁî® ReMe ‰∏™‰∫∫ÈïøÊúüËÆ∞ÂøÜ
# ~~~~~~~~~~~~~~~~~~~~~~~~
#
# .. note:: Âú® GitHub ‰ªìÂ∫ìÁöÑ ``examples/long_term_memory/reme`` ÁõÆÂΩï‰∏ãÊàë‰ª¨Êèê‰æõ‰∫Ü ReMe ÈïøÊúüËÆ∞ÂøÜÁöÑ‰ΩøÁî®Á§∫‰æã„ÄÇ
#
from agentscope.memory import ReMePersonalLongTermMemory
# ÂàõÂª∫ ReMe ‰∏™‰∫∫ÈïøÊúüËÆ∞ÂøÜÂÆû‰æã
reme_long_term_memory = ReMePersonalLongTermMemory(
agent_name="Friday",
user_name="user_123",
model=DashScopeChatModel(
model_name="qwen3-max",
api_key=os.environ.get("DASHSCOPE_API_KEY"),
stream=False,
),
embedding_model=DashScopeTextEmbedding(
model_name="text-embedding-v4",
api_key=os.environ.get("DASHSCOPE_API_KEY"),
dimensions=1024,
),
)
# %%
# ``ReMePersonalLongTermMemory`` Á±ªÊèê‰æõ‰∫ÜÂõõ‰∏™Êìç‰ΩúÈïøÊúüËÆ∞ÂøÜÁöÑÊñπÊ≥ï„ÄÇ
# ÂÆÉ‰ª¨ÂàÜÂà´ÊòØÁî®‰∫éÂ∑•ÂÖ∑Ë∞ÉÁî®ÁöÑ ``record_to_memory`` Âíå ``retrieve_from_memory``Ôºå
# ‰ª•ÂèäÁî®‰∫éÁõ¥Êé•Ë∞ÉÁî®ÁöÑ ``record`` Âíå ``retrieve``„ÄÇ
#
# ‰æãÂ¶Ç‰∏ãÈù¢ÁöÑ‰æãÂ≠ê‰∏≠ÔºåÊàë‰ª¨‰ΩøÁî® ``record_to_memory`` ËÆ∞ÂΩïÁî®Êà∑ÂÅèÂ•Ω„ÄÇ
#
async def test_record_to_memory():
"""ÊµãËØï record_to_memory Â∑•ÂÖ∑ÂáΩÊï∞Êé•Âè£"""
async with reme_long_term_memory:
result = await reme_long_term_memory.record_to_memory(
thinking="Áî®Êà∑Ê≠£Âú®ÂàÜ‰∫´‰ªñ‰ª¨ÁöÑÊóÖË°åÂÅèÂ•ΩÂíå‰π†ÊÉØ",
content=[
"ÊàëÂéªÊù≠Â∑ûÊóÖË°åÊó∂ÂñúÊ¨¢‰ΩèÊ∞ëÂÆø",
"ÊàëÂñúÊ¨¢Êó©‰∏äÂéªË•øÊπñÊ∏∏Áé©",
"ÊàëÂñúÊ¨¢ÂñùÈæô‰∫ïËå∂",
],
)
# ÊèêÂèñÁªìÊûúÊñáÊú¨
result_text = " ".join(
block.get("text", "")
for block in result.content
if block.get("type") == "text"
)
print(f"ËÆ∞ÂΩïÁªìÊûú: {result_text}")
# %%
# ËæìÂá∫
#
# .. code-block:: console
#
# ËÆ∞ÂΩïÁªìÊûú: Successfully recorded 3 memory/memories to personal memory.
#
# %%
# ÁÑ∂ÂêéÊàë‰ª¨‰ΩøÁî® ``retrieve_from_memory`` Ê£ÄÁ¥¢Áõ∏ÂÖ≥ËÆ∞ÂøÜ„ÄÇ
#
async def test_retrieve_from_memory():
"""ÊµãËØï retrieve_from_memory Â∑•ÂÖ∑ÂáΩÊï∞Êé•Âè£"""
async with reme_long_term_memory:
# ÂÖàËÆ∞ÂΩï‰∏Ä‰∫õÂÜÖÂÆπ
await reme_long_term_memory.record_to_memory(
thinking="Áî®Êà∑Ê≠£Âú®ÂàÜ‰∫´ÊóÖË°åÂÅèÂ•Ω",
content=["ÊàëÂéªÊù≠Â∑ûÊóÖË°åÊó∂ÂñúÊ¨¢‰ΩèÊ∞ëÂÆø"],
)
# ÁÑ∂ÂêéÊ£ÄÁ¥¢
result = await reme_long_term_memory.retrieve_from_memory(
keywords=["Êù≠Â∑ûÊóÖË°å", "Ëå∂ÂÅèÂ•Ω"],
)
retrieved_text = " ".join(
block.get("text", "")
for block in result.content
if block.get("type") == "text"
)
print(f"Ê£ÄÁ¥¢Âà∞ÁöÑËÆ∞ÂøÜ: {retrieved_text}")
# %%
# ËæìÂá∫
#
# .. code-block:: console
#
# Ê£ÄÁ¥¢Âà∞ÁöÑËÆ∞ÂøÜ: Keyword 'Hangzhou travel':
# user prefers to stay in homestays when traveling to Hangzhou
#
# Keyword 'tea preference':
# user prefers to stay in homestays when traveling to Hangzhou
#
# %%
# Èô§‰∫ÜÂ∑•ÂÖ∑ÂáΩÊï∞Êé•Âè£ÔºåÊàë‰ª¨‰πüÂèØ‰ª•‰ΩøÁî® ``record`` ÊñπÊ≥ïÁõ¥Êé•ËÆ∞ÂΩïÊ∂àÊÅØÂØπËØù„ÄÇ
#
async def test_record_direct():
"""ÊµãËØï record Áõ¥Êé•ËÆ∞ÂΩïÊñπÊ≥ï"""
async with reme_long_term_memory:
await reme_long_term_memory.record(
msgs=[
Msg(
role="user",
content="ÊàëÊòØ‰∏ÄÂêçËΩØ‰ª∂Â∑•Á®ãÂ∏àÔºåÂñúÊ¨¢ËøúÁ®ãÂ∑•‰Ωú",
name="user",
),
Msg(
role="assistant",
content="ÊòéÁôΩ‰∫ÜÔºÅÊÇ®ÊòØ‰∏ÄÂêçÈáçËßÜËøúÁ®ãÂ∑•‰ΩúÁÅµÊ¥ªÊÄßÁöÑËΩØ‰ª∂Â∑•Á®ãÂ∏à„ÄÇ",
name="assistant",
),
Msg(
role="user",
content="ÊàëÈÄöÂ∏∏Êó©‰∏ä9ÁÇπÂºÄÂßãÂ∑•‰ΩúÔºå‰ºöÂÖàÂñù‰∏ÄÊùØÂíñÂï°",
name="user",
),
],
)
print("ÊàêÂäüËÆ∞ÂΩï‰∫ÜÂØπËØùÊ∂àÊÅØ")
# %%
# ËæìÂá∫
#
# .. code-block:: console
#
# ÊàêÂäüËÆ∞ÂΩï‰∫ÜÂØπËØùÊ∂àÊÅØ
#
# %%
# Á±ª‰ººÂú∞ÔºåÊàë‰ª¨‰ΩøÁî® ``retrieve`` ÊñπÊ≥ïÊ£ÄÁ¥¢Áõ∏ÂÖ≥ËÆ∞ÂøÜ„ÄÇ
#
async def test_retrieve_direct():
"""ÊµãËØï retrieve Áõ¥Êé•Ê£ÄÁ¥¢ÊñπÊ≥ï"""
async with reme_long_term_memory:
# ÂÖàËÆ∞ÂΩï‰∏Ä‰∫õÂÜÖÂÆπ
await reme_long_term_memory.record(
msgs=[
Msg(
role="user",
content="ÊàëÊòØ‰∏ÄÂêçËΩØ‰ª∂Â∑•Á®ãÂ∏àÔºåÂñúÊ¨¢ËøúÁ®ãÂ∑•‰Ωú",
name="user",
),
],
)
# ÁÑ∂ÂêéÊ£ÄÁ¥¢
memories = await reme_long_term_memory.retrieve(
msg=Msg(
role="user",
content="‰Ω†Áü•ÈÅìÊàëÁöÑÂ∑•‰ΩúÂÅèÂ•ΩÂêóÔºü",
name="user",
),
)
print(f"Ê£ÄÁ¥¢Âà∞ÁöÑËÆ∞ÂøÜ: {memories if memories else 'Êú™ÊâæÂà∞Áõ∏ÂÖ≥ËÆ∞ÂøÜ'}")
# %%
# ËæìÂá∫
#
# .. code-block:: console
#
# Ê£ÄÁ¥¢Âà∞ÁöÑËÆ∞ÂøÜ: user works as a software engineer and prefers remote work
# %%
# ‰∏é ReAct Êô∫ËÉΩ‰ΩìÈõÜÊàê
# ----------------------------------------
# AgentScope ‰∏≠ÁöÑ ``ReActAgent`` Âú®ÊûÑÈÄ†ÂáΩÊï∞‰∏≠ÂåÖÂê´ ``long_term_memory`` Âíå ``long_term_memory_mode`` ‰∏§‰∏™ÂèÇÊï∞„ÄÇ
#
# ÂΩì ``long_term_memory_mode`` ËÆæÁΩÆ‰∏∫ ``"agent_control"`` Êàñ ``both`` Êó∂ÔºåÂú® ``ReActAgent`` ÁöÑÊûÑÈÄ†ÂáΩÊï∞‰∏≠Â∞Ü
# Ê≥®ÂÜå ``record_to_memory`` Âíå ``retrieve_from_memory`` Â∑•ÂÖ∑ÂáΩÊï∞Ôºå‰ΩøÊô∫ËÉΩ‰ΩìËÉΩÂ§üËá™‰∏ªÁöÑÁÆ°ÁêÜÈïøÊúüËÆ∞ÂøÜ„ÄÇ
#
# .. note:: ‰∏∫‰∫ÜËææÂà∞ÊúÄÂ•ΩÁöÑÊïàÊûúÔºå``"agent_control"`` Ê®°ÂºèÂèØËÉΩËøòÈúÄË¶ÅÂú®Á≥ªÁªüÊèêÁ§∫Ôºàsystem promptÔºâ‰∏≠Ê∑ªÂä†Áõ∏Â∫îÁöÑËØ¥Êòé„ÄÇ
#
# ÂàõÂª∫Â∏¶ÊúâÈïøÊúüËÆ∞ÂøÜÁöÑ ReAct Êô∫ËÉΩ‰ΩìÔºàagent_control Ê®°ÂºèÔºâ
async def test_react_agent_with_reme():
"""ÊµãËØï ReActAgent ‰∏é ReMe ‰∏™‰∫∫ËÆ∞ÂøÜÁöÑÈõÜÊàê"""
async with reme_long_term_memory:
agent_with_reme = ReActAgent(
name="Friday",
sys_prompt=(
"‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Friday ÁöÑÂä©ÊâãÔºåÂÖ∑ÊúâÈïøÊúüËÆ∞ÂøÜËÉΩÂäõ„ÄÇ"
"\n\n## ËÆ∞ÂøÜÁÆ°ÁêÜÊåáÂçóÔºö\n"
"1. **ËÆ∞ÂΩïËÆ∞ÂøÜ**ÔºöÂΩìÁî®Êà∑ÂàÜ‰∫´‰∏™‰∫∫‰ø°ÊÅØ„ÄÅÂÅèÂ•Ω„ÄÅ‰π†ÊÉØÊàñÂÖ≥‰∫éËá™Â∑±ÁöÑ‰∫ãÂÆûÊó∂Ôºå"
"ÂßãÁªà‰ΩøÁî® `record_to_memory` ËÆ∞ÂΩïËøô‰∫õ‰ø°ÊÅØ‰ª•‰æõÂ∞ÜÊù•ÂèÇËÄÉ„ÄÇ\n"
"\n2. **Ê£ÄÁ¥¢ËÆ∞ÂøÜ**ÔºöÂú®ÂõûÁ≠îÂÖ≥‰∫éÁî®Êà∑ÂÅèÂ•Ω„ÄÅËøáÂéª‰ø°ÊÅØÊàñ‰∏™‰∫∫ËØ¶ÁªÜ‰ø°ÊÅØÁöÑÈóÆÈ¢ò‰πãÂâçÔºå"
"‰Ω†ÂøÖÈ°ªÈ¶ñÂÖàË∞ÉÁî® `retrieve_from_memory` Êù•Ê£ÄÊü•ÊòØÂê¶Êúâ‰ªª‰ΩïÁõ∏ÂÖ≥ÁöÑÂ≠òÂÇ®‰ø°ÊÅØ„ÄÇ"
"‰∏çË¶Å‰ªÖ‰æùËµñÂΩìÂâçÂØπËØù‰∏ä‰∏ãÊñá„ÄÇ\n"
"\n3. **‰ΩïÊó∂Ê£ÄÁ¥¢**ÔºöÂú®‰ª•‰∏ãÊÉÖÂÜµ‰∏ãË∞ÉÁî® `retrieve_from_memory`Ôºö\n"
" - Áî®Êà∑ÈóÆÁ±ª‰ºº'ÊàëÂñúÊ¨¢‰ªÄ‰πàÔºü'„ÄÅ'ÊàëÁöÑÂÅèÂ•ΩÊòØ‰ªÄ‰πàÔºü'„ÄÅ"
"'‰Ω†ÂØπÊàë‰∫ÜËß£Â§öÂ∞ëÔºü'ÁöÑÈóÆÈ¢ò\n"
" - Áî®Êà∑ËØ¢ÈóÆ‰ªñ‰ª¨ËøáÂéªÁöÑË°å‰∏∫„ÄÅ‰π†ÊÉØÊàñÂÅèÂ•Ω\n"
" - Áî®Êà∑ÊèêÂà∞‰ªñ‰ª¨‰πãÂâçÊèêÂà∞ÁöÑ‰ø°ÊÅØ\n"
" - ‰Ω†ÈúÄË¶ÅÂÖ≥‰∫éÁî®Êà∑ÁöÑ‰∏ä‰∏ãÊñáÊù•Êèê‰æõ‰∏™ÊÄßÂåñÁöÑÂìçÂ∫î\n"
"\nÂú®Â£∞Áß∞‰∏ç‰∫ÜËß£Áî®Êà∑ÁöÑÊüê‰∫õ‰ø°ÊÅØ‰πãÂâçÔºåÂßãÁªàÂÖàÊ£ÄÊü•‰Ω†ÁöÑËÆ∞ÂøÜ„ÄÇ"
),
model=DashScopeChatModel(
model_name="qwen3-max",
api_key=os.environ.get("DASHSCOPE_API_KEY"),
stream=False,
),
formatter=DashScopeChatFormatter(),
toolkit=Toolkit(),
memory=InMemoryMemory(),
long_term_memory=reme_long_term_memory,
long_term_memory_mode="agent_control", # ‰ΩøÁî® agent_control Ê®°Âºè
)
# Áî®Êà∑ÂàÜ‰∫´ÂÅèÂ•Ω
msg = Msg(
role="user",
content="ÊàëÂéªÊù≠Â∑ûÊóÖË°åÊó∂ÔºåÂñúÊ¨¢‰ΩèÊ∞ëÂÆø",
name="user",
)
response = await agent_with_reme(msg)
print(f"Êô∫ËÉΩ‰ΩìÂìçÂ∫î: {response.get_text_content()}")
# Ê∏ÖÁ©∫Áü≠ÊúüËÆ∞ÂøÜ‰ª•ÊµãËØïÈïøÊúüËÆ∞ÂøÜ
await agent_with_reme.memory.clear()
# Êü•ËØ¢ÂÅèÂ•Ω
msg2 = Msg(role="user", content="ÊàëÊúâ‰ªÄ‰πàÂÅèÂ•ΩÔºü", name="user")
response2 = await agent_with_reme(msg2)
print(f"Êô∫ËÉΩ‰ΩìÂìçÂ∫î: {response2.get_text_content()}")
# %%
# ËæìÂá∫
#
# .. code-block:: console
#
# system: {
# "type": "tool_result",
# "id": "call_7de95a3382e241309b16cb9e",
# "name": "retrieve_from_memory",
# "output": [
# {
# "type": "text",
# "text": "Keyword 'preference':\nuser prefers to stay in a homestay when traveling to Hangzhou"
# }
# ]
# }
# Friday: Based on what I know, you prefer to stay in a homestay when traveling to Hangzhou. Let me know if there's anything else you'd like me to remember or clarify!
# Agent response: Based on what I know, you prefer to stay in a homestay when traveling to Hangzhou. Let me know if there's anything else you'd like me to remember or clarify!
#
# %%
# ÁÑ∂ÂêéÊàë‰ª¨Ê∏ÖÁ©∫Êô∫ËÉΩ‰ΩìÁöÑÁü≠ÊúüËÆ∞ÂøÜÔºå‰ª•ÈÅøÂÖçÈÄ†ÊàêÂπ≤Êâ∞ÔºåÂπ∂ÊµãËØïÊô∫ËÉΩ‰ΩìÊòØÂê¶‰ºöËÆ∞‰Ωè‰πãÂâçÁöÑÂØπËØù„ÄÇ
#
async def retrieve_reme_preferences():
"""‰ªéÈïøÊúüËÆ∞ÂøÜ‰∏≠Ê£ÄÁ¥¢Áî®Êà∑ÂÅèÂ•Ω"""
async with reme_long_term_memory:
# ÂàõÂª∫Êô∫ËÉΩ‰ΩìÔºàËøôÈáåÂèØ‰ª•Â§çÁî®‰πãÂâçÂàõÂª∫ÁöÑÊô∫ËÉΩ‰ΩìÔºå‰∏∫‰∫ÜÁ§∫‰æãÂÆåÊï¥ÊÄßÈáçÊñ∞ÂàõÂª∫Ôºâ
agent_with_reme = ReActAgent(
name="Friday",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™ÂÖ∑ÊúâÈïøÊúüËÆ∞ÂøÜÂäüËÉΩÁöÑÂä©Êâã„ÄÇ",
model=DashScopeChatModel(
api_key=os.environ.get("DASHSCOPE_API_KEY"),
model_name="qwen3-max",
stream=False,
),
formatter=DashScopeChatFormatter(),
toolkit=Toolkit(),
memory=InMemoryMemory(),
long_term_memory=reme_long_term_memory,
long_term_memory_mode="agent_control",
)
# Êàë‰ª¨Ê∏ÖÁ©∫Êô∫ËÉΩ‰ΩìÁöÑÁü≠ÊúüËÆ∞ÂøÜÔºå‰ª•ÈÅøÂÖçÈÄ†ÊàêÂπ≤Êâ∞
await agent_with_reme.memory.clear()
# ÊµãËØïÊô∫ËÉΩ‰ΩìÊòØÂê¶‰ºöËÆ∞‰Ωè‰πãÂâçÁöÑÂØπËØù
msg2 = Msg("user", "ÊàëÊúâ‰ªÄ‰πàÂÅèÂ•ΩÔºüÁÆÄË¶ÅÁöÑÂõûÁ≠îÊàë", "user")
await agent_with_reme(msg2)
# %%
# ËæìÂá∫
#
# .. code-block:: console
#
# system: {
# "type": "tool_result",
# "id": "call_e7d354e450684ceca331a8d9",
# "name": "retrieve_from_memory",
# "output": [
# {
# "type": "text",
# "text": "No memories found for the given keywords."
# }
# ]
# }
# Friday: I don't have any recorded information about your preferences yet. Let me know what you like or need, and I can remember it for future reference!
#
# %%
# Ëá™ÂÆö‰πâÈïøÊúüËÆ∞ÂøÜ
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope Êèê‰æõ‰∫Ü ``LongTermMemoryBase`` Âü∫Á±ªÔºåÂÆÉÂÆö‰πâ‰∫ÜÈïøÊúüËÆ∞ÂøÜÁöÑÂü∫Êú¨Êé•Âè£„ÄÇ
#
# ÂºÄÂèëËÄÖÂèØ‰ª•ÁªßÊâø ``LongTermMemoryBase`` Âπ∂ÂÆûÁé∞‰ª•‰∏ãÁöÑÊäΩË±°ÊñπÊ≥ïÊù•ÂÆö‰πâËá™Â∑±ÁöÑÈïøÊúüËÆ∞ÂøÜÁ±ªÔºö
#
# .. list-table:: AgentScope ‰∏≠ÁöÑÈïøÊúüËÆ∞ÂøÜÁ±ª
# :header-rows: 1
#
# * - Á±ª
# - ÊäΩË±°ÊñπÊ≥ï
# - ÊèèËø∞
# * - ``LongTermMemoryBase``
# - | ``record``
# | ``retrieve``
# | ``record_to_memory``
# | ``retrieve_from_memory``
# - - Â¶ÇÊûúÊÉ≥ÊîØÊåÅ "static_control" Ê®°ÂºèÔºåÂøÖÈ°ªÂÆûÁé∞ ``record`` Âíå ``retrieve`` ÊñπÊ≥ï„ÄÇ
# - ÊÉ≥Ë¶ÅÊîØÊåÅ "agent_control" Ê®°ÂºèÔºåÂøÖÈ°ªÂÆûÁé∞ ``record_to_memory`` Âíå ``retrieve_from_memory`` ÊñπÊ≥ï„ÄÇ
# * - ``Mem0LongTermMemory``
# - | ``record``
# | ``retrieve``
# | ``record_to_memory``
# | ``retrieve_from_memory``
# - Âü∫‰∫é mem0 Â∫ìÁöÑÈïøÊúüËÆ∞ÂøÜÂÆûÁé∞ÔºåÊîØÊåÅÂêëÈáèÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢„ÄÇ
# * - ``ReMePersonalLongTermMemory``
# - | ``record``
# | ``retrieve``
# | ``record_to_memory``
# | ``retrieve_from_memory``
# - Âü∫‰∫é ReMe Ê°ÜÊû∂ÁöÑ‰∏™‰∫∫ËÆ∞ÂøÜÂÆûÁé∞ÔºåÊèê‰æõÂº∫Â§ßÁöÑËÆ∞ÂøÜÁÆ°ÁêÜÂíåÊ£ÄÁ¥¢ÂäüËÉΩ„ÄÇ
#
#
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - :ref:`memory` - Âü∫Á°ÄËÆ∞ÂøÜÁ≥ªÁªü
# - :ref:`agent` - ReAct Êô∫ËÉΩ‰Ωì
# - :ref:`tool` - Â∑•ÂÖ∑Á≥ªÁªü
---- task_mcp.py ----
# -*- coding: utf-8 -*-
"""
.. _mcp:
MCP
=========================
Êú¨Á´†Â∞Ü‰ªãÁªç AgentScope ÂØπ MCPÔºàModel Context ProtocolÔºâÁöÑ‰ª•‰∏ãÊîØÊåÅÔºö
- ÊîØÊåÅ **HTTP** ÔºàStreamableHTTP Âíå SSEÔºâÂíå **StdIO** Á±ªÂûãÁöÑ MCP ÊúçÂä°Âô®
- Êèê‰æõ **ÊúâÁä∂ÊÄÅ** Âíå **Êó†Áä∂ÊÄÅ** ‰∏§Áßç MCP ÂÆ¢Êà∑Á´Ø
- Êèê‰æõ **MCP Á∫ßÂà´** Âíå **ÂáΩÊï∞Á∫ßÂà´** ÁöÑ MCP Â∑•ÂÖ∑ÁÆ°ÁêÜ
ËøôÈáåÁöÑÊúâÁä∂ÊÄÅ/Êó†Áä∂ÊÄÅÊòØÊåáÂÆ¢Êà∑Á´ØÊòØÂê¶‰ºöÁª¥ÊåÅ‰∏é MCP ÊúçÂä°Âô®ÁöÑ‰ºöËØùÔºàsessionÔºâ„ÄÇ
Êó†Áä∂ÊÄÅÂÆ¢Êà∑Á´ØÂè™‰ºöÂú®Ë∞ÉÁî®Â∑•ÂÖ∑ÂèëÁîüÊó∂Âª∫Á´ã‰ºöËØùÔºåÂπ∂Âú®Â∑•ÂÖ∑Ë∞ÉÁî®ÁªìÊùüÂêéÁ´ãÂç≥ÈîÄÊØÅ‰ºöËØùÔºåÊòØ‰∏ÄÁßçËΩªÈáèÂåñÁöÑ‰ΩøÁî®ÊñπÂºè„ÄÇ
‰∏ãË°®ÊÄªÁªì‰∫ÜÊîØÊåÅÁöÑ MCP ÂÆ¢Êà∑Á´ØÁ±ªÂûãÂíåÂçèËÆÆÔºö
.. list-table:: ÊîØÊåÅÁöÑ MCP ÂÆ¢Êà∑Á´ØÁ±ªÂûãÂíåÂçèËÆÆ
:header-rows: 1
* - ÂÆ¢Êà∑Á´ØÁ±ªÂûã
- HTTPÔºàStreamableHTTP Âíå SSEÔºâ
- StdIO
* - ÊúâÁä∂ÊÄÅÂÆ¢Êà∑Á´Ø
- ``HttpStatefulClient``
- ``StdIOStatefulClient``
* - Êó†Áä∂ÊÄÅÂÆ¢Êà∑Á´Ø
- ``HttpStatelessClient``
-
"""
import asyncio
import json
import os
from agentscope.mcp import HttpStatefulClient, HttpStatelessClient
from agentscope.tool import Toolkit
# %%
# MCP ÂÆ¢Êà∑Á´Ø
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Âú® AgentScope ‰∏≠ÔºåMCP ÂÆ¢Êà∑Á´ØË¥üË¥£
#
# - ËøûÊé•Âà∞ MCP ÊúçÂä°Âô®Ôºå
# - ‰ªéÊúçÂä°Âô®Ëé∑ÂèñÂ∑•ÂÖ∑ÂáΩÊï∞Ôºå‰ª•Âèä
# - Ë∞ÉÁî® MCP ÊúçÂä°Âô®‰∏≠ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
#
# AgentScope ‰∏≠Êúâ‰∏§ÁßçÁ±ªÂûãÁöÑ MCP ÂÆ¢Êà∑Á´ØÔºö**ÊúâÁä∂ÊÄÅ** Âíå **Êó†Áä∂ÊÄÅ**„ÄÇ
# ÂÆÉ‰ª¨‰ªÖÂú® **Â¶Ç‰ΩïÁÆ°ÁêÜ‰∏é MCP ÊúçÂä°Âô®ÁöÑ‰ºöËØù** ÊñπÈù¢ÊúâÊâÄ‰∏çÂêå„ÄÇ
#
# - ÊúâÁä∂ÊÄÅÂÆ¢Êà∑Á´ØÔºöÊúâÁä∂ÊÄÅ MCP ÂÆ¢Êà∑Á´ØÂú®ÂÖ∂ÁîüÂëΩÂë®ÊúüÂÜÖ **Áª¥ÊåÅ‰∏é MCP ÊúçÂä°Âô®ÁöÑÊåÅ‰πÖ‰ºöËØù**„ÄÇÂºÄÂèëËÄÖÂ∫îÊòæÂºèË∞ÉÁî® ``connect()`` Âíå ``close()`` ÊñπÊ≥ïÊù•ÁÆ°ÁêÜ‰ºöËØùÁöÑÁîüÂëΩÂë®Êúü„ÄÇ
# - Êó†Áä∂ÊÄÅÂÆ¢Êà∑Á´ØÔºöÊó†Áä∂ÊÄÅ MCP ÂÆ¢Êà∑Á´ØÂú®Ë∞ÉÁî®Â∑•ÂÖ∑ÂáΩÊï∞Êó∂ÂàõÂª∫Êñ∞‰ºöËØùÔºåÂú®Â∑•ÂÖ∑ÂáΩÊï∞Ë∞ÉÁî®ÂÆåÊàêÂêéÁ´ãÂç≥ÈîÄÊØÅ‰ºöËØùÔºåÊõ¥Âä†ËΩªÈáèÂåñ„ÄÇ
#
# .. note:: - StdIO MCP ÊúçÂä°Âô®Âè™ÊúâÊúâÁä∂ÊÄÅÂÆ¢Êà∑Á´ØÔºåÂΩìË∞ÉÁî® ``connect()`` Êó∂ÔºåÂÆÉÂ∞ÜÂú®Êú¨Âú∞ÂêØÂä® MCP ÊúçÂä°Âô®ÁÑ∂ÂêéËøûÊé•Âà∞ÂÆÉ„ÄÇ
# - ÂØπ‰∫éÊúâÁä∂ÊÄÅÂÆ¢Êà∑Á´ØÔºåÂºÄÂèëËÄÖÂøÖÈ°ªÁ°Æ‰øùÂú®Ë∞ÉÁî®Â∑•ÂÖ∑ÂáΩÊï∞Êó∂ÂÆ¢Êà∑Á´ØÂ∑≤ËøûÊé•„ÄÇ
# - ÂΩìÊúâÂ§ö‰∏™ `HttpStatefulClient` Êàñ `StdIOStatefulClient` Âª∫Á´ãËøûÊé•Êó∂ÔºåÂ∫îÊåâÁÖßÂêéËøõÂÖàÂá∫ (LIFO) ÁöÑÈ°∫Â∫èÂÖ≥Èó≠ÂÆÉ‰ª¨‰ª•ÈÅøÂÖçÂºïÂèëÈîôËØØ„ÄÇ
#
# ‰ª•È´òÂæ∑Âú∞Âõæ MCP ÊúçÂä°Âô®‰∏∫‰æãÔºåÊúâÁä∂ÊÄÅÂíåÊó†Áä∂ÊÄÅÂÆ¢Êà∑Á´ØÁöÑÂàõÂª∫ÈùûÂ∏∏Áõ∏‰ººÔºö
#
stateful_client = HttpStatefulClient(
# Áî®‰∫éÊ†áËØÜ MCP ÁöÑÂêçÁß∞
name="mcp_services_stateful",
transport="streamable_http",
url=f"https://mcp.amap.com/mcp?key={os.environ['GAODE_API_KEY']}",
)
stateless_client = HttpStatelessClient(
# Áî®‰∫éÊ†áËØÜ MCP ÁöÑÂêçÁß∞
name="mcp_services_stateless",
transport="streamable_http",
url=f"https://mcp.amap.com/mcp?key={os.environ['GAODE_API_KEY']}",
)
# %%
# ÊúâÁä∂ÊÄÅÂíåÊó†Áä∂ÊÄÅÂÆ¢Êà∑Á´ØÈÉΩÊèê‰æõ‰ª•‰∏ãÊñπÊ≥ïÔºö
#
# .. list-table:: MCP ÂÆ¢Êà∑Á´ØÊñπÊ≥ï
# :header-rows: 1
#
# * - ÊñπÊ≥ï
# - ÊèèËø∞
# * - ``list_tools``
# - ÂàóÂá∫ MCP ÊúçÂä°Âô®‰∏≠ÊâÄÊúâÂèØÁî®ÁöÑÂ∑•ÂÖ∑„ÄÇ
# * - ``get_callable_function``
# - ÈÄöËøáÂêçÁß∞‰ªé MCP ÊúçÂä°Âô®Ëé∑ÂèñÂèØË∞ÉÁî®ÁöÑÂáΩÊï∞ÂØπË±°„ÄÇ
#
# MCP ‰Ωú‰∏∫Â∑•ÂÖ∑
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope Êèê‰æõ‰∫ÜÂØπ MCP Â∑•ÂÖ∑ÁöÑÁªÜÁ≤íÂ∫¶ÁÆ°ÁêÜÔºåÂåÖÊã¨ MCP Á∫ßÂà´ÂíåÂáΩÊï∞Á∫ßÂà´ÁöÑÁÆ°ÁêÜ„ÄÇ
#
# MCP Á∫ßÂà´ÁÆ°ÁêÜ
# --------------------------------
# ÊÇ®ÂèØ‰ª•Â∞Ü MCP ÊúçÂä°Âô®ÁöÑÊâÄÊúâÂ∑•ÂÖ∑‰∏ÄÊ¨°ÊÄßÊ≥®ÂÜåÂà∞ ``Toolkit`` ‰∏≠ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫„ÄÇ
#
# .. tip:: ÂèØÈÄâÂú∞ÔºåÂºÄÂèëËÄÖÂèØ‰ª•ÈÄöËøáÊåáÂÆöÁªÑÂêçÊù•ÁÆ°ÁêÜÂ∑•ÂÖ∑„ÄÇÊúâÂÖ≥ÂàÜÁªÑÂ∑•ÂÖ∑ÁÆ°ÁêÜÔºåËØ∑ÂèÇËÄÉ :ref:`tool` ÈÉ®ÂàÜ„ÄÇ
#
toolkit = Toolkit()
async def example_register_stateless_mcp() -> None:
"""Ê≥®ÂÜåÊó†Áä∂ÊÄÅÂÆ¢Êà∑Á´Ø MCP Â∑•ÂÖ∑ÁöÑÁ§∫‰æã„ÄÇ"""
# ‰ªé MCP ÊúçÂä°Âô®Ê≥®ÂÜåÊâÄÊúâÂ∑•ÂÖ∑
await toolkit.register_mcp_client(
stateless_client,
# group_name="map_services", # ÂèØÈÄâÁöÑÁªÑÂêç
)
print("Ê≥®ÂÜåÁöÑ MCP Â∑•ÂÖ∑ÊÄªÊï∞Ôºö", len(toolkit.get_json_schemas()))
maps_geo = next(
tool
for tool in toolkit.get_json_schemas()
if tool["function"]["name"] == "maps_geo"
)
print("\nÁ§∫‰æã ``maps_geo`` ÂáΩÊï∞Ôºö")
print(
json.dumps(
maps_geo,
indent=4,
ensure_ascii=False,
),
)
asyncio.run(example_register_stateless_mcp())
# %%
# Ë¶ÅÁßªÈô§Â∑≤Ê≥®ÂÜåÁöÑÂ∑•ÂÖ∑ÔºåÂèØ‰ª•‰ΩøÁî® ``remove_tool_function`` ÂáΩÊï∞ÔºåÊàñ‰ΩøÁî® ``remove_mcp_clients`` ÁßªÈô§ÁâπÂÆö MCP ÁöÑÊâÄÊúâÂ∑•ÂÖ∑„ÄÇ
#
async def example_remove_mcp_tools() -> None:
"""ÁßªÈô§ MCP Â∑•ÂÖ∑ÁöÑÁ§∫‰æã„ÄÇ"""
print("ÁßªÈô§ÂâçÁöÑÂ∑•ÂÖ∑ÊÄªÊï∞Ôºö", len(toolkit.get_json_schemas()))
# ÈÄöËøáÂêçÁß∞ÁßªÈô§ÁâπÂÆöÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
toolkit.remove_tool_function("maps_geo")
print("Â∑•ÂÖ∑Êï∞ÈáèÔºö", len(toolkit.get_json_schemas()))
# ÈÄöËøáÂêçÁß∞ÁßªÈô§ MCP ÂÆ¢Êà∑Á´ØÁöÑÊâÄÊúâÂ∑•ÂÖ∑
await toolkit.remove_mcp_clients(client_names=["mcp_services_stateless"])
print("Â∑•ÂÖ∑Êï∞ÈáèÔºö", len(toolkit.get_json_schemas()))
asyncio.run(example_remove_mcp_tools())
# %%
# ÂáΩÊï∞Á∫ßÂà´ÁÆ°ÁêÜ
# --------------------------------
# Ê≥®ÊÑèÂà∞ÂºÄÂèëËÄÖÊúâÂØπ MCP Â∑•ÂÖ∑ËøõË°åÊõ¥ÁªÜÁ≤íÂ∫¶ÊéßÂà∂ÁöÑÈúÄÊ±ÇÔºå‰æãÂ¶ÇÂØπÂ∑•ÂÖ∑ÁªìÊûúËøõË°åÂêéÂ§ÑÁêÜÔºåÊàñ‰ΩøÁî®ÂÆÉ‰ª¨ÂàõÂª∫Êõ¥Â§çÊùÇÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
#
# Âõ†Ê≠§ÔºåAgentScope ÊîØÊåÅÈÄöËøáÂ∑•ÂÖ∑Âêç‰ªé MCP ÂÆ¢Êà∑Á´ØËé∑ÂèñÂèØË∞ÉÁî®ÁöÑÂáΩÊï∞ÂØπË±°ÔºåËøôÊ†∑ÂºÄÂèëËÄÖÂèØ‰ª•
#
# - Áõ¥Êé•Ë∞ÉÁî®ÂÆÉÔºå
# - Â∞ÜÂÖ∂ÂåÖË£ÖÂà∞Ëá™Â∑±ÁöÑÂáΩÊï∞‰∏≠ÔºåÊàñ‰ª•‰ªª‰ΩïÂÖ∂ÂÆÉÊñπÂºèËøõË°å‰ΩøÁî®„ÄÇ
#
# Ê≠§Â§ñÔºåÂºÄÂèëËÄÖÂèØ‰ª•ÊåáÂÆöÊòØÂê¶Â∞ÜÂ∑•ÂÖ∑ÂáΩÊï∞ÊâßË°åÁªìÊûúÂåÖË£ÖÊàê ``ToolResponse`` ÂØπË±°Ôºå‰ª•‰æø‰∏é ``Toolkit`` Êó†Áºù‰ΩøÁî®„ÄÇ
# Â¶ÇÊûúËÆæÁΩÆ ``wrap_tool_result=False``ÔºåÂ∞ÜËøîÂõûÂéüÂßãÁªìÊûúÁ±ªÂûã ``mcp.types.CallToolResult``„ÄÇ
#
# ‰ª• ``maps_geo`` ÂáΩÊï∞‰∏∫‰æãÔºåÂèØ‰ª•Â∞ÜÂÖ∂Ëé∑Âèñ‰∏∫ÂèØË∞ÉÁî®ÁöÑÂáΩÊï∞ÂØπË±°ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
async def example_function_level_usage() -> None:
"""‰ΩøÁî®ÂáΩÊï∞Á∫ßÂà´ MCP Â∑•ÂÖ∑ÁöÑÁ§∫‰æã„ÄÇ"""
func_obj = await stateless_client.get_callable_function(
func_name="maps_geo",
# ÊòØÂê¶Â∞ÜÂ∑•ÂÖ∑ÁªìÊûúÂåÖË£ÖÂà∞ AgentScope ÁöÑ ToolResponse ‰∏≠
wrap_tool_result=True,
)
# ÊÇ®ÂèØ‰ª•Ëé∑ÂèñÂÖ∂ÂêçÁß∞„ÄÅÊèèËø∞Âíå JSON schema
print("ÂáΩÊï∞ÂêçÁß∞Ôºö", func_obj.name)
print("ÂáΩÊï∞ÊèèËø∞Ôºö", func_obj.description)
print(
"ÂáΩÊï∞ JSON schemaÔºö",
json.dumps(func_obj.json_schema, indent=4, ensure_ascii=False),
)
# Áõ¥Êé•Ë∞ÉÁî®ÂáΩÊï∞ÂØπË±°
res = await func_obj(
address="Â§©ÂÆâÈó®ÂπøÂú∫",
city="Âåó‰∫¨",
)
print("\nÂáΩÊï∞Ë∞ÉÁî®ÁªìÊûúÔºö")
print(res)
asyncio.run(example_function_level_usage())
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# ÊúâÂÖ≥Êõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇËßÅÔºö
#
# - :ref:`tool`
# - :ref:`agent`
#
---- task_memory.py ----
# -*- coding: utf-8 -*-
"""
.. _memory:
ËÆ∞ÂøÜ
========================
Âú® AgentScope ‰∏≠ÔºåËÆ∞ÂøÜÔºàmemoryÔºâÁî®‰∫éÂ≠òÂÇ®Êô∫ËÉΩ‰ΩìÁöÑ‰∏ä‰∏ãÊñáÔºåÂπ∂Âú®ÈúÄË¶ÅÊó∂Ê£ÄÁ¥¢ÂÆÉ„ÄÇ
ÂÖ∑‰ΩìËÄåË®ÄÔºåAgentScope Âú® ``agentscope.memory`` Ê®°Âùó‰∏ãÊèê‰æõ‰∫ÜËÆ∞ÂøÜÂü∫Á±ª ``MemoryBase`` Âíå‰∏Ä‰∏™ÂèØÁõ¥Êé•‰ΩøÁî®ÁöÑÂü∫‰∫éÂÜÖÂ≠òÂÆûÁé∞ ``InMemoryMemory``„ÄÇ
Ëá™ÂÆö‰πâËÆ∞ÂøÜ
~~~~~~~~~~~~~~~~~~~~~~~~
Ë¶ÅËá™ÂÆö‰πâÊÇ®Ëá™Â∑±ÁöÑËÆ∞ÂøÜÔºåÂè™ÈúÄÁªßÊâø ``MemoryBase`` Âπ∂ÂÆûÁé∞‰ª•‰∏ãÊñπÊ≥ïÔºö
.. list-table::
:header-rows: 1
* - ÊñπÊ≥ï
- ÊèèËø∞
* - ``add``
- ÂêëËÆ∞ÂøÜ‰∏≠Ê∑ªÂä† ``Msg`` ÂØπË±°
* - ``delete``
- ‰ªéËÆ∞ÂøÜ‰∏≠Âà†Èô§È°πÁõÆ
* - ``size``
- ËÆ∞ÂøÜÁöÑÂ§ßÂ∞è
* - ``clear``
- Ê∏ÖÁ©∫ËÆ∞ÂøÜÂÜÖÂÆπ
* - ``get_memory``
- ‰ª• ``Msg`` ÂØπË±°ÂàóË°®ÁöÑÂΩ¢ÂºèËé∑ÂèñËÆ∞ÂøÜÂÜÖÂÆπ
* - ``state_dict``
- Ëé∑ÂèñËÆ∞ÂøÜÁöÑÁä∂ÊÄÅÂ≠óÂÖ∏
* - ``load_state_dict``
- Âä†ËΩΩËÆ∞ÂøÜÁöÑÁä∂ÊÄÅÂ≠óÂÖ∏
Ëøõ‰∏ÄÊ≠•ÈòÖËØª
~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`long-term-memory`
"""
---- task_model.py ----
# -*- coding: utf-8 -*-
"""
.. _model:
Ê®°Âûã
====================
Âú®Êú¨ÊïôÁ®ã‰∏≠ÔºåÊàë‰ª¨‰ªãÁªç AgentScope ‰∏≠ÈõÜÊàêÁöÑÊ®°Âûã API„ÄÅÂ¶Ç‰Ωï‰ΩøÁî®ÂÆÉ‰ª¨Ôºå‰ª•ÂèäÂ¶Ç‰ΩïÈõÜÊàêÊñ∞ÁöÑÊ®°Âûã API„ÄÇ
AgentScope ÁõÆÂâçÊîØÊåÅÁöÑÊ®°Âûã API ÂíåÊ®°ÂûãÊèê‰æõÂïÜÂåÖÊã¨Ôºö
.. list-table::
:header-rows: 1
* - API
- Á±ª
- ÂÖºÂÆπ
- ÊµÅÂºè
- Â∑•ÂÖ∑
- ËßÜËßâ
- Êé®ÁêÜ
* - OpenAI
- ``OpenAIChatModel``
- vLLM, DeepSeek
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
* - DashScope
- ``DashScopeChatModel``
-
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
* - Anthropic
- ``AnthropicChatModel``
-
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
* - Gemini
- ``GeminiChatModel``
-
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
* - Ollama
- ``OllamaChatModel``
-
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
.. note:: ÂΩì‰ΩøÁî® vLLM Êó∂ÔºåÈúÄË¶ÅÂú®ÈÉ®ÁΩ≤Êó∂‰∏∫‰∏çÂêåÊ®°ÂûãÈÖçÁΩÆÁõ∏Â∫îÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®ÂèÇÊï∞Ôºå‰æãÂ¶Ç ``--enable-auto-tool-choice``„ÄÅ``--tool-call-parser`` Á≠âÂèÇÊï∞„ÄÇÊõ¥Â§öËØ¶ÊÉÖËØ∑ÂèÇËÄÉ `vLLM ÂÆòÊñπÊñáÊ°£ <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_„ÄÇ
.. note:: ÂÖºÂÆπ OpenAI API ÁöÑÊ®°ÂûãÔºà‰æãÂ¶Ç vLLM ÈÉ®ÁΩ≤ÁöÑÊ®°ÂûãÔºâÔºåÊé®Ëçê‰ΩøÁî® ``OpenAIChatModel``ÔºåÂπ∂ÈÄöËøá ``client_args={"base_url": "http://your-api-endpoint"}`` ÂèÇÊï∞ÊåáÂÆö API Á´ØÁÇπ„ÄÇ‰æãÂ¶ÇÔºö
.. code-block:: python
OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})
.. note:: Ê®°ÂûãÁöÑË°å‰∏∫ÂèÇÊï∞ÔºàÂ¶ÇÊ∏©Â∫¶„ÄÅÊúÄÂ§ßÈïøÂ∫¶Á≠âÔºâÂèØ‰ª•ÈÄöËøá ``generate_kwargs`` ÂèÇÊï∞Âú®ÊûÑÈÄ†ÂáΩÊï∞‰∏≠ÊèêÂâçËÆæÂÆö„ÄÇ‰æãÂ¶ÇÔºö
.. code-block:: python
OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})
‰∏∫‰∫ÜÊèê‰æõÁªü‰∏ÄÁöÑÊ®°ÂûãÊé•Âè£Ôºå‰∏äËø∞ÊâÄÊúâÁ±ªÂùáË¢´Áªü‰∏Ä‰∏∫Ôºö
- ``__call__`` ÂáΩÊï∞ÁöÑÂâç‰∏â‰∏™ÂèÇÊï∞ÊòØ ``messages``Ôºå``tools`` Âíå ``tool_choice``ÔºåÂàÜÂà´ÊòØËæìÂÖ•Ê∂àÊÅØÔºåÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑ JSON schemaÔºå‰ª•ÂèäÂ∑•ÂÖ∑ÈÄâÊã©ÁöÑÊ®°Âºè„ÄÇ
- ÈùûÊµÅÂºèËøîÂõûÊó∂ÔºåËøîÂõûÁ±ªÂûãÊòØ ``ChatResponse`` ÂÆû‰æãÔºõÊµÅÂºèËøîÂõûÊó∂ÔºåËøîÂõûÁöÑÊòØ ``ChatResponse`` ÁöÑÂºÇÊ≠•ÁîüÊàêÂô®„ÄÇ
.. note:: ‰∏çÂêåÁöÑÊ®°Âûã API Âú®ËæìÂÖ•Ê∂àÊÅØÊ†ºÂºè‰∏äÊúâÊâÄ‰∏çÂêåÔºåAgentScope ÈÄöËøá formatter Ê®°ÂùóÂ§ÑÁêÜÊ∂àÊÅØÁöÑËΩ¨Êç¢ÔºåËØ∑ÂèÇËÄÉ :ref:`format`„ÄÇ
``ChatResponse`` ÂåÖÂê´Â§ßÊ®°ÂûãÁîüÊàêÁöÑÊé®ÁêÜ/ÊñáÊú¨/Â∑•ÂÖ∑‰ΩøÁî®ÂÜÖÂÆπ„ÄÅË∫´‰ªΩ„ÄÅÂàõÂª∫Êó∂Èó¥Âíå‰ΩøÁî®‰ø°ÊÅØ„ÄÇ
"""
import asyncio
import json
import os
from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
from agentscope.model import ChatResponse, DashScopeChatModel
response = ChatResponse(
content=[
ThinkingBlock(
type="thinking",
thinking="ÊàëÂ∫îËØ•Âú® Google ‰∏äÊêúÁ¥¢ AgentScope„ÄÇ",
),
TextBlock(type="text", text="ÊàëÂ∞ÜÂú® Google ‰∏äÊêúÁ¥¢ AgentScope„ÄÇ"),
ToolUseBlock(
type="tool_use",
id="642n298gjna",
name="google_search",
input={"query": "AgentScope"},
),
],
)
print(response)
# %%
# ‰ª• ``DashScopeChatModel`` ‰∏∫‰æãÔºåË∞ÉÁî®ÂíåËøîÂõûÁªìÊûúÂ¶Ç‰∏ãÔºö
async def example_model_call() -> None:
"""‰ΩøÁî® DashScopeChatModel ÁöÑÁ§∫‰æã„ÄÇ"""
model = DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
)
res = await model(
messages=[
{"role": "user", "content": "‰Ω†Â•ΩÔºÅ"},
],
)
# ÊÇ®ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®ÂìçÂ∫îÂÜÖÂÆπÂàõÂª∫ ``Msg`` ÂØπË±°
msg_res = Msg("Friday", res.content, "assistant")
print("LLM ËøîÂõûÁªìÊûú:", res)
print("‰Ωú‰∏∫ Msg ÁöÑÂìçÂ∫î:", msg_res)
asyncio.run(example_model_call())
# %%
# ÊµÅÂºèËøîÂõû
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Ë¶ÅÂêØÁî®ÊµÅÂºèËøîÂõûÔºåËØ∑Âú®Ê®°ÂûãÁöÑÊûÑÈÄ†ÂáΩÊï∞‰∏≠Â∞Ü ``stream`` ÂèÇÊï∞ËÆæÁΩÆ‰∏∫ ``True``„ÄÇ
# ÊµÅÂºèËøîÂõû‰∏≠Ôºå``__call__`` ÊñπÊ≥ïÂ∞ÜËøîÂõû‰∏Ä‰∏™ **ÂºÇÊ≠•ÁîüÊàêÂô®**ÔºåËØ•ÁîüÊàêÂô®Ëø≠‰ª£ËøîÂõû ``ChatResponse`` ÂÆû‰æã„ÄÇ
#
# .. note:: AgentScope ‰∏≠ÁöÑÊµÅÂºèËøîÂõûÁªìÊûú‰∏∫ **Á¥ØÂä†Âºè**ÔºåËøôÊÑèÂë≥ÁùÄÊØè‰∏™ chunk ‰∏≠ÁöÑÂÜÖÂÆπÂåÖÂê´ÊâÄÊúâ‰πãÂâçÁöÑÂÜÖÂÆπÂä†‰∏äÊñ∞ÁîüÊàêÁöÑÂÜÖÂÆπ„ÄÇ
#
async def example_streaming() -> None:
"""‰ΩøÁî®ÊµÅÂºèÊ®°ÂûãÁöÑÁ§∫‰æã„ÄÇ"""
model = DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=True,
)
generator = await model(
messages=[
{
"role": "user",
"content": "‰ªé 1 Êï∞Âà∞ 20ÔºåÂè™Êä•ÂëäÊï∞Â≠óÔºå‰∏çË¶Å‰ªª‰ΩïÂÖ∂‰ªñ‰ø°ÊÅØ„ÄÇ",
},
],
)
print("ÂìçÂ∫îÁöÑÁ±ªÂûã:", type(generator))
i = 0
async for chunk in generator:
print(f"Âùó {i}")
print(f"\tÁ±ªÂûã: {type(chunk.content)}")
print(f"\t{chunk}\n")
i += 1
asyncio.run(example_streaming())
# %%
# Êé®ÁêÜÊ®°Âûã
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope ÈÄöËøáÊèê‰æõ ``ThinkingBlock`` Êù•ÊîØÊåÅÊé®ÁêÜÊ®°Âûã„ÄÇ
#
async def example_reasoning() -> None:
"""‰ΩøÁî®Êé®ÁêÜÊ®°ÂûãÁöÑÁ§∫‰æã„ÄÇ"""
model = DashScopeChatModel(
model_name="qwen-turbo",
api_key=os.environ["DASHSCOPE_API_KEY"],
enable_thinking=True,
)
res = await model(
messages=[
{"role": "user", "content": "ÊàëÊòØË∞ÅÔºü"},
],
)
last_chunk = None
async for chunk in res:
last_chunk = chunk
print("ÊúÄÁªàÂìçÂ∫î:")
print(last_chunk)
asyncio.run(example_reasoning())
# %%
# Â∑•ÂÖ∑ API
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ‰∏çÂêåÁöÑÊ®°ÂûãÊèê‰æõÂïÜÂú®Â∑•ÂÖ∑ API ÊñπÈù¢ÊúâÊâÄ‰∏çÂêåÔºå‰æãÂ¶ÇÂ∑•ÂÖ∑ JSON schema„ÄÅÂ∑•ÂÖ∑Ë∞ÉÁî®/ÂìçÂ∫îÊ†ºÂºè„ÄÇ
# ‰∏∫‰∫ÜÊèê‰æõÁªü‰∏ÄÁöÑÊé•Âè£ÔºåAgentScope ÈÄöËøá‰ª•‰∏ãÊñπÂºèËß£ÂÜ≥‰∫ÜËøô‰∏™ÈóÆÈ¢òÔºö
#
# - Êèê‰æõ‰∫ÜÁªü‰∏ÄÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®ÁªìÊûÑ block :ref:`ToolUseBlock <tool-block>` ÂíåÂ∑•ÂÖ∑ÂìçÂ∫îÁªìÊûÑ :ref:`ToolResultBlock <tool-block>`„ÄÇ
# - Âú®Ê®°ÂûãÁ±ªÁöÑ ``__call__`` ÊñπÊ≥ï‰∏≠Êèê‰æõÁªü‰∏ÄÁöÑÂ∑•ÂÖ∑Êé•Âè£ ``tools``ÔºåÊé•ÂèóÂ∑•ÂÖ∑ JSON schema ÂàóË°®ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
#
json_schemas = [
{
"type": "function",
"function": {
"name": "google_search",
"description": "Âú® Google ‰∏äÊêúÁ¥¢Êü•ËØ¢„ÄÇ",
"parameters": {
"type": "object",
"properties": {
"query": {
"type": "string",
"description": "ÊêúÁ¥¢Êü•ËØ¢„ÄÇ",
},
},
"required": ["query"],
},
},
},
]
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - :ref:`message`
# - :ref:`prompt`
#
---- task_pipeline.py ----
# -*- coding: utf-8 -*-
"""
.. _pipeline:
ÁÆ°ÈÅì (Pipeline)
========================
ÂØπ‰∫éÂ§öÊô∫ËÉΩ‰ΩìÁºñÊéíÔºåAgentScope Êèê‰æõ‰∫Ü ``agentscope.pipeline`` Ê®°Âùó
‰Ωú‰∏∫Â∞ÜÊô∫ËÉΩ‰ΩìÈìæÊé•Âú®‰∏ÄËµ∑ÁöÑËØ≠Ê≥ïÁ≥ñÔºåÂÖ∑‰ΩìÂåÖÊã¨
- **MsgHub**: Áî®‰∫éÂ§ö‰∏™Êô∫ËÉΩ‰Ωì‰πãÈó¥Ê∂àÊÅØÁöÑÂπøÊí≠
- **sequential_pipeline** Âíå **SequentialPipeline**: ‰ª•È°∫Â∫èÊñπÂºèÊâßË°åÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÁöÑÂáΩÊï∞ÂºèÂíåÁ±ªÂºèÂÆûÁé∞
- **fanout_pipeline** Âíå **FanoutPipeline**: Â∞ÜÁõ∏ÂêåËæìÂÖ•ÂàÜÂèëÁªôÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÁöÑÂáΩÊï∞ÂºèÂíåÁ±ªÂºèÂÆûÁé∞
- **stream_printing_messages**: Â∞ÜÊô∫ËÉΩ‰ΩìÂú®ÂõûÂ§çËøáÁ®ã‰∏≠ÔºåË∞ÉÁî® ``self.print`` ÊâìÂç∞ÁöÑÊ∂àÊÅØËΩ¨Êç¢‰∏∫‰∏Ä‰∏™ÂºÇÊ≠•ÁîüÊàêÂô®
"""
import os, asyncio
from agentscope.formatter import DashScopeMultiAgentFormatter
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.agent import ReActAgent
from agentscope.pipeline import MsgHub, stream_printing_messages
# %%
# ‰ΩøÁî® MsgHub ËøõË°åÂπøÊí≠
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# ``MsgHub`` Á±ªÊòØ‰∏Ä‰∏™ **ÂºÇÊ≠•‰∏ä‰∏ãÊñáÁÆ°ÁêÜÂô®**ÔºåÂÆÉÊé•Êî∂‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìÂàóË°®‰Ωú‰∏∫ÂÖ∂ÂèÇ‰∏éËÄÖ„ÄÇ
# ÂΩì‰∏Ä‰∏™ÂèÇ‰∏éËÄÖÁîüÊàêÂõûÂ§çÊ∂àÊÅØÊó∂ÔºåÂ∞ÜÈÄöËøáË∞ÉÁî®ÊâÄÊúâÂÖ∂‰ªñÂèÇ‰∏éËÄÖÁöÑ ``observe`` ÊñπÊ≥ïÂπøÊí≠ËØ•Ê∂àÊÅØ„ÄÇ
# ËøôÊÑèÂë≥ÁùÄÂú® ``MsgHub`` ‰∏ä‰∏ãÊñá‰∏≠ÔºåÂºÄÂèëËÄÖÊó†ÈúÄÊâãÂä®Â∞ÜÂõûÂ§çÊ∂àÊÅØ‰ªé‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìÂèëÈÄÅÂà∞Âè¶‰∏Ä‰∏™Êô∫ËÉΩ‰Ωì„ÄÇ
#
# ËøôÈáåÊàë‰ª¨ÂàõÂª∫Âõõ‰∏™Êô∫ËÉΩ‰ΩìÔºöAlice„ÄÅBob„ÄÅCharlie Âíå David„ÄÇ
# ÁÑ∂ÂêéÊàë‰ª¨ËÆ© Alice„ÄÅBob Âíå Charlie ÈÄöËøáËá™Êàë‰ªãÁªçÂºÄÂßã‰∏Ä‰∏™‰ºöËÆÆ„ÄÇÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØ David Ê≤°ÊúâÂåÖÂê´Âú®Ëøô‰∏™‰ºöËÆÆ‰∏≠„ÄÇ
#
def create_agent(name: str, age: int, career: str) -> ReActAgent:
"""Ê†πÊçÆÁªôÂÆö‰ø°ÊÅØÂàõÂª∫Êô∫ËÉΩ‰ΩìÂØπË±°„ÄÇ"""
return ReActAgent(
name=name,
sys_prompt=f"‰Ω†ÊòØ{name}Ôºå‰∏Ä‰∏™{age}Â≤ÅÁöÑ{career}",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
),
formatter=DashScopeMultiAgentFormatter(),
)
alice = create_agent("Alice", 50, "ËÄÅÂ∏à")
bob = create_agent("Bob", 35, "Â∑•Á®ãÂ∏à")
charlie = create_agent("Charlie", 28, "ËÆæËÆ°Â∏à")
david = create_agent("David", 30, "ÂºÄÂèëËÄÖ")
# %%
# ÁÑ∂ÂêéÊàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™ ``MsgHub`` ‰∏ä‰∏ãÊñáÔºåÂπ∂ËÆ©‰ªñ‰ª¨Ëá™Êàë‰ªãÁªç:
#
# .. hint:: ``announcement`` ‰∏≠ÁöÑÊ∂àÊÅØÂ∞ÜÂú®ËøõÂÖ• ``MsgHub`` ‰∏ä‰∏ãÊñáÊó∂ÂπøÊí≠ÁªôÊâÄÊúâÂèÇ‰∏éËÄÖ„ÄÇ
#
async def example_broadcast_message():
"""‰ΩøÁî® MsgHub ÂπøÊí≠Ê∂àÊÅØÁöÑÁ§∫‰æã„ÄÇ"""
# ÂàõÂª∫Ê∂àÊÅØ‰∏≠ÂøÉ
async with MsgHub(
participants=[alice, bob, charlie],
announcement=Msg(
"user",
"Áé∞Âú®ËØ∑ÁÆÄË¶Å‰ªãÁªç‰∏Ä‰∏ãËá™Â∑±ÔºåÂåÖÊã¨‰Ω†ÁöÑÂßìÂêç„ÄÅÂπ¥ÈæÑÂíåËÅå‰∏ö„ÄÇ",
"user",
),
) as hub:
# Êó†ÈúÄÊâãÂä®Ê∂àÊÅØ‰º†ÈÄíÁöÑÁæ§ËÅä
await alice()
await bob()
await charlie()
asyncio.run(example_broadcast_message())
# %%
# Áé∞Âú®ËÆ©Êàë‰ª¨Ê£ÄÊü• Bob„ÄÅCharlie Âíå David ÊòØÂê¶Êî∂Âà∞‰∫Ü Alice ÁöÑÊ∂àÊÅØ„ÄÇ
#
async def check_broadcast_message():
"""Ê£ÄÊü•Ê∂àÊÅØÊòØÂê¶Ê≠£Á°ÆÂπøÊí≠„ÄÇ"""
user_msg = Msg(
"user",
"‰Ω†Áü•ÈÅì Alice ÊòØË∞ÅÂêóÔºåÂ•πÊòØÂÅö‰ªÄ‰πàÁöÑÔºü",
"user",
)
await bob(user_msg)
await charlie(user_msg)
await david(user_msg)
asyncio.run(check_broadcast_message())
# %%
# Áé∞Âú®Êàë‰ª¨ËßÇÂØüÂà∞ Bob Âíå Charlie Áü•ÈÅì Alice ÂíåÂ•πÁöÑËÅå‰∏öÔºåËÄå David ÂØπ
# Alice ‰∏ÄÊó†ÊâÄÁü•ÔºåÂõ†‰∏∫‰ªñÊ≤°ÊúâÂåÖÂê´Âú® ``MsgHub`` ‰∏ä‰∏ãÊñá‰∏≠„ÄÇ
#
#
# Âä®ÊÄÅÁÆ°ÁêÜ
# ---------------------------
# Ê≠§Â§ñÔºå``MsgHub`` ÊîØÊåÅÈÄöËøá‰ª•‰∏ãÊñπÊ≥ïÂä®ÊÄÅÁÆ°ÁêÜÂèÇ‰∏éËÄÖÔºö
#
# - ``add``: Ê∑ªÂä†‰∏Ä‰∏™ÊàñÂ§ö‰∏™Êô∫ËÉΩ‰Ωì‰Ωú‰∏∫Êñ∞ÂèÇ‰∏éËÄÖ
# - ``delete``: ‰ªéÂèÇ‰∏éËÄÖ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÊàñÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÔºå‰ªñ‰ª¨Â∞Ü‰∏çÂÜçÊé•Êî∂ÂπøÊí≠Ê∂àÊÅØ
# - ``broadcast``: ÂêëÊâÄÊúâÂΩìÂâçÂèÇ‰∏éËÄÖÂπøÊí≠Ê∂àÊÅØ
#
# .. note:: Êñ∞Ê∑ªÂä†ÁöÑÂèÇ‰∏éËÄÖ‰∏ç‰ºöÊé•Êî∂Âà∞‰πãÂâçÁöÑÊ∂àÊÅØ„ÄÇ
#
# .. code-block:: python
#
# async with MsgHub(participants=[alice]) as hub:
# # Ê∑ªÂä†Êñ∞ÂèÇ‰∏éËÄÖ
# hub.add(david)
#
# # ÁßªÈô§ÂèÇ‰∏éËÄÖ
# hub.delete(alice)
#
# # ÂêëÊâÄÊúâÂΩìÂâçÂèÇ‰∏éËÄÖÂπøÊí≠
# await hub.broadcast(
# Msg("system", "Áé∞Âú®Êàë‰ª¨ÂºÄÂßã...", "system"),
# )
#
#
# ÁÆ°ÈÅì
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ÁÆ°ÈÅìÊòØ AgentScope ‰∏≠Â§öÊô∫ËÉΩ‰ΩìÁºñÊéíÁöÑ‰∏ÄÁßçËØ≠Ê≥ïÁ≥ñ„ÄÇ
#
# ÁõÆÂâçÔºåAgentScope Êèê‰æõ‰∏âÁßçÁÆ°ÈÅìÔºåÁî®‰∫éÂáèËΩªÂºÄÂèëËÄÖÁöÑË¥üÊãÖÔºö
#
# 1. **È°∫Â∫èÁÆ°ÈÅì (Sequential Pipeline)**: ÊåâÈ¢ÑÂÆö‰πâÈ°∫Â∫èÈÄê‰∏™ÊâßË°åÊô∫ËÉΩ‰Ωì
# 2. **ÊâáÂá∫ÁÆ°ÈÅì (Fanout Pipeline)**: Â∞ÜÁõ∏ÂêåËæìÂÖ•ÂàÜÂèëÁªôÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÂπ∂Êî∂ÈõÜÂÆÉ‰ª¨ÁöÑÂìçÂ∫î
# 3. **ÊµÅÂºèËé∑ÂèñÊâìÂç∞Ê∂àÊÅØ (stream printing messages)**: Â∞ÜÊô∫ËÉΩ‰ΩìÂú®ÂõûÂ§çËøáÁ®ã‰∏≠ÔºåË∞ÉÁî® ``self.print`` ÊâìÂç∞ÁöÑÊ∂àÊÅØËΩ¨Êç¢‰∏∫‰∏Ä‰∏™ÂºÇÊ≠•ÁîüÊàêÂô®
#
# È°∫Â∫èÁÆ°ÈÅì
# ------------------------
# È°∫Â∫èÁÆ°ÈÅìÈÄê‰∏™ÊâßË°åÊô∫ËÉΩ‰ΩìÔºåÂâç‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìÁöÑËæìÂá∫Êàê‰∏∫‰∏ã‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìÁöÑËæìÂÖ•„ÄÇ
#
# ‰æãÂ¶ÇÔºå‰ª•‰∏ã‰∏§‰∏™‰ª£Á†ÅÁâáÊÆµÊòØÁ≠â‰ª∑ÁöÑÔºö
#
# .. code-block:: python
# :caption: ‰ª£Á†ÅÁâáÊÆµ 1: ÊâãÂä®Ê∂àÊÅØ‰º†ÈÄí
#
# msg = None
# msg = await alice(msg)
# msg = await bob(msg)
# msg = await charlie(msg)
# msg = await david(msg)
#
#
# .. code-block:: python
# :caption: ‰ª£Á†ÅÁâáÊÆµ 2: ‰ΩøÁî®È°∫Â∫èÁÆ°ÈÅì
#
# from agentscope.pipeline import sequential_pipeline
#
# msg = await sequential_pipeline(
# # ÊåâÈ°∫Â∫èÊâßË°åÁöÑÊô∫ËÉΩ‰ΩìÂàóË°®
# agents=[alice, bob, charlie, david],
# # Á¨¨‰∏Ä‰∏™ËæìÂÖ•Ê∂àÊÅØÔºåÂèØ‰ª•ÊòØ None
# msg=None
# )
#
# %%
# ÊâáÂá∫ÁÆ°ÈÅì
# ------------------------
# ÊâáÂá∫ÁÆ°ÈÅìÂ∞ÜÁõ∏ÂêåÁöÑËæìÂÖ•Ê∂àÊÅØÂêåÊó∂ÂàÜÂèëÁªôÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÂπ∂Êî∂ÈõÜÊâÄÊúâÂìçÂ∫î„ÄÇÂΩì‰Ω†ÊÉ≥Ë¶ÅÊî∂ÈõÜÂØπÂêå‰∏ÄËØùÈ¢òÁöÑ‰∏çÂêåËßÇÁÇπÊàñ‰∏ì‰∏öÊÑèËßÅÊó∂ÔºåËøôÈùûÂ∏∏ÊúâÁî®„ÄÇ
#
# ‰æãÂ¶ÇÔºå‰ª•‰∏ã‰∏§‰∏™‰ª£Á†ÅÁâáÊÆµÊòØÁ≠â‰ª∑ÁöÑÔºö
#
# .. code-block:: python
# :caption: ‰ª£Á†ÅÁâáÊÆµ 3: ÊâãÂä®ÈÄê‰∏™Ë∞ÉÁî®Êô∫ËÉΩ‰Ωì
#
# from copy import deepcopy
#
# msgs = []
# msg = None
# for agent in [alice, bob, charlie, david]:
# msgs.append(await agent(deepcopy(msg)))
#
#
# .. code-block:: python
# :caption: ‰ª£Á†ÅÁâáÊÆµ 4: ‰ΩøÁî®ÊâáÂá∫ÁÆ°ÈÅì
#
# from agentscope.pipeline import fanout_pipeline
#
# msgs = await fanout_pipeline(
# # Ë¶ÅÊâßË°åÁöÑÊô∫ËÉΩ‰ΩìÂàóË°®
# agents=[alice, bob, charlie, david],
# # ËæìÂÖ•Ê∂àÊÅØÔºåÂèØ‰ª•ÊòØ None
# msg=None,
# enable_gather=False,
# )
#
# .. note::
# ``enable_gather`` ÂèÇÊï∞ÊéßÂà∂ÊâáÂá∫ÁÆ°ÈÅìÁöÑÊâßË°åÊ®°ÂºèÔºö
#
# - ``enable_gather=True`` (ÈªòËÆ§): ‰ΩøÁî® ``asyncio.gather()`` **Âπ∂Âèë** ÊâßË°åÊâÄÊúâÊô∫ËÉΩ‰Ωì„ÄÇËøô‰∏∫ I/O ÂØÜÈõÜÂûãÊìç‰ΩúÔºàÂ¶Ç API Ë∞ÉÁî®ÔºâÊèê‰æõÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåÂõ†‰∏∫Êô∫ËÉΩ‰ΩìÂπ∂Ë°åËøêË°å„ÄÇ
# - ``enable_gather=False``: ÈÄê‰∏™ **È°∫Â∫è** ÊâßË°åÊô∫ËÉΩ‰Ωì„ÄÇÂΩì‰Ω†ÈúÄË¶ÅÁ°ÆÂÆöÊÄßÁöÑÊâßË°åÈ°∫Â∫èÊàñÊÉ≥Ë¶ÅÈÅøÂÖçÂπ∂ÂèëËØ∑Ê±ÇÂéãÂûÆÂ§ñÈÉ®ÊúçÂä°Êó∂ÔºåËøôÂæàÊúâÁî®„ÄÇ
#
# ÈÄâÊã©Âπ∂ÂèëÊâßË°å‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºåÊàñÈÄâÊã©È°∫Â∫èÊâßË°å‰ª•Ëé∑ÂæóÂèØÈ¢ÑÊµãÁöÑÈ°∫Â∫èÂíåËµÑÊ∫êÊéßÂà∂„ÄÇ
#
# .. tip::
# ÈÄöËøáÁªìÂêà ``MsgHub`` Âíå ``sequential_pipeline`` Êàñ ``fanout_pipeline``Ôºå‰Ω†ÂèØ‰ª•ÈùûÂ∏∏ÂÆπÊòìÂú∞ÂàõÂª∫Êõ¥Â§çÊùÇÁöÑÂ∑•‰ΩúÊµÅ„ÄÇ
# %%
# ÊµÅÂºèËé∑ÂèñÊâìÂç∞Ê∂àÊÅØ
# ------------------------
# ``stream_printing_messages`` ÂáΩÊï∞Â∞ÜÊô∫ËÉΩ‰ΩìÂú®ÂõûÂ§çËøáÁ®ã‰∏≠Ë∞ÉÁî® ``self.print`` ÊâìÂç∞ÁöÑÊ∂àÊÅØËΩ¨Êç¢‰∏∫‰∏Ä‰∏™ÂºÇÊ≠•ÁîüÊàêÂô®„ÄÇ
# ÂèØ‰ª•Â∏ÆÂä©ÂºÄÂèëËÄÖÂø´ÈÄü‰ª•ÊµÅÂºèÊñπÂºèËé∑ÂèñÊô∫ËÉΩ‰ΩìÁöÑ‰∏≠Èó¥Ê∂àÊÅØ„ÄÇ
#
# ËØ•ÂáΩÊï∞Êé•Âèó‰∏Ä‰∏™ÊàñÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÂíå‰∏Ä‰∏™ÂçèÁ®ã‰ªªÂä°‰Ωú‰∏∫ËæìÂÖ•ÔºåÂπ∂ËøîÂõû‰∏Ä‰∏™ÂºÇÊ≠•ÁîüÊàêÂô®„ÄÇ
# ËØ•ÂºÇÊ≠•ÁîüÊàêÂô®ËøîÂõû‰∏Ä‰∏™‰∫åÂÖÉÁªÑÔºåÂåÖÂê´ÊâßË°åÂçèÁ®ã‰ªªÂä°ËøáÁ®ã‰∏≠ÈÄöËøá ``await self.print(...)`` ÊâìÂç∞ÁöÑÊ∂àÊÅØÔºå‰ª•Âèä‰∏Ä‰∏™Â∏ÉÂ∞îÂÄºÔºåË°®Á§∫ËØ•Ê∂àÊÅØÊòØÂê¶‰∏∫‰∏ÄÁªÑÊµÅÂºèÊ∂àÊÅØ‰∏≠ÁöÑÊúÄÂêé‰∏Ä‰∏™„ÄÇ
#
# ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÁîüÊàêÂô®ËøîÂõûÁöÑÂÖÉÁªÑ‰∏≠ÔºåÂ∏ÉÂ∞îÂÄºË°®Á§∫ËØ•Ê∂àÊÅØÊòØÂê¶‰∏∫‰∏ÄÁªÑÊµÅÂºèÊ∂àÊÅØ‰∏≠ÁöÑÊúÄÂêé‰∏Ä‰∏™ÔºåËÄåÈùûÊ≠§Ê¨°Êô∫ËÉΩ‰ΩìË∞ÉÁî®ÁöÑÊúÄÂêé‰∏ÄÊù°Ê∂àÊÅØ„ÄÇ
async def run_example_pipeline() -> None:
"""ËøêË°åÊµÅÂºèÊâìÂç∞Ê∂àÊÅØÁöÑÁ§∫‰æã„ÄÇ"""
agent = create_agent("Alice", 20, "student")
# Êàë‰ª¨ÂÖ≥Èó≠agentÁöÑÁªàÁ´ØÊâìÂç∞‰ª•ÈÅøÂÖçËæìÂá∫Ê∑∑‰π±
agent.set_console_output_enabled(False)
async for msg, last in stream_printing_messages(
agents=[agent],
coroutine_task=agent(
Msg("user", "‰Ω†Â•ΩÔºå‰Ω†ÊòØË∞ÅÔºü", "user"),
),
):
print(msg, last)
if last:
print()
asyncio.run(run_example_pipeline())
# %%
# È´òÁ∫ßÁÆ°ÈÅìÁâπÊÄß
# ~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Ê≠§Â§ñÔºå‰∏∫‰∫ÜÂèØÈáçÁî®ÊÄßÔºåÊàë‰ª¨ËøòÊèê‰æõ‰∫ÜÂü∫‰∫éÁ±ªÁöÑÂÆûÁé∞Ôºö
#
# .. code-block:: python
# :caption: ‰ΩøÁî® SequentialPipeline Á±ª
#
# from agentscope.pipeline import SequentialPipeline
#
# # ÂàõÂª∫ÁÆ°ÈÅìÂØπË±°
# pipeline = SequentialPipeline(agents=[alice, bob, charlie, david])
#
# # Ë∞ÉÁî®ÁÆ°ÈÅì
# msg = await pipeline(msg=None)
#
# # ‰ΩøÁî®‰∏çÂêåËæìÂÖ•Â§çÁî®ÁÆ°ÈÅì
# msg = await pipeline(msg=Msg("user", "‰Ω†Â•ΩÔºÅ", "user"))
#
#
# .. code-block:: python
# :caption: ‰ΩøÁî® FanoutPipeline Á±ª
#
# from agentscope.pipeline import FanoutPipeline
#
# # ÂàõÂª∫ÁÆ°ÈÅìÂØπË±°
# pipeline = FanoutPipeline(agents=[alice, bob, charlie, david])
#
# # Ë∞ÉÁî®ÁÆ°ÈÅì
# msgs = await pipeline(msg=None)
#
# # ‰ΩøÁî®‰∏çÂêåËæìÂÖ•Â§çÁî®ÁÆ°ÈÅì
# msgs = await pipeline(msg=Msg("user", "‰Ω†Â•ΩÔºÅ", "user"))
#
---- task_plan.py ----
# -*- coding: utf-8 -*-
"""
.. _plan:
ËÆ°Âàí
=========================
AgentScope ‰∏≠ÁöÑËÆ°ÂàíÔºàPlanÔºâÊ®°Âùó‰ΩøÊô∫ËÉΩ‰ΩìËÉΩÂ§üÊ≠£ÂºèÂú∞Â∞ÜÂ§çÊùÇ‰ªªÂä°ÂàÜËß£‰∏∫ÂèØÁÆ°ÁêÜÁöÑÂ≠ê‰ªªÂä°Âπ∂Á≥ªÁªüÂú∞ÊâßË°åÂÆÉ‰ª¨„ÄÇ‰∏ªË¶ÅÂäüËÉΩÂåÖÊã¨Ôºö
- ÊîØÊåÅ **ÊâãÂä®ËÆ°ÂàíËßÑËåÉ**
- ÂÖ®Èù¢ÁöÑËÆ°ÂàíÁÆ°ÁêÜÂäüËÉΩÔºö
- **ÂàõÂª∫„ÄÅ‰øÆÊîπ„ÄÅÊîæÂºÉÂíåÊÅ¢Â§ç** ËÆ°Âàí
- Âú®Â§ö‰∏™ËÆ°Âàí‰πãÈó¥ **ÂàáÊç¢**
- ÈÄöËøá‰∏¥Êó∂ÊöÇÂÅúËÆ°ÂàíÊù•Â§ÑÁêÜÁî®Êà∑Êü•ËØ¢ÊàñÁ¥ßÊÄ•‰ªªÂä°Ôºå**‰ºòÈõÖÂú∞Â§ÑÁêÜ‰∏≠Êñ≠**
- ËÆ°ÂàíÊâßË°åÁöÑ **ÂÆûÊó∂ÂèØËßÜÂåñÂíåÁõëÊéß**
.. note:: ÂΩìÂâçËÆ°ÂàíÊ®°Âùó‰ªÖÊîØÊåÅÂ≠ê‰ªªÂä°ÊåâÁÖßÈ°∫Â∫èÊâßË°å„ÄÇ
ÂÖ∑‰ΩìÊù•ËØ¥ÔºåËÆ°ÂàíÊ®°ÂùóÁöÑÂ∑•‰ΩúÂéüÁêÜÊòØ
- Êèê‰æõËÆ°ÂàíÁÆ°ÁêÜÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
- ÊèíÂÖ•ÊèêÁ§∫Ê∂àÊÅØÊù•ÊåáÂØºReActÊô∫ËÉΩ‰ΩìÂÆåÊàêËÆ°Âàí
‰∏ãÂõæËØ¥Êòé‰∫ÜËÆ°ÂàíÊ®°ÂùóÂ¶Ç‰Ωï‰∏éReActÊô∫ËÉΩ‰ΩìÂçè‰ΩúÔºö
.. figure:: ../../_static/images/plan.png
:width: 90%
:alt: ËÆ°ÂàíÊ®°Âùó
:class: bordered-image
:align: center
ËÆ°ÂàíÊ®°ÂùóÂ¶Ç‰Ωï‰∏éReActÊô∫ËÉΩ‰ΩìÂçè‰Ωú
"""
import asyncio
import os
from agentscope.agent import ReActAgent
from agentscope.formatter import DashScopeChatFormatter
from agentscope.model import DashScopeChatModel
from agentscope.plan import PlanNotebook, Plan, SubTask
# %%
# PlanNotebook
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# ``PlanNotebook`` Á±ªÊòØËÆ°ÂàíÊ®°ÂùóÁöÑÊ†∏ÂøÉÔºåË¥üË¥£Êèê‰æõ
#
# - ÁÆ°ÁêÜËÆ°ÂàíÔºåÂ≠ê‰ªªÂä°ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
# - Êèê‰æõÁî®‰∫é‚ÄúÂºïÂØºÊô∫ËÉΩ‰ΩìÊ≠£Á°ÆÂÆåÊàê‰ªªÂä°‚ÄùÁöÑÊèêÁ§∫Ê∂àÊÅØÔºàHint messageÔºâ
#
# ``PlanNotebook`` Á±ª‰ΩøÁî®‰ª•‰∏ãÂèÇÊï∞ÂÆû‰æãÂåñÔºö
#
# .. list-table:: ``PlanNotebook`` ÊûÑÈÄ†ÂáΩÊï∞ÁöÑÂèÇÊï∞
# :header-rows: 1
#
# * - ÂêçÁß∞
# - Á±ªÂûã
# - ÊèèËø∞
# * - ``max_subtasks``
# - ``int | None``
# - ËÆ°Âàí‰∏≠ÂÖÅËÆ∏ÁöÑÂ≠ê‰ªªÂä°ÊúÄÂ§ßÊï∞ÈáèÔºåÂ¶ÇÊûú‰∏∫ ``None`` ÂàôÊó†ÈôêÂà∂
# * - ``plan_to_hint``
# - ``Callable[[Plan | None], str | None] | None``
# - Âü∫‰∫éÂΩìÂâçËÆ°ÂàíÁöÑÂÆåÊàêÊÉÖÂÜµÔºåÁîüÊàêÂØπÂ∫îÊèêÁ§∫Ê∂àÊÅØÁöÑÂáΩÊï∞„ÄÇÂ¶ÇÊûúÊú™Êèê‰æõÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§ÁöÑ ``DefaultPlanToHint`` ÂØπË±°„ÄÇ
# * - ``storage``
# - ``PlanStorageBase | None``
# - ËÆ°ÂàíÁöÑÂ≠òÂÇ®Ê®°ÂùóÔºåÁî®‰∫éÊÅ¢Â§çÔºå‰øùÂ≠òÂéÜÂè≤ËÆ°Âàí„ÄÇÂ¶ÇÊûúÊú™Êèê‰æõÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§ÁöÑÂÜÖÂ≠òÔºàIn-memoryÔºâÂ≠òÂÇ®„ÄÇ
#
# ``plan_to_hint`` ÂèÇÊï∞ÊòØ ``PlanNotebook`` Á±ªÁöÑÊ†∏ÂøÉÂèÇÊï∞Ôºå‰πüÊòØÂºÄÂèëËÄÖËøõË°åÊèêÁ§∫Â∑•Á®ãÁöÑÊé•Âè£„ÄÇ
# ‰Ωú‰∏∫ÂèØË∞ÉÁî®ÂØπË±°ÔºåÊé•ÂèóÂΩìÂâçËÆ°Âàí‰Ωú‰∏∫ËæìÂÖ•ÔºåÂπ∂ËøîÂõû‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Á±ªÂûãÁöÑÊèêÁ§∫Ê∂àÊÅØ„ÄÇ
# AgentScope ÊûÑÂª∫‰∫Ü‰∏Ä‰∏™ÈªòËÆ§ÁöÑ ``DefaultPlanToHint`` Á±ªÔºåÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®ÔºåÂêåÊó∂Êàë‰ª¨ÈºìÂä±ÂºÄÂèëËÄÖÊèê‰æõËá™Â∑±ÁöÑ ``plan_to_hint`` ÂáΩÊï∞‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊÄßËÉΩ„ÄÇ
#
# ``storage`` Áî®‰∫éÂ≠òÂÇ®ÂéÜÂè≤ËÆ°ÂàíÔºåÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìÊ£ÄÁ¥¢ÂíåÊÅ¢Â§çÂéÜÂè≤ËÆ°Âàí„ÄÇ
# Êàë‰ª¨ÂêåÊ†∑ÈºìÂä±ÂºÄÂèëËÄÖÈÄöËøáÁªßÊâø ``PlanStorageBase`` Á±ªÊù•ÂÆûÁé∞Ëá™Â∑±ÁöÑËÆ°ÂàíÂ≠òÂÇ®„ÄÇÂ¶ÇÊûúÊú™Êèê‰æõÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§ÁöÑÂÜÖÂ≠òÂ≠òÂÇ®„ÄÇ
#
# .. tip:: ``PlanStorageBase`` Á±ªÁªßÊâøËá™ ``StateModule`` Á±ªÔºåÂõ†Ê≠§ storage‰πü‰ºöÈÄöËøá‰ºöËØùÁÆ°ÁêÜËøõË°å‰øùÂ≠òÂíåÂä†ËΩΩ„ÄÇ
#
# ``PlanNotebook`` Á±ªÁöÑÊ†∏ÂøÉÂ±ûÊÄßÂíåÊñπÊ≥ïÊÄªÁªìÂ¶Ç‰∏ãÔºö
#
# .. list-table:: ``PlanNotebook`` Á±ªÁöÑÊ†∏ÂøÉÂ±ûÊÄßÂíåÊñπÊ≥ï
# :header-rows: 1
#
# * - Á±ªÂûã
# - ÂêçÁß∞
# - ÊèèËø∞
# * - Â±ûÊÄß
# - ``current_plan``
# - Êô∫ËÉΩ‰ΩìÊ≠£Âú®ÊâßË°åÁöÑÂΩìÂâçËÆ°Âàí
# * -
# - ``storage``
# - ÂéÜÂè≤ËÆ°ÂàíÁöÑÂ≠òÂÇ®ÔºåÁî®‰∫éÊ£ÄÁ¥¢ÂíåÊÅ¢Â§çÂéÜÂè≤ËÆ°Âàí
# * -
# - ``plan_to_hint``
# - ‰∏Ä‰∏™ÂèØË∞ÉÁî®ÂØπË±°Ôºå‰ª•ÂΩìÂâçËÆ°Âàí‰∏∫ËæìÂÖ•Âπ∂ÁîüÊàêÊèêÁ§∫Ê∂àÊÅØÊù•ÊåáÂØºÊô∫ËÉΩ‰ΩìÂÆåÊàêËÆ°Âàí
# * - ÂáΩÊï∞
# - ``list_tools``
# - ÂàóÂá∫ ``PlanNotebook`` Á±ªÊèê‰æõÁöÑÊâÄÊúâÂ∑•ÂÖ∑ÂáΩÊï∞
# * -
# - ``get_current_hint``
# - Ëé∑ÂèñÂΩìÂâçËÆ°ÂàíÁöÑÊèêÁ§∫Ê∂àÊÅØÔºåÂ∞ÜË∞ÉÁî® ``plan_to_hint`` ÂáΩÊï∞
# * -
# - | ``create_plan``,
# | ``view_subtasks``,
# | ``revise_current_plan``,
# | ``update_subtask_state``,
# | ``finish_subtask``,
# | ``finish_plan``,
# | ``view_historical_plans``,
# | ``recover_historical_plan``
# - ÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìÁÆ°ÁêÜËÆ°ÂàíÂíåÂ≠ê‰ªªÂä°ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
# * -
# - ``register_plan_change_hook``
# - Ê≥®ÂÜå‰∏Ä‰∏™Èí©Â≠êÂáΩÊï∞ÔºåÂΩìËÆ°ÂàíÂèëÁîüÂèòÂåñÊó∂Â∞ÜË¢´Ë∞ÉÁî®ÔºåÁî®‰∫éËÆ°ÂàíÂèØËßÜÂåñÂíåÁõëÊéß
# * -
# - ``remove_plan_change_hook``
# - ÁßªÈô§Â∑≤Ê≥®ÂÜåÁöÑÈí©Â≠êÂáΩÊï∞
#
# ``list_tools`` ÊñπÊ≥ïÊòØËé∑ÂèñÊâÄÊúâÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑÂø´ÈÄüÊñπÊ≥ïÔºåËøôÊ†∑ÊÇ®Â∞±ÂèØ‰ª•Â∞ÜÂÆÉ‰ª¨Ê≥®ÂÜåÂà∞Êô∫ËÉΩ‰ΩìÁöÑÂ∑•ÂÖ∑ÂåÖ‰∏≠„ÄÇ
plan_notebook = PlanNotebook()
async def list_tools() -> None:
"""ÂàóÂá∫PlanNotebookÊèê‰æõÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ"""
print("PlanNotebookÊèê‰æõÁöÑÂ∑•ÂÖ∑Ôºö")
for tool in plan_notebook.list_tools():
print(tool.__name__)
asyncio.run(list_tools())
# %%
# ‰∏éReActAgentÂçè‰Ωú
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope‰∏≠ÁöÑ ``ReActAgent`` Â∑≤ÈÄöËøáÊûÑÈÄ†ÂáΩÊï∞‰∏≠ÁöÑ ``plan_notebook`` ÂèÇÊï∞ÈõÜÊàê‰∫ÜËÆ°ÂàíÊ®°Âùó„ÄÇ
# ‰∏ÄÊó¶Êèê‰æõÔºåÊô∫ËÉΩ‰ΩìÂ∞Ü
#
# - ÈÖçÂ§áËÆ°ÂàíÁÆ°ÁêÜÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåÂπ∂‰∏î
# - Âú®ÊØè‰∏™Êé®ÁêÜÊ≠•È™§ÂºÄÂßãÊó∂ÊèíÂÖ•ÊèêÁ§∫Ê∂àÊÅØ
#
# Êúâ‰∏§ÁßçÊñπÂºèÂú® ``ReActAgent`` ‰∏≠‰ΩøÁî®ËÆ°ÂàíÊ®°ÂùóÔºö
#
# - ÂºÄÂèëËÄÖÊåáÂÆöËÆ°ÂàíÔºöÂºÄÂèëËÄÖÂèØ‰ª•ÈÄöËøáË∞ÉÁî® ``create_plan`` Â∑•ÂÖ∑ÂáΩÊï∞ÊâãÂä®ÂàõÂª∫ËÆ°ÂàíÔºåÂπ∂‰ΩøÁî®ËØ•ËÆ°ÂàíÊù•ÂàùÂßãÂåñ ``ReActAgent`` „ÄÇ
# - Êô∫ËÉΩ‰ΩìÁÆ°ÁêÜÁöÑËÆ°ÂàíÊâßË°åÔºöÊô∫ËÉΩ‰ΩìÂ∞ÜÈÄöËøáË∞ÉÁî®ËÆ°ÂàíÁÆ°ÁêÜÂ∑•ÂÖ∑ÂáΩÊï∞Ëá™Â∑±ÂàõÂª∫ÂíåÁÆ°ÁêÜËÆ°Âàí„ÄÇ
#
# ÊâãÂä®ËÆ°ÂàíËßÑËåÉ
# ---------------------------------
# ÈÄöËøáË∞ÉÁî® ``create_plan`` Â∑•ÂÖ∑ÂáΩÊï∞ÊâãÂä®ÂàõÂª∫ËÆ°ÂàíÈùûÂ∏∏ÁÆÄÂçï„ÄÇ
# ‰ª•‰∏ãÊòØÊâãÂä®ÂàõÂª∫ËÆ°Âàí‰ª•ÂØπLLMËµãËÉΩÁöÑÊô∫ËÉΩ‰ΩìËøõË°åÂÖ®Èù¢Á†îÁ©∂ÁöÑÁ§∫‰æã„ÄÇ
#
async def manual_plan_specification() -> None:
"""ÊâãÂä®ËÆ°ÂàíËßÑËåÉÁ§∫‰æã„ÄÇ"""
await plan_notebook.create_plan(
name="Êô∫ËÉΩ‰ΩìÁ†îÁ©∂",
description="ÂØπÂü∫‰∫éLLMÁöÑÊô∫ËÉΩ‰ΩìËøõË°åÂÖ®Èù¢Á†îÁ©∂",
expected_outcome="‰∏Ä‰ªΩMarkdownÊ†ºÂºèÁöÑÊä•ÂëäÔºåÂõûÁ≠î‰∏â‰∏™ÈóÆÈ¢òÔºö1. ‰ªÄ‰πàÊòØÊô∫ËÉΩ‰ΩìÔºü2. Êô∫ËÉΩ‰ΩìÁöÑÂΩìÂâçÊäÄÊúØÊ∞¥Âπ≥ÊòØ‰ªÄ‰πàÔºü3. Êô∫ËÉΩ‰ΩìÁöÑÊú™Êù•Ë∂ãÂäøÊòØ‰ªÄ‰πàÔºü",
subtasks=[
SubTask(
name="ÊêúÁ¥¢Êô∫ËÉΩ‰ΩìÁõ∏ÂÖ≥Ë∞ÉÁ†îËÆ∫Êñá",
description=(
"Âú®Â§ö‰∏™Êù•Ê∫êÊêúÁ¥¢Ë∞ÉÁ†îËÆ∫ÊñáÔºåÂåÖÊã¨"
"Google Scholar„ÄÅarXivÂíåSemantic Scholar„ÄÇÂøÖÈ°ª"
"Âú®2021Âπ¥ÂêéÂèëË°®‰∏îÂºïÁî®Êï∞Ë∂ÖËøá50„ÄÇ"
),
expected_outcome="MarkdownÊ†ºÂºèÁöÑËÆ∫ÊñáÂàóË°®",
),
SubTask(
name="ÈòÖËØªÂíåÊÄªÁªìËÆ∫Êñá",
description="ÈòÖËØªÂâç‰∏ÄÊ≠•ÊâæÂà∞ÁöÑËÆ∫ÊñáÔºåÂπ∂ÊÄªÁªìÂÖ≥ÈîÆÁÇπÔºåÂåÖÊã¨ÂÆö‰πâ„ÄÅÂàÜÁ±ª„ÄÅÊåëÊàòÂíåÂÖ≥ÈîÆÊñπÂêë„ÄÇ",
expected_outcome="MarkdownÊ†ºÂºèÁöÑÂÖ≥ÈîÆÁÇπÊÄªÁªì",
),
SubTask(
name="Á†îÁ©∂Â§ßÂÖ¨Âè∏ÁöÑÊúÄÊñ∞ËøõÂ±ï",
description=(
"Á†îÁ©∂Â§ßÂÖ¨Âè∏ÁöÑÊúÄÊñ∞ËøõÂ±ïÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éGoogle„ÄÅMicrosoft„ÄÅOpenAI„ÄÅ"
"Anthropic„ÄÅÈòøÈáåÂ∑¥Â∑¥ÂíåMeta„ÄÇÊü•ÊâæÂÆòÊñπÂçöÂÆ¢ÊàñÊñ∞ÈóªÊñáÁ´†„ÄÇ"
),
expected_outcome="Â§ßÂÖ¨Âè∏ÁöÑÊúÄÊñ∞ËøõÂ±ï",
),
SubTask(
name="Êí∞ÂÜôÊä•Âëä",
description="Âü∫‰∫éÂâçÈù¢ÁöÑÊ≠•È™§Êí∞ÂÜôÊä•ÂëäÔºåÂπ∂ÂõûÁ≠îÈ¢ÑÊúüÁªìÊûú‰∏≠ÁöÑ‰∏â‰∏™ÈóÆÈ¢ò„ÄÇ",
expected_outcome=(
"‰∏Ä‰ªΩMarkdownÊ†ºÂºèÁöÑÊä•ÂëäÔºåÂõûÁ≠î‰∏â‰∏™ÈóÆÈ¢òÔºö1. "
"‰ªÄ‰πàÊòØÊô∫ËÉΩ‰ΩìÔºü2. Êô∫ËÉΩ‰ΩìÁöÑÂΩìÂâçÊäÄÊúØÊ∞¥Âπ≥"
"ÊòØ‰ªÄ‰πàÔºü3. Êô∫ËÉΩ‰ΩìÁöÑÊú™Êù•Ë∂ãÂäøÊòØ‰ªÄ‰πàÔºü"
),
),
],
)
print("ÂΩìÂâçÊèêÁ§∫Ê∂àÊÅØÔºö\n")
msg = await plan_notebook.get_current_hint()
print(f"{msg.name}: {msg.content}")
asyncio.run(manual_plan_specification())
# %%
# ÂàõÂª∫ËÆ°ÂàíÂêéÔºåÂèØ‰ª•ÊåâÂ¶Ç‰∏ãÊñπÂºè‰ΩøÁî®ËÆ°ÂàíÁ¨îËÆ∞Êú¨ÂàùÂßãÂåñ ``ReActAgent`` Ôºö
agent = ReActAgent(
name="Friday",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™ÊúâÁî®ÁöÑÂä©Êâã„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
),
formatter=DashScopeChatFormatter(),
plan_notebook=plan_notebook,
)
# %%
# Êô∫ËÉΩ‰ΩìËá™‰∏ªÁÆ°ÁêÜ
# ---------------------------------
# Êô∫ËÉΩ‰Ωì‰πüÂèØ‰ª•ÈÄöËøáË∞ÉÁî®ËÆ°ÂàíÁÆ°ÁêÜÂ∑•ÂÖ∑ÂáΩÊï∞Ëá™Â∑±ÂàõÂª∫ÂíåÁÆ°ÁêÜËÆ°Âàí„ÄÇ
# Êàë‰ª¨Âè™ÈúÄË¶ÅÊåâÂ¶Ç‰∏ãÊñπÂºè‰ΩøÁî®ËÆ°ÂàíÁ¨îËÆ∞Êú¨ÂàùÂßãÂåñ ``ReActAgent`` Ôºö
#
agent = ReActAgent(
name="Friday",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™ÊúâÁî®ÁöÑÂä©Êâã„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
),
formatter=DashScopeChatFormatter(),
plan_notebook=PlanNotebook(),
)
# %%
# ‰πãÂêéÔºåÊàë‰ª¨ÂèØ‰ª•ÊûÑÂª∫‰∏Ä‰∏™Âæ™ÁéØÊù•‰∏éÊô∫ËÉΩ‰Ωì‰∫§‰∫íÔºåÂ¶Ç‰∏ãÊâÄÁ§∫„ÄÇ
# ‰∏ÄÊó¶Áî®Êà∑ÁöÑ‰ªªÂä°Â§çÊùÇÊØîËæÉÂ§çÊùÇÔºåÊô∫ËÉΩ‰ΩìÂ∞ÜËá™Â∑±ÂàõÂª∫ËÆ°ÂàíÂπ∂ÈÄêÊ≠•ÊâßË°åËÆ°Âàí„ÄÇ
#
# .. code-block:: python
# :caption: ‰∏éËÆ°ÂàíÊô∫ËÉΩ‰ΩìÂª∫Á´ãÂØπËØù
#
# async def interact_with_agent() -> None:
# """‰∏éËÆ°ÂàíÊô∫ËÉΩ‰Ωì‰∫§‰∫í„ÄÇ"""
# user = UserAgent(name="user")
#
# msg = None
# while True:
# msg = await user(msg)
# if msg.get_text_content() == "exit":
# break
# msg = await agent(msg)
#
# asyncio.run(interact_with_agent())
#
# ÂèØËßÜÂåñÂíåÁõëÊéß
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope ÈÄöËøáÈí©Â≠êÂáΩÊï∞ÊîØÊåÅËÆ°ÂàíÊâßË°åÁöÑÂÆûÊó∂ÂèØËßÜÂåñÂíåÁõëÊéß„ÄÇ
#
# ÂΩìÂâçËÆ°ÂàíË¢´Â∑•ÂÖ∑ÂáΩÊï∞ÊîπÂèòÊó∂ÔºåÈí©Â≠êÂáΩÊï∞Â∞ÜË¢´Ëß¶ÂèëÔºåÂºÄÂèëËÄÖÂèØ‰ª•Âú®Ëøô‰∫õÈí©Â≠êÂáΩÊï∞‰∏≠Â∞ÜÂΩìÂâçÁöÑËÆ°ÂàíËΩ¨ÂèëÂà∞ÂØπÂ∫îÁöÑÂâçÁ´ØËøõË°åÂèØËßÜÂåñÊàñÂÖ∂‰ªñÂ§ÑÁêÜ„ÄÇ
# ËÆ°ÂàíÂèòÂåñÈí©Â≠êÂáΩÊï∞ÁöÑÊ®°ÊùøÂ¶Ç‰∏ãÔºö
#
def plan_change_hook_template(self: PlanNotebook, plan: Plan) -> None:
"""ËÆ°ÂàíÂèòÂåñÈí©Â≠êÂáΩÊï∞ÁöÑÊ®°Êùø„ÄÇ
Args:
self (`PlanNotebook`):
PlanNotebookÂÆû‰æã„ÄÇ
plan (`Plan`):
ÂΩìÂâçËÆ°ÂàíÂÆû‰æãÔºàÂèòÂåñÂêéÔºâ„ÄÇ
"""
# Â∞ÜËÆ°ÂàíËΩ¨ÂèëÂà∞ÂâçÁ´ØËøõË°åÂèØËßÜÂåñÊàñÂÖ∂‰ªñÂ§ÑÁêÜ
---- task_prompt.py ----
# -*- coding: utf-8 -*-
"""
.. _prompt:
ÊèêÁ§∫ËØçÊ†ºÂºèÂåñ
=========================
AgentScope ‰∏≠ÁöÑÊ†ºÂºèÂåñÂô®ÔºàformatterÔºâÊ®°ÂùóË¥üË¥£
- Â∞Ü Msg ÂØπË±°ËΩ¨Êç¢‰∏∫‰∏çÂêå LLM API Ë¶ÅÊ±ÇÁöÑÊ†ºÂºèÔºå
- ÔºàÂèØÈÄâÔºâÊà™Êñ≠Ê∂àÊÅØ‰ª•ÈÄÇÂ∫î max_token ÁöÑÈôêÂà∂Ôºå
- ÔºàÂèØÈÄâÔºâÊâßË°åÊèêÁ§∫Â∑•Á®ãÔºå‰æãÂ¶ÇÂØπÈïøÂØπËØùËøõË°åÊÄªÁªì„ÄÇ
Âêé‰∏§‰∏™ÂäüËÉΩÊòØÂèØÈÄâÁöÑÔºåÂºÄÂèëËÄÖ‰πüÂèØ‰ª•ÈÄâÊã©Âú®ËÆ∞ÂøÜÔºàmemoryÔºâÊàñÊô∫ËÉΩ‰ΩìÔºàagentÔºâÂ±ÇÈù¢ËøõË°åÂ§ÑÁêÜÂíåÂÆûÁé∞„ÄÇ
Âú® AgentScope ‰∏≠ÔºåÊúâ‰∏§ÁßçÁ±ªÂûãÁöÑÊ†ºÂºèÂåñÂô®Ôºö"ChatFormatter" Âíå "MultiAgentFormatter"ÔºåÂÆÉ‰ª¨Ê†πÊçÆËæìÂÖ•Ê∂àÊÅØ‰∏≠ÁöÑ‚ÄúË∫´‰ªΩÂÆû‰Ωì‚ÄùËøõË°åÂå∫ÂàÜ„ÄÇ
- **ChatFormatter**Ôºö‰∏ì‰∏∫Ê†áÂáÜÁöÑÁî®Êà∑-Âä©ÊâãÂú∫ÊôØÔºàËÅäÂ§©Êú∫Âô®‰∫∫ÔºâËÆæËÆ°Ôºå‰ΩøÁî® ``role`` Â≠óÊÆµÊù•ËØÜÂà´Áî®Êà∑ÂíåÂä©Êâã„ÄÇ
- **MultiAgentFormatter**Ôºö‰∏ì‰∏∫Â§öÊô∫ËÉΩ‰ΩìÂú∫ÊôØËÆæËÆ°Ôºå‰ΩøÁî® ``name`` Â≠óÊÆµÊù•ËØÜÂà´‰∏çÂêåÁöÑÂÆû‰ΩìÔºåÂú®Ê†ºÂºèÂåñÁöÑËøáÁ®ã‰∏≠‰ºöÂ∞ÜÂ§öÊô∫ËÉΩ‰ΩìÁöÑÂØπËØùÂéÜÂè≤ÂêàÂπ∂‰∏∫Âçï‰∏™Ê∂àÊÅØ„ÄÇ
AgentScope ÂÜÖÁΩÆÁöÑÊ†ºÂºèÂåñÂô®Â¶Ç‰∏ãÊâÄÂàó
.. list-table:: AgentScope ‰∏≠ÁöÑÂÜÖÁΩÆÊ†ºÂºèÂåñÂô®
:header-rows: 1
* - API Êèê‰æõÂïÜ
- Áî®Êà∑-Âä©ÊâãÂú∫ÊôØ
- Â§öÊô∫ËÉΩ‰ΩìÂú∫ÊôØ
* - OpenAI
- ``OpenAIChatFormatter``
- ``OpenAIMultiAgentFormatter``
* - Anthropic
- ``AnthropicChatFormatter``
- ``AnthropicMultiAgentFormatter``
* - DashScope
- ``DashScopeChatFormatter``
- ``DashScopeMultiAgentFormatter``
* - Gemini
- ``GeminiChatFormatter``
- ``GeminiChatFormatter``
* - Ollama
- ``OllamaChatFormatter``
- ``OllamaMultiAgentFormatter``
* - DeedSeek
- ``DeepSeekChatFormatter``
- ``DeepSeekMultiAgentFormatter``
* - vLLM
- ``OpenAIFormatter``
- ``OpenAIFormatter``
.. tip:: OpenAI API ÊîØÊåÅ `name` Â≠óÊÆµÔºåÂõ†Ê≠§ `OpenAIFormatter` ‰πüÂèØ‰ª•Áî®‰∫éÂ§öÊô∫ËÉΩ‰ΩìÂú∫ÊôØ„ÄÇ‰πüÂèØ‰ª•‰ΩøÁî® `OpenAIMultiAgentFormatter` ‰ª£ÊõøÔºåÂÆÉ‰ºöÂ∞ÜÂØπËØùÂéÜÂè≤ÂêàÂπ∂‰∏∫Âçï‰∏™Áî®Êà∑Ê∂àÊÅØ„ÄÇ
Ê≠§Â§ñÔºåÂÜÖÁΩÆÊ†ºÂºèÂåñÂô®ÂØπ‰∫é‰∏çÂêåÁöÑÊ∂àÊÅØÂùóÔºàmessage blocksÔºâÁöÑÊîØÊåÅÊÉÖÂÜµÂ¶Ç‰∏ãË°®ÊâÄÁ§∫Ôºö
.. list-table:: ÂÜÖÁΩÆÊ†ºÂºèÂåñÂô®‰∏≠ÊîØÊåÅÁöÑÊ∂àÊÅØÂùó
:header-rows: 1
* - Ê†ºÂºèÂåñÂô®
- tool_use/result
- image
- audio
- video
- thinking
* - ``OpenAIChatFormatter``
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚ùå
-
* - ``DashScopeChatFormatter``
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚ùå
-
* - ``DashScopeMultiAgentFormatter``
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚ùå
-
* - ``AnthropicChatFormatter``
- ‚úÖ
- ‚úÖ
- ‚ùå
- ‚ùå
- ‚úÖ
* - ``AnthropicMultiAgentFormatter``
- ‚úÖ
- ‚úÖ
- ‚ùå
- ‚ùå
- ‚úÖ
* - ``GeminiChatFormatter``
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
-
* - ``GeminiMultiAgentFormatter``
- ‚úÖ
- ‚úÖ
- ‚úÖ
- ‚úÖ
-
* - ``OllamaChatFormatter``
- ‚úÖ
- ‚úÖ
- ‚ùå
- ‚ùå
-
* - ``OllamaMultiAgentFormatter``
- ‚úÖ
- ‚úÖ
- ‚ùå
- ‚ùå
-
* - ``DeepSeekChatFormatter``
- ‚úÖ
- ‚ùå
- ‚ùå
- ‚ùå
-
* - ``DeepSeekMultiAgentFormatter``
- ‚úÖ
- ‚ùå
- ‚ùå
- ‚ùå
-
.. note:: Â¶Ç `ÂÆòÊñπÊñáÊ°£ <https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking#preserving-thinking-blocks>`_ ÊâÄËø∞ÔºåÂè™Êúâ Anthropic Âª∫ËÆÆÂú®ËæìÂÖ•ÁöÑÊèêÁ§∫ËØç‰∏≠‰øùÁïôÊé®ÁêÜÁöÑÈÉ®ÂàÜÔºàthinking blocksÔºâ„ÄÇÂØπ‰∫éÂÖ∂ÂÆÉÊ†ºÂºèÂåñÂô®ÔºåÊàë‰ª¨ÂøΩÁï•ËæìÂÖ•Ê∂àÊÅØ‰∏≠ÂåÖÂê´ÁöÑ ``ThinkingBlock``„ÄÇ
Èù¢Âêë ReAct ÁöÑÊ†ºÂºèÂåñ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ÂÜÖÁΩÆÁöÑ formatter ÂùáÈù¢Âêë ReAct Êô∫ËÉΩ‰ΩìËøõË°åËÆæËÆ°ÔºåÂÖ∂‰∏≠ËæìÂÖ•Ê∂àÊÅØÁî±‰∫§ÊõøÁöÑ **ÂØπËØùÂéÜÂè≤** Âíå **Â∑•ÂÖ∑Ë∞ÉÁî®Â∫èÂàó** ÁªÑÊàê„ÄÇ
Âú®Áî®Êà∑-Âä©ÊâãÂú∫ÊôØ‰∏≠ÔºåÂØπËØùÂéÜÂè≤ÊòØÁî®Êà∑ÂíåÂä©ÊâãÁöÑÊ∂àÊÅØÔºåÊàë‰ª¨Áõ¥Êé•Â∞ÜÂÆÉ‰ª¨ËΩ¨Êç¢‰∏∫ÊâÄÊúüÊúõÁöÑÊ†ºÂºè„ÄÇ
ÁÑ∂ËÄåÔºåÂú®Â§öÊô∫ËÉΩ‰ΩìÂú∫ÊôØ‰∏≠ÔºåÂØπËØùÂéÜÂè≤ÊòØÊù•Ëá™‰∏çÂêåÊô∫ËÉΩ‰ΩìÁöÑÊ∂àÊÅØÂàóË°®ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
.. figure:: ../../_static/images/multiagent_msgs.png
:alt: Â§öÊô∫ËÉΩ‰ΩìÊ∂àÊÅØÁ§∫‰æã
:width: 85%
:align: center
*Â§öÊô∫ËÉΩ‰ΩìÊ∂àÊÅØÁ§∫‰æã*
Âõ†Ê≠§ÔºåÊàë‰ª¨ÂøÖÈ°ªÂ∞ÜÂØπËØùÂéÜÂè≤ÂêàÂπ∂‰∏∫Â∏¶ÊúâÊ†áÁ≠æ "<history>" Âíå "</history>" ÁöÑÂçï‰∏™Áî®Êà∑Ê∂àÊÅØ„ÄÇ
‰ª• DashScope ‰∏∫‰æãÔºåÊ†ºÂºèÂåñÂêéÁöÑÊ∂àÊÅØÂ∞ÜÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
"""
from agentscope.token import HuggingFaceTokenCounter
from agentscope.formatter import DashScopeMultiAgentFormatter
from agentscope.message import Msg, ToolResultBlock, ToolUseBlock, TextBlock
import asyncio, json
input_msgs = [
# Á≥ªÁªüÊèêÁ§∫
Msg("system", "‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Friday ÁöÑÊúâÁî®Âä©Êâã", "system"),
# ÂØπËØùÂéÜÂè≤
Msg("Bob", "‰Ω†Â•ΩÔºåAliceÔºå‰Ω†Áü•ÈÅìÊúÄËøëÁöÑÂõæ‰π¶È¶ÜÂú®Âì™ÈáåÂêóÔºü", "assistant"),
Msg(
"Alice",
"Êä±Ê≠âÔºåÊàë‰∏çÁü•ÈÅì„ÄÇCharlieÔºå‰Ω†Êúâ‰ªÄ‰πàÊÉ≥Ê≥ïÂêóÔºü",
"assistant",
),
Msg(
"Charlie",
"Ê≤°ÊúâÔºåÊàë‰ª¨ÈóÆÈóÆ Friday Âêß„ÄÇFridayÔºåÂ∏ÆÊàëÊâæÂà∞ÊúÄËøëÁöÑÂõæ‰π¶È¶Ü„ÄÇ",
"assistant",
),
# Â∑•ÂÖ∑Â∫èÂàó
Msg(
"Friday",
[
ToolUseBlock(
type="tool_use",
name="get_current_location",
id="1",
input={},
),
],
"assistant",
),
Msg(
"system",
[
ToolResultBlock(
type="tool_result",
name="get_current_location",
id="1",
output=[TextBlock(type="text", text="104.48, 36.30")],
),
],
"system",
),
Msg(
"Friday",
[
ToolUseBlock(
type="tool_use",
name="search_around",
id="2",
input={"location": [104.48, 36.30], "keyword": "library"},
),
],
"assistant",
),
Msg(
"system",
[
ToolResultBlock(
type="tool_result",
name="search_around",
id="2",
output=[TextBlock(type="text", text="[...]")],
),
],
"system",
),
# ÂØπËØùÂéÜÂè≤ÁªßÁª≠
Msg("Friday", "ÊúÄËøëÁöÑÂõæ‰π¶È¶ÜÊòØ...", "assistant"),
Msg("Bob", "Ë∞¢Ë∞¢ÔºåFridayÔºÅ", "user"),
Msg("Alice", "Êàë‰ª¨‰∏ÄËµ∑ÂéªÂêß„ÄÇ", "user"),
]
async def run_formatter_example() -> list[dict]:
"""Â§öÊô∫ËÉΩ‰ΩìÊ∂àÊÅØÊ†ºÂºèÂåñÁ§∫‰æã„ÄÇ"""
formatter = DashScopeMultiAgentFormatter()
formatted_message = await formatter.format(input_msgs)
print("Ê†ºÂºèÂåñÂêéÁöÑÊ∂àÊÅØÔºö")
print(json.dumps(formatted_message, indent=4, ensure_ascii=False))
return formatted_message
formatted_message = asyncio.run(run_formatter_example())
# %%
# ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÂØπËØùÂéÜÂè≤Ë¢´Ê†ºÂºèÂåñ‰∏∫Ôºö
#
print("Á¨¨‰∏ÄÊÆµÂØπËØùÂéÜÂè≤Ôºö")
print(formatted_message[1]["content"])
print("\nÁ¨¨‰∫åÊÆµÂØπËØùÂéÜÂè≤Ôºö")
print(formatted_message[-1]["content"])
# %%
# Âü∫‰∫éÊà™Êñ≠ÁöÑÊ†ºÂºèÂåñ
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ÈÄöËøá AgentScope ‰∏≠ÁöÑ token Ê®°ÂùóÔºåÂÜÖÁΩÆÊ†ºÂºèÂåñÂô®ÊîØÊåÅÈÄöËøá **Âà†Èô§ÊúÄÊóßÁöÑÊ∂àÊÅØ**ÔºàÈô§‰∫ÜÁ≥ªÁªüÊèêÁ§∫Ê∂àÊÅØÔºâÂú® token Ë∂ÖËøáÈôêÂà∂Êó∂Êà™Êñ≠ËæìÂÖ•Ê∂àÊÅØ„ÄÇ
#
# ‰ª• OpenAIFormatter ‰∏∫‰æãÔºåÊàë‰ª¨È¶ñÂÖàËÆ°ÁÆóËæìÂÖ•Ê∂àÊÅØÁöÑÊÄª token Êï∞„ÄÇ
#
async def run_token_counter() -> int:
"""ËÆ°ÁÆóËæìÂÖ•Ê∂àÊÅØÁöÑ token Êï∞Èáè„ÄÇ"""
# Êàë‰ª¨‰ΩøÁî® huggingface token ËÆ°Êï∞Âô®Áî®‰∫é dashscope Ê®°Âûã„ÄÇ
token_counter = HuggingFaceTokenCounter(
"Qwen/Qwen2.5-VL-3B-Instruct",
use_mirror=False,
)
return await token_counter.count(formatted_message)
n_tokens = asyncio.run(run_token_counter())
print("Ê†ºÂºèÂåñÊ∂àÊÅØ‰∏≠ÁöÑ token Êï∞Èáè‰∏∫Ôºö", n_tokens)
# %%
# ÁÑ∂ÂêéÊàë‰ª¨Â∞ÜÊúÄÂ§ß token ÈôêÂà∂ËÆæÁΩÆ‰∏∫ÊØîÊÄª token Êï∞Â∞ë 20 ‰∏™ÔºåÂπ∂ËøêË°åÊ†ºÂºèÂåñÂô®„ÄÇ
#
async def run_truncated_formatter() -> None:
"""Â∏¶Êà™Êñ≠ÁöÑÊ∂àÊÅØÊ†ºÂºèÂåñÁ§∫‰æã„ÄÇ"""
token_counter = HuggingFaceTokenCounter(
pretrained_model_name_or_path="Qwen/Qwen2.5-VL-3B-Instruct",
use_mirror=False,
)
formatter = DashScopeMultiAgentFormatter(
token_counter=token_counter,
max_tokens=n_tokens - 20,
)
truncated_formatted_message = await formatter.format(input_msgs)
n_truncated_tokens = await token_counter.count(truncated_formatted_message)
print("Êà™Êñ≠ÂêéÁöÑ token Êï∞ÈáèÔºö", n_truncated_tokens)
print("\nÊà™Êñ≠ÂêéÁöÑÂØπËØùÂéÜÂè≤Ôºö")
print(truncated_formatted_message[1]["content"])
asyncio.run(run_truncated_formatter())
# %%
# Êàë‰ª¨ÂèØ‰ª•ÁúãÂà∞Êù•Ëá™ Bob Âíå Alice ÁöÑÂâç‰∏§Êù°Ê∂àÊÅØË¢´Âà†Èô§‰ª•ÈÄÇÂ∫î ``max_tokens`` ÁöÑÈôêÂà∂„ÄÇ
#
#
# Ëá™ÂÆö‰πâÊ†ºÂºèÂåñÂô®
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope Êèê‰æõ‰∫Ü‰∏§‰∏™Âü∫Á±ª ``FormatterBase`` ÂíåÂÖ∂Â≠êÁ±ª ``TruncatedFormatterBase``„ÄÇ
# ÂÖ∂‰∏≠ ``TruncatedFormatterBase`` Á±ªÊèê‰æõ‰∫Ü FIFOÔºàFirst In First OutÔºâÊà™Êñ≠Á≠ñÁï•ÔºåÊâÄÊúâÂÜÖÁΩÆÊ†ºÂºèÂåñÂô®ÈÉΩÁªßÊâøËá™ÂÆÉ„ÄÇ
#
# .. list-table:: AgentScope ‰∏≠Ê†ºÂºèÂåñÂô®ÁöÑÂü∫Á±ª
# :header-rows: 1
#
# * - Á±ª
# - ÊäΩË±°ÊñπÊ≥ï
# - ÊèèËø∞
# * - ``FormatterBase``
# - ``format``
# - Â∞ÜËæìÂÖ•ÁöÑ ``Msg`` ÂØπË±°Ê†ºÂºèÂåñ‰∏∫ÁõÆÊ†á API ÊâÄÊúüÊúõÁöÑÊ†ºÂºè
# * - ``TruncatedFormatterBase``
# - ``_format_agent_message``
# - Ê†ºÂºèÂåñÊô∫ËÉΩ‰ΩìÊ∂àÊÅØÔºåÂú®Â§öÊô∫ËÉΩ‰ΩìÂú∫ÊôØ‰∏≠ÂèØËÉΩÂåÖÂê´Â§ö‰∏™Ë∫´‰ªΩ
# * -
# - ``_format_tool_sequence``
# - Â∞ÜÂ∑•ÂÖ∑‰ΩøÁî®ÂíåÁªìÊûúÂ∫èÂàóÊ†ºÂºèÂåñ‰∏∫ÊâÄÊúüÊúõÁöÑÊ†ºÂºè
# * -
# - ``_format`` (ÂèØÈÄâ)
# - Â∞ÜËæìÂÖ•ÁöÑ ``Msg`` ÂØπË±°Ê†ºÂºèÂåñ‰∏∫ÁõÆÊ†á API ÊâÄÊúüÊúõÁöÑÊ†ºÂºè
#
# .. tip:: ``TruncatedFormatterBase`` ‰∏≠ÁöÑ ``_format`` Â∞ÜËæìÂÖ•Ê∂àÊÅØÂàÜÁªÑ‰∏∫Êô∫ËÉΩ‰ΩìÊ∂àÊÅØÂíåÂ∑•ÂÖ∑Â∫èÂàóÔºåÁÑ∂ÂêéÂàÜÂà´ÈÄöËøáË∞ÉÁî® ``_format_agent_message`` Âíå ``_format_tool_sequence`` Êù•Ê†ºÂºèÂåñÂÆÉ‰ª¨„ÄÇÂºÄÂèëËÄÖÂèØ‰ª•ÈáçÂÜô‰∏§‰∏™ÂáΩÊï∞Êù•ÂÆûÁé∞Ëá™Â∑±ÁöÑÊ†ºÂºèÂåñÁ≠ñÁï•„ÄÇ
#
# .. tip:: ÂèØÈÄâÂú∞ÔºåÂºÄÂèëËÄÖÂèØ‰ª•ÈáçÂÜô ``TruncatedFormatterBase`` ‰∏≠ÁöÑ ``_truncate`` ÊñπÊ≥ïÊù•ÂÆûÁé∞Ëá™Â∑±ÁöÑÊà™Êñ≠Á≠ñÁï•„ÄÇ
#
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# - :ref:`token`
# - :ref:`model`
#
---- task_rag.py ----
# -*- coding: utf-8 -*-
"""
.. _rag:
RAG
==========================
AgentScope Êèê‰æõ‰∫ÜÂÜÖÁΩÆÁöÑ RAGÔºàRetrieval-Augmented Generation) ÂÆûÁé∞„ÄÇÊú¨ËäÇÂ∞ÜËØ¶ÁªÜ‰ªãÁªç
- Â¶Ç‰Ωï‰ΩøÁî® AgentScope ‰∏≠ÁöÑ RAG Ê®°ÂùóÔºå
- Â¶Ç‰ΩïÂÆûÁé∞ **Â§öÊ®°ÊÄÅ** RAGÔºå
- Â¶Ç‰ΩïÂú® ``ReActAgent`` ‰∏≠‰ª•‰∏§Áßç‰∏çÂêåÁöÑÊñπÂºèÈõÜÊàê RAG Ê®°ÂùóÔºö
- Êô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂ÔºàAgentic mannerÔºâ
- ÈÄöÁî®ÊñπÂºèÔºàGeneric mannerÔºâ
Êàë‰ª¨Âú®‰∏ãÂàóË°®Ê†º‰∏≠ÊÄªÁªì‰∫Ü‰∏§ÁßçÊ®°ÂºèÁöÑ‰ºòÁº∫ÁÇπÔºö
.. list-table:: RAG ÈõÜÊàêÊñπÂºèÊØîËæÉ
:header-rows: 1
* - ÈõÜÊàêÊñπÂºè
- ÊèèËø∞
- ‰ºòÁÇπ
- Áº∫ÁÇπ
* - Êô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂
- ‰ª•Â∑•ÂÖ∑Ë∞ÉÁî®ÊñπÂºèËÆ©Êô∫ËÉΩ‰ΩìËá™‰∏ªÂÜ≥ÂÆö‰ΩïÊó∂ËøõË°åÊü•ËØ¢ÔºåÊü•ËØ¢‰ªÄ‰πàÂÖ≥ÈîÆÂ≠ó
- - ‰∏é ReAct ÁÆóÊ≥ïÂ•ëÂêàÔºåÁÅµÊ¥ªÊÄßÈ´ò
- Êô∫ËÉΩ‰ΩìËÉΩÂ§üÊ†πÊçÆÂΩìÂâçÁöÑ‰∏ä‰∏ãÊñáÊîπÂÜôÊü•ËØ¢ÂÖ≥ÈîÆËØç
- ÈÅøÂÖçÂú®‰∏çÂøÖË¶ÅÊó∂ÂèëÁîüÊü•ËØ¢
- ÂØπ LLM Ê®°ÂûãËÉΩÂäõË¶ÅÊ±ÇËæÉÈ´ò
* - ÈÄöÁî®ÊñπÂºè
- ÊØèÊ¨°Âú® ``reply`` ÂáΩÊï∞ÂºÄÂßãÊó∂Âõ∫ÂÆöËøõË°åÊü•ËØ¢ÔºåÂπ∂Â∞ÜÊ£ÄÁ¥¢ÁªìÊûúÊï¥ÂêàÂà∞ÊèêÁ§∫ÔºàpromptÔºâ‰∏≠
- - ÂÆûÁé∞ÁÆÄÂçï
- ÂØπ LLM Ê®°ÂûãËÉΩÂäõË¶ÅÊ±Ç‰Ωé
- - ÊØèÊ¨°ÈÉΩ‰ºöËøêË°åÊü•ËØ¢ÔºåÂõ†Ê≠§‰ºöÂºïÂÖ•ËøáÂ§ö‰∏çÂøÖË¶ÅÁöÑÊü•ËØ¢Ê£ÄÁ¥¢
- Êü•ËØ¢Êï∞ÊçÆÂ∫ìËæÉÂ§ßÊó∂ÔºåÂõûÂ§çÂª∂ËøüËæÉÈ´ò
.. note:: ‰Ωú‰∏∫ÂºÄÊ∫êÊ°ÜÊû∂ÔºåAgentScope ÁöÑÁõÆÊ†áÊòØËÆ©ÂºÄÂèëËøáÁ®ãÊõ¥ÁÆÄÂçï‰πüÊõ¥ÊúâË∂£„ÄÇÂõ†Ê≠§ÔºåAgentScope ÁöÑËÆæËÆ°‰∏≠Âπ∂‰∏çÂº∫Âà∂Ë¶ÅÊ±Ç‰ΩøÁî®ÂÜÖÁΩÆÁöÑ RAG ÂÆûÁé∞ÔºåÂêåÊó∂ÊîØÊåÅ„ÄÅÈºìÂä±ÂºÄÂèëËÄÖÈõÜÊàêÁé∞ÊúâÁöÑ RAG ÂÆûÁé∞ÊàñÁ¨¨‰∏âÊñπ RAG Ê°ÜÊû∂„ÄÇ
"""
import asyncio
import json
import os
from matplotlib import pyplot as plt
import agentscope
from agentscope.agent import ReActAgent
from agentscope.embedding import (
DashScopeTextEmbedding,
DashScopeMultiModalEmbedding,
)
from agentscope.formatter import DashScopeChatFormatter
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.rag import (
TextReader,
SimpleKnowledge,
QdrantStore,
Document,
ImageReader,
)
from agentscope.tool import Toolkit
# %%
# ‰ΩøÁî® RAG Ê®°Âùó
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope ‰∏≠ÁöÑ RAG Ê®°ÂùóÁî±‰ª•‰∏ã‰∏â‰∏™Ê†∏ÂøÉÁªÑ‰ª∂ÊûÑÊàêÔºö
#
# - **Reader**ÔºöË¥üË¥£‰ªéÊï∞ÊçÆÊ∫êËØªÂèñÊï∞ÊçÆÔºåÂπ∂ËøõË°åÂàÜÂùóÔºàchunkingÔºâ
# - **Knowledge**ÔºöË¥üË¥£Áü•ËØÜÂ∫ìÊü•ËØ¢Ê£ÄÁ¥¢ÂíåÊï∞ÊçÆÂ≠òÂÇ®ÈÄªËæëÁöÑÁÆóÊ≥ïÂÆûÁé∞
# - **Store**ÔºöË¥üË¥£‰∏éÂêëÈáèÊï∞ÊçÆÂ∫ì‰∫§‰∫íÁöÑÈÄªËæëÂÆûÁé∞
#
# .. note:: Êàë‰ª¨Â∞ÜÊåÅÁª≠Âú® AgentScope ‰∏≠ÈõÜÊàêÊñ∞ÁöÑÂêëÈáèÊï∞ÊçÆÂ∫ìÂíåÊï∞ÊçÆËØªÂèñÊ®°Âùó„ÄÇËØ¶ÊÉÖËØ∑Êü•ÁúãÊàë‰ª¨ÁöÑ `ÂºÄÂèëË∑ØÁ∫øÂõæ <https://github.com/orgs/agentscope-ai/projects/2>`_ÔºåÂêåÊó∂‰πüÊ¨¢ËøéË¥°ÁåÆ‰ª£Á†ÅÔºÅ
#
# ÂΩìÂâç AgentScope ‰∏≠ÂÜÖÁΩÆÊîØÊåÅÁöÑ reader ÂåÖÊã¨Ôºö
#
for _ in agentscope.rag.__all__:
if _.endswith("Reader"):
print(f"- {_}")
# %%
# Ëøô‰∫õ reader ÁöÑ‰ΩúÁî®ÊòØËØªÂèñÊï∞ÊçÆÔºåÂ∞ÜÊï∞ÊçÆÂàÜÂùóÂπ∂ÂåÖË£ÖÊàê ``agentscope.rag.Document`` ÂØπË±°„ÄÇ ``Document`` ÂØπË±°ÂåÖÂê´‰ª•‰∏ãÂ≠óÊÆµÔºö
#
# - ``metadata``ÔºöÊï∞ÊçÆÂùóÁöÑÂÖÉ‰ø°ÊÅØÔºåÂåÖÂê´Êï∞ÊçÆÂÜÖÂÆπÔºà``content``Ôºâ„ÄÅÊï∞ÊçÆ IDÔºà``doc_id``Ôºâ„ÄÅÂùó IDÔºà``chunk_id``ÔºâÂíåÊÄªÂùóÊï∞Ôºà``total_chunks``Ôºâ
# - ``embedding``: Êï∞ÊçÆÂùóÁöÑÂêëÈáèË°®Á§∫ÔºåÈªòËÆ§‰∏∫ ``None``ÔºåÂú®Â∞ÜÊï∞ÊçÆÂùóÊ∑ªÂä†Âà∞Áü•ËØÜÂ∫ìÊó∂‰ºöË¢´Â°´ÂÖÖ
# - ``score``: Êï∞ÊçÆÂùóÁöÑÁõ∏ÂÖ≥ÊÄßÂàÜÊï∞ÔºåÈªòËÆ§‰∏∫ ``None``ÔºåÂú®‰ªéÁü•ËØÜÂ∫ìÊ£ÄÁ¥¢Êï∞ÊçÆÂùóÊó∂‰ºöË¢´Â°´ÂÖÖ
#
# ‰ª• ``TextReader`` ‰∏∫‰æãÔºåÈÄöËøáÂ¶Ç‰∏ã‰ª£Á†ÅËØªÂèñÊñáÊú¨Â≠óÁ¨¶‰∏≤ÔºåÂπ∂Â∞ÜÊñáÊú¨ÂàÜÂùó‰∏∫ ``Document`` ÂØπË±°Ôºö
#
async def example_text_reader(print_docs: bool) -> list[Document]:
"""‰ΩøÁî® TextReader ËØªÂèñÊñáÊú¨Â≠óÁ¨¶‰∏≤ÔºåÂπ∂Â∞ÜÊñáÊú¨ÂàÜÂùó‰∏∫ Document ÂØπË±°„ÄÇ"""
# ÂàõÂª∫ TextReader ÂØπË±°
reader = TextReader(chunk_size=512, split_by="paragraph")
# ËØªÂèñÊñáÊú¨Â≠óÁ¨¶‰∏≤
documents = await reader(
text=(
# Êàë‰ª¨ÂáÜÂ§á‰∏Ä‰∫õÊñáÊú¨Êï∞ÊçÆÁî®‰∫éÊºîÁ§∫ RAG ÂäüËÉΩ„ÄÇ
"ÊàëÁöÑÂêçÂ≠óÊòØÊùéÊòéÔºå‰ªäÂπ¥28Â≤Å„ÄÇ\n"
"ÊàëÂ±Ö‰ΩèÂú®‰∏≠ÂõΩÊù≠Â∑ûÔºåÊòØ‰∏ÄÂêçÁÆóÊ≥ïÂ∑•Á®ãÂ∏à„ÄÇÊàëÂñúÊ¨¢ÊâìÁØÆÁêÉÂíåÁé©Ê∏∏Êàè„ÄÇ\n"
"ÊàëÁà∂‰∫≤ÁöÑÂêçÂ≠óÊòØÊùéÂº∫ÔºåÊòØ‰∏ÄÂêçÂåªÁîüÔºåÊàëÁöÑÊØç‰∫≤ÊòØÈôàËä≥Ëä≥ÔºåÊòØ‰∏ÄÂêçÊïôÂ∏àÔºåÂ•πÊÄªÊòØÊåáÂØºÊàëÂ≠¶‰π†„ÄÇ\n"
"ÊàëÁé∞Âú®Âú®Âåó‰∫¨Â§ßÂ≠¶ÊîªËØªÂçöÂ£´Â≠¶‰ΩçÔºåÁ†îÁ©∂ÊñπÂêëÊòØ‰∫∫Â∑•Êô∫ËÉΩ„ÄÇ\n"
"ÊàëÊúÄÂ•ΩÁöÑÊúãÂèãÊòØÁéã‰ºüÔºåÊàë‰ª¨‰ªéÂ∞è‰∏ÄËµ∑ÈïøÂ§ßÔºåÁé∞Âú®‰ªñÊòØ‰∏ÄÂêçÂæãÂ∏à„ÄÇ"
),
)
if print_docs:
print(f"ÊñáÊú¨Ë¢´ÂàÜÂùó‰∏∫ {len(documents)} ‰∏™ Document ÂØπË±°Ôºö")
for idx, doc in enumerate(documents):
print(f"Document {idx}:")
print("\tScore: ", doc.score)
print(
"\tMetadata: ",
json.dumps(doc.metadata, indent=2, ensure_ascii=False),
"\n",
)
return documents
docs = asyncio.run(example_text_reader(print_docs=True))
# %%
# Áî±‰∫éÂπ∂‰∏çÂ≠òÂú®‰∏Ä‰∏™ ‚Äúone-for-all‚Äù ÁöÑÊï∞ÊçÆËØªÂèñÂíåÂàÜÂùóÊñπÊ≥ïÔºåÁâπÂà´ÂÉèÊòØ PDF Âíå Word ËøôÁ±ªÂ§çÊùÇÊ†ºÂºèÁöÑÊñáÊ°£„ÄÇ
# Âõ†Ê≠§ÔºåAgentScope ÈºìÂä±ÂºÄÂèëËÄÖÊ†πÊçÆËá™Â∑±ÁöÑÊï∞ÊçÆÊ†ºÂºèÂÆûÁé∞Ëá™ÂÆö‰πâÁöÑ reader„ÄÇ
# Âè™ÈúÄË¶ÅÁªßÊâø ``BaseReader`` Á±ªÔºåÂπ∂ÂÆûÁé∞ ``__call__`` ÊñπÊ≥ïÂç≥ÂèØ„ÄÇ
#
# Âú®Êï∞ÊçÆÂàÜÂùóÂêéÔºåÊé•‰∏ãÊù•ÈúÄË¶ÅÂ∞ÜÊï∞ÊçÆÂùóÊ∑ªÂä†Âà∞Áü•ËØÜÂ∫ì‰∏≠„ÄÇ
# Âú® AgentScope ‰∏≠ÔºåÁü•ËØÜÂ∫ìÁöÑÂàùÂßãÂåñÈúÄË¶ÅÊèê‰æõ **ÂµåÂÖ•Ê®°Âûã** Âíå **ÂêëÈáèÂ≠òÂÇ®** ÔºàÂç≥ÂêëÈáèÊï∞ÊçÆÂ∫ìÔºâ ÁöÑÂØπË±°„ÄÇ
# AgentScope ÁõÆÂâçÂÜÖÁΩÆÊîØÊåÅÂü∫‰∫é `Qdrant <https://qdrant.tech/>`_ ÂÆûÁé∞ÁöÑÂêëÈáèÂ≠òÂÇ®Ôºå‰ª•Âèä‰∏Ä‰∏™Áü•ËØÜÂ∫ìÁöÑÂü∫Á°ÄÂÆûÁé∞ ``SimpleKnowledge``„ÄÇ
# ÂÖ∑‰Ωì‰ΩøÁî®ÊñπÂºèÂ¶Ç‰∏ãÔºö
#
# .. note::
#
# - Êàë‰ª¨Ê≠£Âú® AgentScope ‰∏≠ÈõÜÊàêÊñ∞ÁöÑÂêëÈáèÊï∞ÊçÆÂ∫ìÔºåËØ¶ÊÉÖËØ∑Êü•ÁúãÊàë‰ª¨ÁöÑ `ÂºÄÂèëË∑ØÁ∫øÂõæ <https://github.com/orgs/agentscope-ai/projects/2>`_„ÄÇÊ¨¢ËøéË¥°ÁåÆ‰ª£Á†ÅÔºÅ
# - Qdrant ÁöÑÂÆûÁé∞ÈÄöËøá ``location`` ÂèÇÊï∞ÊîØÊåÅÂ§öÁßç‰∏çÂêåÁöÑÈÉ®ÁΩ≤ÊñπÂºèÔºåÂåÖÊã¨ÂÜÖÂ≠òÊ®°ÂºèÔºåÊú¨Âú∞Ê®°ÂºèÂíå‰∫ëÁ´ØÊ®°Âºè„ÄÇËØ¶ÊÉÖËØ∑ÂèÇËÄÉ `Qdrant ÊñáÊ°£ <https://qdrant.tech/>`_„ÄÇ
#
async def build_knowledge_base() -> SimpleKnowledge:
"""ÊûÑÂª∫Áü•ËØÜÂ∫ì„ÄÇ"""
# ËØªÂèñ documents Êï∞ÊçÆ
documents = await example_text_reader(print_docs=False)
# ÂàõÂª∫‰∏Ä‰∏™ÂÜÖÂ≠ò‰∏≠ÁöÑ Qdrant ÂêëÈáèÂ≠òÂÇ®Ôºå‰ª•Âèä‰ΩøÁî® DashScopeTextEmbedding ‰Ωú‰∏∫ÂµåÂÖ•Ê®°ÂûãÔºåÂàùÂßãÂåñÁü•ËØÜÂ∫ì
knowledge = SimpleKnowledge(
# Êèê‰æõ‰∏Ä‰∏™ embedding Ê®°ÂûãÁî®‰∫éÂ∞ÜÊñáÊú¨ËΩ¨Êç¢‰∏∫ÂêëÈáè
embedding_model=DashScopeTextEmbedding(
api_key=os.environ["DASHSCOPE_API_KEY"],
model_name="text-embedding-v4",
dimensions=1024,
),
# ÈÄâÊã© Qdrant ‰Ωú‰∏∫ÂêëÈáèÂ≠òÂÇ®
embedding_store=QdrantStore(
location=":memory:", # ‰ΩøÁî®ÂÜÖÂ≠òÊ®°Âºè
collection_name="test_collection",
dimensions=1024, # ÂµåÂÖ•ÂêëÈáèÁöÑÁª¥Â∫¶ÂøÖÈ°ª‰∏éÂµåÂÖ•Ê®°ÂûãËæìÂá∫ÁöÑÁª¥Â∫¶‰∏ÄËá¥
),
)
# Â∞Ü documents Ê∑ªÂä†Âà∞Áü•ËØÜÂ∫ì‰∏≠
await knowledge.add_documents(documents)
# ‰ªéÁü•ËØÜÂ∫ì‰∏≠Ê£ÄÁ¥¢Êï∞ÊçÆ
docs = await knowledge.retrieve(
query="ÊùéÊòéÁöÑÁà∂‰∫≤ÊòØË∞ÅÔºü",
limit=3,
score_threshold=0.5,
)
print("Ê£ÄÁ¥¢Âà∞ÁöÑ Document ÂØπË±°Ôºö")
for doc in docs:
print(doc, "\n")
return knowledge
knowledge = asyncio.run(build_knowledge_base())
# %%
# AgentScope ‰∏≠ÁöÑÁü•ËØÜÂ∫ìÁ±ªÊèê‰æõ‰∏§‰∏™Ê†∏ÂøÉÊñπÊ≥ïÔºö``add_documents`` Âíå ``retrieve``ÔºåÂàÜÂà´Áî®‰∫éÊ∑ªÂä†Êï∞ÊçÆÂùóÂíåÊêúÁ¥¢Ê£ÄÁ¥¢Êï∞ÊçÆÂùó„ÄÇ
#
# Ê≠§Â§ñÔºåAgentScope Êèê‰æõ‰∫Ü ``retrieve_knowledge`` ÊñπÊ≥ïÔºåÂÆÉÂ∞Ü ``retrieve`` ÊñπÊ≥ïÂ∞ÅË£ÖÊàê‰∏Ä‰∏™Êô∫ËÉΩ‰ΩìËÉΩÂ§üÁõ¥Êé•Ë∞ÉÁî®ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇÂºÄÂèëËÄÖÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®ËØ•Â∑•ÂÖ∑ÂáΩÊï∞Ë£ÖÂ§áÊô∫ËÉΩ‰Ωì„ÄÇ
#
# Ëá™ÂÆö‰πâ RAG ÁªÑ‰ª∂
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope ÊîØÊåÅÂπ∂ÈºìÂä±ÂºÄÂèëËÄÖËá™ÂÆö‰πâ RAG ÁªÑ‰ª∂ÔºåÂåÖÊã¨ reader„ÄÅÁü•ËØÜÂ∫ìÂíåÂêëÈáèÊï∞ÊçÆÂ∫ì„ÄÇ
# ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÊàë‰ª¨Êèê‰æõ‰∫Ü‰ª•‰∏ãÂü∫Á±ªÁî®‰∫éËá™ÂÆö‰πâÔºö
#
# .. list-table:: RAG Âü∫Á±ª
# :header-rows: 1
#
# * - Âü∫Á±ª
# - ÊèèËø∞
# - ÊäΩË±°ÊñπÊ≥ï
# * - ``ReaderBase``
# - ÊâÄÊúâ reader ÁöÑÂü∫Á±ª
# - ``__call__``
# * - ``VDBStoreBase``
# - ÂêëÈáèÊï∞ÊçÆÂ∫ìÁöÑÂü∫Á±ª
# - | ``add``
# | ``search``
# | ``get_client`` (ÂèØÈÄâ)
# | ``delete`` (ÂèØÈÄâ)
# * - ``KnowledgeBase``
# - Áü•ËØÜÂ∫ìÁöÑÂü∫Á±ª
# - | ``retrieve``
# | ``add_documents``
#
# ``VDBStoreBase`` ‰∏≠ÁöÑ ``get_client`` ÊñπÊ≥ïÂÖÅËÆ∏ÂºÄÂèëËÄÖËÆøÈóÆÂ∫ïÂ±ÇÂêëÈáèÊï∞ÊçÆÂ∫ìÁöÑÂÆåÊï¥ÂäüËÉΩ„ÄÇ
# ËøôÊ†∑Ôºå‰ªñ‰ª¨Â∞±ÂèØ‰ª•Âü∫‰∫éÂêëÈáèÊï∞ÊçÆÂ∫ìÂÆûÁé∞Êõ¥È´òÁ∫ßÁöÑÂäüËÉΩÔºå‰æãÂ¶ÇÂª∫Á´ãÁ¥¢Âºï„ÄÅÈ´òÁ∫ßÊêúÁ¥¢Á≠â„ÄÇ
#
# ‰∏é ReActAgent ÈõÜÊàê
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Êé•‰∏ãÊù•ÔºåÊàë‰ª¨Â∞ÜÊºîÁ§∫Â¶Ç‰Ωï‰ª•Êô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂ÔºàagenticÔºâÂíåÈÄöÁî®ÔºàgenericÔºâ‰∏§ÁßçÊñπÂºèÂ∞Ü RAG Ê®°Âùó‰∏é AgentScope ‰∏≠ÁöÑ ``ReActAgent`` ÈõÜÊàê„ÄÇ
#
# Êô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂
# --------------------------------
# Âú®Êô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂ÁöÑÊñπÂºè‰∏≠ÔºåReAct Êô∫ËÉΩ‰ΩìÂèØ‰ª•Ëá™‰∏ªÂÜ≥ÂÆö‰ΩïÊó∂Ê£ÄÁ¥¢Áü•ËØÜ‰ª•ÂèäÊ£ÄÁ¥¢ÁöÑÊü•ËØ¢ÂÜÖÂÆπ„ÄÇ
# Â∞Ü RAG Ê®°Âùó‰∏é AgentScope ‰∏≠ÁöÑ ``ReActAgent`` ÈõÜÊàêÈùûÂ∏∏ÁÆÄÂçïÔºåÂè™ÈúÄÂ∞ÜÁü•ËØÜÂ∫ìÁöÑ ``retrieve_knowledge`` ÊñπÊ≥ïÊ≥®ÂÜå‰∏∫Â∑•ÂÖ∑ÔºåÂπ∂‰∏∫ËØ•Â∑•ÂÖ∑Êèê‰æõÈÄÇÂΩìÁöÑÊèèËø∞Âç≥ÂèØ„ÄÇ
async def example_agentic_manner() -> None:
"""‰ª•Êô∫ËÉΩ‰ΩìËá™‰∏ªÊéßÂà∂ÊñπÂºèÂ∞Ü RAG Ê®°Âùó‰∏é ReActAgent ÈõÜÊàêÁöÑÁ§∫‰æã„ÄÇ"""
# ÂàõÂª∫‰∏Ä‰∏™ ReAct Êô∫ËÉΩ‰Ωì
toolkit = Toolkit()
# ‰ΩøÁî® DashScope ‰Ωú‰∏∫Ê®°ÂûãÂàõÂª∫ ReAct Êô∫ËÉΩ‰Ωì
agent = ReActAgent(
name="Friday",
sys_prompt="You're a helpful assistant named Friday.",
model=DashScopeChatModel(
api_key=os.environ["DASHSCOPE_API_KEY"],
model_name="qwen-max",
),
formatter=DashScopeChatFormatter(),
toolkit=toolkit,
)
print("Á¨¨‰∏ÄÊ¨°ÂõûÂ§ç: ")
# Á¨¨‰∏ÄÊ¨°Êàë‰ª¨ËøõË°å‰∏Ä‰∫õ‰∫§ÊµÅÔºåÊèê‰æõ‚ÄúÊùéÊòé‚ÄùËøô‰∏™ÂêçÂ≠ó‰Ωú‰∏∫‰∏ä‰∏ãÊñáÂÜÖÂÆπ
await agent(
Msg(
"user",
"ÊùéÊòéÊòØÊàëÊúÄÂ•ΩÁöÑÊúãÂèã„ÄÇ",
"user",
),
)
# Â∞Ü retrieve_knowledge ÊñπÊ≥ïÊ≥®ÂÜå‰∏∫Â∑•ÂÖ∑ÁÆ±‰∏≠ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
toolkit.register_tool_function(
knowledge.retrieve_knowledge,
func_description=( # ‰∏∫Â∑•ÂÖ∑Êèê‰æõÊ∏ÖÊô∞ÁöÑÊèèËø∞
"Áî®‰∫éÊ£ÄÁ¥¢‰∏éÁªôÂÆöÊü•ËØ¢Áõ∏ÂÖ≥ÁöÑÊñáÊ°£ÁöÑÂ∑•ÂÖ∑„ÄÇ" "ÂΩì‰Ω†ÈúÄË¶ÅÊü•ÊâæÊúâÂÖ≥ÊùéÊòéÁöÑ‰ø°ÊÅØÊó∂‰ΩøÁî®Ê≠§Â∑•ÂÖ∑„ÄÇ"
),
)
print("\n\nÁ¨¨‰∫åÊ¨°ÂõûÂ§ç: ")
# Á¨¨‰∫åÊ¨°ÂõûÂ§ç‰∏≠ÔºåÊàë‰ª¨Â∏åÊúõÊô∫ËÉΩ‰ΩìËÉΩÂ§üÂ∞ÜÊü•ËØ¢‰∏≠‚Äú‰ªñÁà∂‰∫≤‚ÄùÊîπÂÜôÂæóÊõ¥ÂÖ∑‰ΩìÔºå‰æãÂ¶Ç
# ‚ÄúÊùéÊòéÁöÑÁà∂‰∫≤ÊòØË∞ÅÔºü‚ÄùÊàñ‚ÄúÊùéÊòéÁöÑÁà∂‰∫≤‚Äù
await agent(
Msg(
"user",
"‰Ω†Áü•ÈÅì‰ªñÁà∂‰∫≤ÊòØË∞ÅÂêóÔºü",
"user",
),
)
asyncio.run(example_agentic_manner())
# %%
# Âú®‰∏äÈù¢ÁöÑ‰æãÂ≠ê‰∏≠ÔºåÊàë‰ª¨Ê®°Êãü‰∫ÜÊ≠£Â∏∏‰∏éÊô∫ËÉΩ‰Ωì‰∫§ÊµÅËøáÁ®ã„ÄÇÁ¨¨‰∏ÄÊ¨°ÁöÑ‰∫§ÊµÅÊàë‰ª¨Êèê‰æõ‰∫Ü‚ÄúÊùéÊòé‚ÄùÁöÑÂêçÂ≠ó‰Ωú‰∏∫‰∏ä‰∏ãÊñáÂÜÖÂÆπ„ÄÇ
# Á¨¨‰∫åÊ¨°ÊèêÈóÆÊó∂ÔºåÊàë‰ª¨ÁöÑÈóÆÈ¢òÊòØ‚Äú‰Ω†Áü•ÈÅì‰ªñÁà∂‰∫≤ÊòØË∞ÅÂêóÔºü‚ÄùÔºå
# Êàë‰ª¨Â∏åÊúõÊô∫ËÉΩ‰ΩìËÉΩÂ§üÂà©Áî®‰∏ä‰∏ãÊñáÂéÜÂè≤‰ø°ÊÅØÊîπÂÜôÊü•ËØ¢Ôºå‰ΩøÂÖ∂Êõ¥ÂÖ∑‰ΩìÔºåÊõ¥Â•ΩÁöÑËøõË°åÊ£ÄÁ¥¢Ôºå‰æãÂ¶ÇÊîπÂÜô‰∏∫‚ÄúÊùéÊòéÁöÑÁà∂‰∫≤ÊòØË∞ÅÔºü‚ÄùÊàñ‚ÄúÊùéÊòéÁöÑÁà∂‰∫≤‚Äù„ÄÇ
#
# Êõ¥Ëøõ‰∏ÄÊ≠•ÔºåÁªìÂêà :ref:`plan` Ê®°ÂùóÔºåÊàë‰ª¨ÂèØ‰ª•ËÆ©Êô∫ËÉΩ‰ΩìÂÆûÁé∞Êõ¥Âä†Â§çÊùÇÁöÑÊü•ËØ¢ÊîπÂÜôÂíåÂ§öËΩÆÊ£ÄÁ¥¢„ÄÇ
#
# ÈÄöÁî®ÊñπÂºè
# --------------------------------
# ``ReActAgent`` Ëøò‰ª•‰∏ÄÁßçÊõ¥Âä†ÈÄöÁî®ÁöÑÊñπÂºèÈõÜÊàê‰∫Ü RAG Ê®°ÂùóÔºå
# ÂÆÉÂú®ÊØèÊ¨° ``reply`` ÂáΩÊï∞ÂºÄÂßãÊâßË°åÊó∂Ê£ÄÁ¥¢Áü•ËØÜÔºåÂπ∂Â∞ÜÊ£ÄÁ¥¢Âà∞ÁöÑÁü•ËØÜÈôÑÂä†Âà∞Áî®Êà∑Ê∂àÊÅØÁöÑÊèêÁ§∫‰∏≠„ÄÇ
#
# Âè™ÈúÄËÆæÁΩÆ ``ReActAgent`` ÁöÑ ``knowledge`` ÂèÇÊï∞ÔºåÊô∫ËÉΩ‰ΩìÂ∞±‰ºöÂú®ÊØèÊ¨°ÂõûÂ§çÂºÄÂßãÊó∂Ëá™Âä®Ê£ÄÁ¥¢Áü•ËØÜ„ÄÇ
#
async def example_generic_manner() -> None:
"""‰ª•ÈÄöÁî®ÊñπÂºèÂ∞Ü RAG Ê®°Âùó‰∏é ReActAgent ÈõÜÊàêÁöÑÁ§∫‰æã„ÄÇ"""
# ÂàõÂª∫‰∏Ä‰∏™ ReAct Êô∫ËÉΩ‰Ωì
agent = ReActAgent(
name="Friday",
sys_prompt="You're a helpful assistant named Friday.",
model=DashScopeChatModel(
api_key=os.environ["DASHSCOPE_API_KEY"],
model_name="qwen-max",
),
formatter=DashScopeChatFormatter(),
# Â∞ÜÁü•ËØÜÂ∫ì‰º†ÈÄíÁªôÊô∫ËÉΩ‰Ωì
knowledge=knowledge,
)
await agent(
Msg(
"user",
"‰Ω†Áü•ÈÅìÊùéÊòéÁöÑÁà∂‰∫≤ÊòØË∞ÅÂêóÔºü",
"user",
),
)
print("\nÊü•ÁúãÊô∫ËÉΩ‰ΩìËÆ∞ÂøÜ‰∏≠Ê£ÄÁ¥¢‰ø°ÊÅØÂ¶Ç‰ΩïÊèíÂÖ•Ôºö")
content = (await agent.memory.get_memory())[-4].content
print(json.dumps(content, indent=2, ensure_ascii=False))
asyncio.run(example_generic_manner())
# %%
# Â§öÊ®°ÊÄÅ RAG
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AgentScope ‰∏≠ÁöÑ RAG Ê®°ÂùóÂéüÁîüÊîØÊåÅÂ§öÊ®°ÊÄÅÔºåÂõ†‰∏∫
#
# - AgentScope ÊîØÊåÅÂ§öÊ®°ÊÄÅÂµåÂÖ• APIÔºå‰æãÂ¶Ç ``DashScopeMultimodalEmbedding``„ÄÇ
# - ``Document`` Á±ªÁöÑ ``metadata`` ‰∏≠Ôºå``content`` Â≠óÊÆµÁöÑÁ±ªÂûãÊòØ ``TextBlock | ImageBlock | VideoBlock``ÔºåÂõ†Ê≠§ÂèØ‰ª•Â≠òÂÇ®ÊñáÊú¨„ÄÅÂõæÁâáÂíåËßÜÈ¢ëÁ≠âÂ§öÊ®°ÊÄÅÊï∞ÊçÆ„ÄÇ
#
# Âõ†Ê≠§ÔºåÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®Â§öÊ®°ÊÄÅ reader ÂíåÂµåÂÖ•Ê®°ÂûãÊù•ÊûÑÂª∫Â§öÊ®°ÊÄÅÁü•ËØÜÂ∫ìÔºåÂ¶Ç‰∏ãÊâÄÁ§∫„ÄÇ
#
# È¶ñÂÖàÔºåÊàë‰ª¨ÂáÜÂ§á‰∏ÄÂº†Êú¨Âú∞ÁöÑÂõæÁâáÔºåËøôÂº†ÂõæÁâá‰∏äÂåÖÂê´‰∫ÜÊñáÊú¨‚ÄúMy name is Ming Li‚Äù„ÄÇ
# ÂáÜÂ§á‰∏ÄÂº†ÂåÖÂê´ÊñáÊú¨‚ÄúMy name is Ming Li‚ÄùÁöÑÂõæÁâá„ÄÇ
path_image = "./example.png"
plt.figure(figsize=(8, 3))
plt.text(0.5, 0.5, "My name is Ming Li", ha="center", va="center", fontsize=30)
plt.axis("off")
plt.savefig(path_image, bbox_inches="tight", pad_inches=0.1)
plt.close()
# %%
# ÁÑ∂ÂêéÊàë‰ª¨ÂèØ‰ª•ÊûÑÂª∫‰∏Ä‰∏™Â§öÊ®°ÊÄÅÁü•ËØÜÂ∫ìÔºåÊûÑÂª∫ËøáÁ®ã‰∏éÁ∫ØÊñáÊú¨Áü•ËØÜÂ∫ìÁ±ª‰ºº„ÄÇÂè™ÊòØÂ∞Ü reader ÂíåÂµåÂÖ•Ê®°ÂûãÊõøÊç¢‰∏∫Â§öÊ®°ÊÄÅÁâàÊú¨Âç≥ÂèØ„ÄÇ
# Âú®‰∏ãÈù¢ÁöÑ‰æãÂ≠ê‰∏≠ÔºåÊàë‰ª¨‰ΩøÁî®‰∫Ü ``ImageReader`` Âíå ``DashScopeMultiModalEmbedding``„ÄÇ
# ÂêåÊó∂ÔºåËøôÈáåÊàë‰ª¨‰ΩøÁî®Â§öÊ®°ÊÄÅÊ®°Âûã ``qwen3-vl-plus`` ‰Ωú‰∏∫Êô∫ËÉΩ‰ΩìÁöÑËØ≠Ë®ÄÊ®°Âûã„ÄÇ
#
async def example_multimodal_rag() -> None:
"""‰ΩøÁî®Â§öÊ®°ÊÄÅ RAG ÁöÑÁ§∫‰æã„ÄÇ"""
# ‰ΩøÁî® ImageReader ËØªÂèñÂõæÁâá
reader = ImageReader()
docs = await reader(image_url=path_image)
# ÂàõÂª∫‰∏Ä‰∏™Áü•ËØÜÂ∫ì
knowledge = SimpleKnowledge(
embedding_model=DashScopeMultiModalEmbedding(
api_key=os.environ["DASHSCOPE_API_KEY"],
model_name="multimodal-embedding-v1",
dimensions=1024,
),
embedding_store=QdrantStore(
location=":memory:",
collection_name="test_collection",
dimensions=1024,
),
)
await knowledge.add_documents(docs)
agent = ReActAgent(
name="Friday",
sys_prompt="You're a helpful assistant named Friday.",
model=DashScopeChatModel(
api_key=os.environ["DASHSCOPE_API_KEY"],
model_name="qwen3-vl-plus",
),
formatter=DashScopeChatFormatter(),
knowledge=knowledge,
)
await agent(
Msg(
"user",
"‰Ω†Áü•ÈÅìÊàëÁöÑÂêçÂ≠óÂêóÔºü",
"user",
),
)
# ËÆ©Êàë‰ª¨ÁúãÁúãÊ£ÄÁ¥¢Âà∞ÁöÑÂõæÁâáÊï∞ÊçÆÊòØÂê¶Â∑≤ÁªèÂä†ÂÖ•‰∫ÜÊô∫ËÉΩ‰ΩìÁöÑËÆ∞ÂøÜ‰∏≠
print("\nÊü•ÁúãÊô∫ËÉΩ‰ΩìËÆ∞ÂøÜ‰∏≠Ê£ÄÁ¥¢‰ø°ÊÅØÂ¶Ç‰ΩïÊèíÂÖ•Ôºö")
content = (await agent.memory.get_memory())[-4].content
print(json.dumps(content, indent=2, ensure_ascii=False))
asyncio.run(example_multimodal_rag())
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# - :ref:`embedding`
# - :ref:`plan`
#
---- task_state.py ----
# -*- coding: utf-8 -*-
"""
.. _state:
Áä∂ÊÄÅ/‰ºöËØùÁÆ°ÁêÜ
=================================
Âú® AgentScope ‰∏≠Ôºå**"Áä∂ÊÄÅ"** ÊòØÊåáÊô∫ËÉΩ‰ΩìÂú®ËøêË°å‰∏≠Êüê‰∏ÄÊó∂ÂàªÁöÑÊï∞ÊçÆÂø´ÁÖßÔºåÂåÖÊã¨ÂÖ∂ÂΩìÂâçÁöÑÁ≥ªÁªüÊèêÁ§∫„ÄÅËÆ∞ÂøÜ„ÄÅ‰∏ä‰∏ãÊñá„ÄÅË£ÖÂ§áÁöÑÂ∑•ÂÖ∑‰ª•ÂèäÂÖ∂‰ªñ **ÈöèÊó∂Èó¥ÂèòÂåñ** ÁöÑ‰ø°ÊÅØ„ÄÇ
‰∏∫‰∫ÜÁÆ°ÁêÜÂ∫îÁî®Á®ãÂ∫èÁöÑÁä∂ÊÄÅÔºåAgentScope ËÆæËÆ°ÂÆûÁé∞‰∫Ü **Ëá™Âä®Áä∂ÊÄÅÊ≥®ÂÜå** Âíå **‰ºöËØùÁ∫ßÁä∂ÊÄÅÁÆ°ÁêÜ**ÔºåÂÖ∑Êúâ‰ª•‰∏ãÁâπÊÄßÔºö
- ÊîØÊåÅÊâÄÊúâÁªßÊâøËá™ ``StateModule`` ÁöÑÂèòÈáèÁöÑ **Ëá™Âä®Áä∂ÊÄÅÊ≥®ÂÜå**
- ÊîØÊåÅ‰ΩøÁî®Ëá™ÂÆö‰πâÂ∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñÊñπÊ≥ïÁöÑ **ÊâãÂä®Áä∂ÊÄÅÊ≥®ÂÜå**
- ÊîØÊåÅ **‰ºöËØù/Â∫îÁî®Á®ãÂ∫èÁ∫ßÂà´ÁÆ°ÁêÜ**
"""
import asyncio
import json
import os
from agentscope.agent import ReActAgent
from agentscope.formatter import DashScopeChatFormatter
from agentscope.memory import InMemoryMemory
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.module import StateModule
from agentscope.session import JSONSession
from agentscope.tool import Toolkit
# %%
# Áä∂ÊÄÅÊ®°Âùó
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# ``StateModule`` Á±ªÊòØ AgentScope ‰∏≠Áä∂ÊÄÅÁÆ°ÁêÜÁöÑÂü∫Á°ÄÔºåÊèê‰æõ‰∏â‰∏™Âü∫Êú¨ÂáΩÊï∞Ôºö
#
# .. list-table:: ``StateModule`` ÁöÑÊñπÊ≥ï
# :header-rows: 1
#
# * - ÊñπÊ≥ï
# - ÂèÇÊï∞
# - ÊèèËø∞
# * - ``register_state``
# - | ``attr_name``,
# | ``custom_to_json`` ÔºàÂèØÈÄâÔºâ,
# | ``custom_from_json`` ÔºàÂèØÈÄâÔºâ
# - Â∞ÜÂ±ûÊÄßÊ≥®ÂÜå‰∏∫ÂÖ∂Áä∂ÊÄÅÔºåÂ∏¶ÊúâÂèØÈÄâÁöÑÂ∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñÂáΩÊï∞„ÄÇ
# * - ``state_dict``
# -
# - Ëé∑ÂèñÂΩìÂâçÂØπË±°ÁöÑÁä∂ÊÄÅÂ≠óÂÖ∏
# * - ``load_state_dict``
# - | ``state_dict``,
# | ``strict`` ÔºàÂèØÈÄâÔºâ
# - Â∞ÜÁä∂ÊÄÅÂ≠óÂÖ∏Âä†ËΩΩÂà∞ÂΩìÂâçÂØπË±°
#
# Âú® ``StateModule`` ÁöÑÂØπË±°‰∏≠Ôºå‰ª•‰∏ãÊâÄÊúâÂ±ûÊÄßÈÉΩÂ∞ÜË¢´ËßÜ‰∏∫ÂÖ∂Áä∂ÊÄÅÁöÑ‰∏ÄÈÉ®ÂàÜÔºö
#
# - ÁªßÊâøËá™ ``StateModule`` ÁöÑ **Â±ûÊÄß**
# - ÈÄöËøá ``register_state`` ÊñπÊ≥ïÊ≥®ÂÜåÁöÑ **Â±ûÊÄß**
#
# Ê≥®ÊÑè ``StateModule`` ÊîØÊåÅ **ÂµåÂ•ó** Â∫èÂàóÂåñÂíåÂèçÂ∫èÂàóÂåñÔºå‰æãÂ¶Ç‰∏ãÈù¢ÁöÑÁ§∫‰æã‰∏≠Ôºå``ClassB`` ‰∏≠ÂåÖÂê´‰∏Ä‰∏™ ``ClassA`` ÁöÑÂÆû‰æãÔºö
#
class ClassA(StateModule):
def __init__(self) -> None:
super().__init__()
self.cnt = 123
# Â∞Ü cnt Â±ûÊÄßÊ≥®ÂÜå‰∏∫Áä∂ÊÄÅ
self.register_state("cnt")
class ClassB(StateModule):
def __init__(self) -> None:
super().__init__()
# Â±ûÊÄß "a" ÁªßÊâøËá™ StateModuleÔºåÂ∞ÜËá™Âä®ËßÜ‰∏∫Áä∂ÊÄÅÁöÑ‰∏ÄÈÉ®ÂàÜ
self.a = ClassA()
# ÊâãÂä®Â∞ÜÂ±ûÊÄß "c" Ê≥®ÂÜå‰∏∫Áä∂ÊÄÅ
self.c = "Hello, world!"
self.register_state("c")
obj_b = ClassB()
print("obj_b.a ÁöÑÁä∂ÊÄÅÔºö")
print(obj_b.a.state_dict())
print("\nobj_b ÁöÑÁä∂ÊÄÅÔºö")
print(json.dumps(obj_b.state_dict(), indent=4))
# %%
# Êàë‰ª¨ÂèØ‰ª•ËßÇÂØüÂà∞ ``obj_b`` ÁöÑÁä∂ÊÄÅËá™Âä®ÂåÖÂê´‰∫ÜÂÖ∂Â±ûÊÄß ``a`` ÁöÑÁä∂ÊÄÅ„ÄÇ
#
# Âú® AgentScope ‰∏≠Ôºå``AgentBase``„ÄÅ``MemoryBase``„ÄÅ``LongTermMemoryBase`` Âíå ``Toolkit`` Á±ªÈÉΩÁªßÊâøËá™ ``StateModule``ÔºåÂõ†Ê≠§ÊîØÊåÅËá™Âä®ÂíåÂµåÂ•óÁä∂ÊÄÅÁÆ°ÁêÜ„ÄÇ
#
# ÂàõÂª∫‰∏Ä‰∏™Êô∫ËÉΩ‰Ωì
agent = ReActAgent(
name="Friday",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Friday ÁöÑÂä©Êâã„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
),
formatter=DashScopeChatFormatter(),
memory=InMemoryMemory(),
toolkit=Toolkit(),
)
initial_state = agent.state_dict()
print("Êô∫ËÉΩ‰ΩìÁöÑÂàùÂßãÁä∂ÊÄÅÔºö")
print(json.dumps(initial_state, indent=4, ensure_ascii=False))
# %%
# ÁÑ∂ÂêéÊàë‰ª¨ÈÄöËøáÁîüÊàêÂõûÂ§çÊ∂àÊÅØÊù•ÊîπÂèòÂÖ∂Áä∂ÊÄÅÔºö
#
async def example_agent_state() -> None:
"""Êô∫ËÉΩ‰ΩìÁä∂ÊÄÅÁÆ°ÁêÜÁ§∫‰æã„ÄÇ"""
await agent(Msg("user", "‰Ω†Â•ΩÔºåÊô∫ËÉΩ‰ΩìÔºÅ", "user"))
print("ÁîüÊàêÂõûÂ§çÂêéÊô∫ËÉΩ‰ΩìÁöÑÁä∂ÊÄÅÔºö")
print(json.dumps(agent.state_dict(), indent=4, ensure_ascii=False))
asyncio.run(example_agent_state())
# %%
# Áé∞Âú®Êàë‰ª¨Â∞ÜÊô∫ËÉΩ‰ΩìÁöÑÁä∂ÊÄÅÊÅ¢Â§çÂà∞ÂàùÂßãÁä∂ÊÄÅÔºö
#
agent.load_state_dict(initial_state)
print("Âä†ËΩΩÂàùÂßãÁä∂ÊÄÅÂêéÔºö")
print(json.dumps(agent.state_dict(), indent=4, ensure_ascii=False))
# %%
# ‰ºöËØùÁÆ°ÁêÜ
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# ‰ºöËØùÔºàSessionÔºâÊòØÂ∫îÁî®Á®ãÂ∫è‰∏≠Áä∂ÊÄÅÁöÑÈõÜÂêàÔºå‰æãÂ¶ÇÂ§ö‰∏™Êô∫ËÉΩ‰Ωì„ÄÇ
#
# AgentScope Êèê‰æõ‰∫Ü ``SessionBase`` Á±ªÔºåÂåÖÂê´‰∏§‰∏™Áî®‰∫é‰ºöËØùÁÆ°ÁêÜÁöÑÊäΩË±°ÊñπÊ≥ïÔºö``save_session_state`` Âíå ``load_session_state``„ÄÇ
# ÂºÄÂèëËÄÖÂèØ‰ª•ÁªßÊâøËØ•Á±ªÊù•ÂÆûÁé∞Ëá™Â∑±ÁöÑÁä∂ÊÄÅ‰øùÂ≠òÊñπÊ°àÔºå‰æãÂ¶ÇÂØπÊé•Âà∞Ëá™Â∑±ÁöÑÊï∞ÊçÆÂ∫ìÊàñÊñá‰ª∂Á≥ªÁªü„ÄÇ
#
# Âú® AgentScope ‰∏≠ÔºåÊàë‰ª¨Êèê‰æõ‰∫ÜÂü∫‰∫é JSON ÂíåÊñá‰ª∂Á≥ªÁªüÁöÑÁöÑ‰ºöËØùÁ±ª ``JSONSession``Ôºå
# ÂÆÉ‰ºöÂ∞ÜÁä∂ÊÄÅ‰øùÂ≠òÂà∞‰ºöÂåñ ID ÂëΩÂêçÁöÑ JSON Êñá‰ª∂‰∏≠Ôºå‰πüÂèØ‰ª•‰ªé‰∏≠Âä†ËΩΩÁä∂ÊÄÅ„ÄÇ
#
# ‰øùÂ≠ò‰ºöËØùÁä∂ÊÄÅ
# -----------------------------------------
#
# ÈÄöËøáÁîüÊàêÂõûÂ§çÊ∂àÊÅØÊîπÂèòÊô∫ËÉΩ‰ΩìÁä∂ÊÄÅ
asyncio.run(example_agent_state())
print("\nÊô∫ËÉΩ‰ΩìÁöÑÁä∂ÊÄÅÔºö")
print(json.dumps(agent.state_dict(), indent=4, ensure_ascii=False))
# %%
# ÁÑ∂ÂêéÊàë‰ª¨Â∞ÜÂÖ∂‰øùÂ≠òÂà∞‰ºöËØùÊñá‰ª∂‰∏≠Ôºö
session = JSONSession(
save_dir="./", # ‰øùÂ≠òÊâÄÊúâsessionÊñá‰ª∂ÁöÑÁõÆÂΩï
)
async def example_session() -> None:
"""‰ºöËØùÁÆ°ÁêÜÁ§∫‰æã„ÄÇ"""
# ÂèØ‰ª•‰øùÂ≠òÂ§ö‰∏™Áä∂ÊÄÅÔºåÂè™ÈúÄË¶ÅËæìÂÖ•ÁöÑÂØπË±°‰∏∫ `StateModule` ÁöÑÂ≠êÁ±ª„ÄÇ
await session.save_session_state(
session_id="user_bob",
agent=agent,
)
print("‰øùÂ≠òÁöÑÁä∂ÊÄÅÔºö")
with open("./user_bob.json", "r", encoding="utf-8") as f:
print(json.dumps(json.load(f), indent=4, ensure_ascii=False))
asyncio.run(example_session())
# %%
# Âä†ËΩΩ‰ºöËØùÁä∂ÊÄÅ
# -----------------------------------------
# ÁÑ∂ÂêéÊàë‰ª¨ÂèØ‰ª•‰ªé‰ºöËØùÊñá‰ª∂‰∏≠Âä†ËΩΩÁä∂ÊÄÅÔºö
#
async def example_load_session() -> None:
"""Âä†ËΩΩ‰ºöËØùÁä∂ÊÄÅÁ§∫‰æã„ÄÇ"""
# Ê∏ÖÁ©∫Êô∫ËÉΩ‰ΩìÁä∂ÊÄÅ
await agent.memory.clear()
print("ÂΩìÂâçÊô∫ËÉΩ‰ΩìÁä∂ÊÄÅÔºö")
print(json.dumps(agent.state_dict(), indent=4, ensure_ascii=False))
# ‰ªé‰ºöËØùÊñá‰ª∂‰∏≠Âä†ËΩΩÁä∂ÊÄÅ
await session.load_session_state(
session_id="user_bob",
# ËøôÈáå‰ΩøÁî®ÁöÑÂÖ≥ÈîÆËØçÂèÇÊï∞ÂøÖÈ°ª‰∏é `save_session_state` ‰∏≠ÁöÑÂèÇÊï∞‰∏ÄËá¥
agent=agent,
)
print("Âä†ËΩΩ‰ºöËØùÁä∂ÊÄÅÂêéÊô∫ËÉΩ‰ΩìÁöÑÁä∂ÊÄÅÔºö")
print(json.dumps(agent.state_dict(), indent=4, ensure_ascii=False))
asyncio.run(example_load_session())
# %%
# Ê≠§Êó∂Êàë‰ª¨ÂèØ‰ª•ËßÇÂØüÂà∞Êô∫ËÉΩ‰ΩìÁöÑÁä∂ÊÄÅÂ∑≤ÁªèÊÅ¢Â§çÂà∞‰πãÂâç‰øùÂ≠òÁöÑÁä∂ÊÄÅ„ÄÇ
#
---- task_studio.py ----
# -*- coding: utf-8 -*-
"""
.. _studio:
AgentScope Studio
=========================
AgentScope Studio ÊòØ‰∏Ä‰∏™Êú¨Âú∞ÈÉ®ÁΩ≤ÁöÑ Web Â∫îÁî®Á®ãÂ∫èÔºåÂÆÉ
- ‰∏∫Êô∫ËÉΩ‰ΩìÂ∫îÁî®Á®ãÂ∫èÁöÑÂºÄÂèëÊèê‰æõ **È°πÁõÆÁÆ°ÁêÜ**
- ‰∏∫ËøêË°å‰∏≠ÁöÑÂ∫îÁî®Á®ãÂ∫èÊèê‰æõ **ÂèØËßÜÂåñ** ËøΩË∏™
- ÂÜÖÁΩÆ‰∏Ä‰∏™‰∏∫ "Friday" ÁöÑ **Êô∫ËÉΩ‰Ωì**ÔºåÊîØÊåÅÁî®Êà∑‰∫åÊ¨°ÂºÄÂèë
.. note:: Studio Ê≠£Âú®Âø´ÈÄüÂºÄÂèë‰∏≠ÔºåÊõ¥Â§öÂäüËÉΩÂç≥Â∞ÜÊé®Âá∫ÔºÅ
.. figure:: ../../_static/images/studio_home.webp
:width: 100%
:alt: AgentScope Studio ‰∏ªÈ°µ
:class: bordered-image
:align: center
AgentScope Studio ‰∏ªÈ°µ
Âø´ÈÄüÂºÄÂßã
~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope Studio ÈÄöËøá ``npm`` ÂÆâË£ÖÔºö
.. code-block:: bash
npm install -g @agentscope/studio
‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä® StudioÔºö
.. code-block:: bash
as_studio
Ë¶ÅÂ∞ÜÂ∫îÁî®Á®ãÂ∫èËøûÊé•Âà∞ StudioÔºåËØ∑Âú® ``agentscope.init`` ÂáΩÊï∞‰∏≠‰ΩøÁî® ``studio_url`` ÂèÇÊï∞Ôºö
.. code-block:: python
import agentscope
agentscope.init(studio_url="http://localhost:8000")
# Â∫îÁî®Á®ãÂ∫è‰ª£Á†Å
...
ÁÑ∂ÂêéÂèØ‰ª•Âú® Studio ‰∏≠ÁúãÂà∞ËØ•Â∫îÁî®Á®ãÂ∫èÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö
.. figure:: ../../_static/images/studio_project.webp
:width: 100%
:alt: È°πÁõÆÁÆ°ÁêÜ
:class: bordered-image
:align: center
AgentScope Studio ‰∏≠ÁöÑÈ°πÁõÆÁÆ°ÁêÜ
ÂÖ≥‰∫éÂ∫îÁî®Á®ãÂ∫èÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºå‰æãÂ¶Ç token ‰ΩøÁî®ÊÉÖÂÜµ„ÄÅÊ®°ÂûãË∞ÉÁî®ÂíåËøΩË∏™‰ø°ÊÅØÔºåÈÉΩÂèØ‰ª•Âú® Studio ‰∏≠Êü•Áúã„ÄÇ
.. figure:: ../../_static/images/studio_run.webp
:width: 100%
:alt: AgentScope Studio ËøêË°åÈ°µÈù¢
:class: bordered-image
:align: center
AgentScope Studio ‰∏≠ÁöÑÂ∫îÁî®Á®ãÂ∫èÂèØËßÜÂåñ
Friday Êô∫ËÉΩ‰Ωì
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Friday ÊòØÁî± AgentScope ÊûÑÂª∫ÁöÑÂÆûÈ™åÊÄßÊú¨Âú∞ÈÉ®ÁΩ≤Êô∫ËÉΩ‰ΩìÔºåÊó®Âú®
- ÂõûÁ≠îÂÖ≥‰∫é AgentScope ÂºÄÂèëÁöÑÈóÆÈ¢òÔºå
- ‰∏∫ÂºÄÂèëËÄÖÊèê‰æõ‰æøÊç∑ÁöÑ‰∫åÊ¨°ÂºÄÂèëÁéØÂ¢ÉÔºå
- ÈõÜÊàê AgentScope ‰∏≠ÊâÄÊúâÂèØÁî®ÂäüËÉΩ‰ª•ÊûÑÂª∫Êõ¥Âº∫Â§ßÁöÑÊô∫ËÉΩ‰ΩìÔºå‰ª•Âèä
- ÊåÅÁª≠ÊµãËØïÂíåÈõÜÊàê AgentScope ‰∏≠ÁöÑÈ´òÁ∫ßÂäüËÉΩ„ÄÇ
.. note:: Êàë‰ª¨ÈùûÂ∏∏Ê¨¢ËøéÂºÄÊ∫êÁ§æÂå∫Ë¥°ÁåÆÂπ∂ÊîπËøõ FridayÔºÅÊ¨¢ËøéÂú®Êàë‰ª¨ÁöÑ `GitHub ‰ªìÂ∫ì <https://github.com/agentscope-ai/agentscope>`_ ‰∏äÊèêÂá∫ÈóÆÈ¢òÊàñÊãâÂèñËØ∑Ê±Ç„ÄÇ
Êàë‰ª¨Ê≠£Âú®ÊåÅÁª≠ÊîπËøõ FridayÔºåÁõÆÂâçÂÆÉÈõÜÊàê‰∫Ü AgentScope ‰∏≠ÁöÑ‰ª•‰∏ãÂäüËÉΩÔºö
.. list-table::
:header-rows: 1
* - ÂäüËÉΩ
- Áä∂ÊÄÅ
- Ëøõ‰∏ÄÊ≠•ÈòÖËØª
- ÊèèËø∞
* - ÂÖÉÂ∑•ÂÖ∑
- ‚úÖ
- :ref:`tool`
- ÂàÜÁªÑÂ∑•ÂÖ∑ÁÆ°ÁêÜÔºåÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìËá™Â∑±Êõ¥ÊîπË£ÖÂ§áÁöÑÂ∑•ÂÖ∑„ÄÇ
* - Êô∫ËÉΩ‰ΩìÈí©Â≠ê
- ‚úÖ
- :ref:`hook`
- ‰ΩøÁî®Èí©Â≠êÂ∞ÜÊâìÂç∞Ê∂àÊÅØËΩ¨ÂèëÂà∞ÂâçÁ´Ø„ÄÇ
* - Êô∫ËÉΩ‰Ωì‰∏≠Êñ≠
- ‚úÖ
- :ref:`agent`
- ÂÖÅËÆ∏Áî®Êà∑ÈÄöËøáÂêéÂ§ÑÁêÜ‰∏≠Êñ≠Êô∫ËÉΩ‰ΩìÁöÑÂõûÂ§çËøáÁ®ã„ÄÇ
* - Êà™Êñ≠ÊèêÁ§∫
- ‚úÖ
- :ref:`prompt`
- ÊîØÊåÅ‰ΩøÁî®È¢ÑËÆæÁöÑÊúÄÂ§ß token ÈôêÂà∂Êà™Êñ≠ÊèêÁ§∫„ÄÇ
* - Áä∂ÊÄÅÂíå‰ºöËØùÁÆ°ÁêÜ
- ‚úÖ
- :ref:`state`
- Êô∫ËÉΩ‰ΩìÁöÑËá™Âä®Áä∂ÊÄÅÁÆ°ÁêÜÂíå‰ºöËØùÁÆ°ÁêÜÔºåÂú®‰∏çÂêåËøêË°å‰πãÈó¥Áª¥Êä§Áä∂ÊÄÅ„ÄÇ
* - ÈïøÊúüËÆ∞ÂøÜ
- üöß
- :ref:`memory`
- ÊîØÊåÅÈïøÊúüËÆ∞ÂøÜÁÆ°ÁêÜ„ÄÇ
"""
---- task_token.py ----
# -*- coding: utf-8 -*-
"""
.. _token:
Token ËÆ°Êï∞
=========================
AgentScope Âú® ``agentscope.token`` Ê®°Âùó‰∏ãÊèê‰æõ‰∫Ü token ËÆ°Êï∞ÂäüËÉΩÔºåÁî®‰∫éËÆ°ÁÆóÁªôÂÆöÊ∂àÊÅØ‰∏≠
ÁöÑ token Êï∞ÈáèÔºåÂÖÅËÆ∏ÂºÄÂèëËÄÖÂú®Ë∞ÉÁî® LLM API ÂâçÈ¢Ñ‰º∞ token Êï∞Èáè„ÄÇ
ÂÖ∑‰ΩìËÄåË®ÄÔºåÂèØÁî®ÁöÑ token ËÆ°Êï∞Âô®Â¶Ç‰∏ãÔºö
.. list-table::
:header-rows: 1
* - LLM API
- Á±ª
- ÂÆûÁé∞ÊñπÂºè
- ÊîØÊåÅÂõæÂÉèÊï∞ÊçÆ
- ÊîØÊåÅÂ∑•ÂÖ∑
* - Anthropic
- ``AnthropicTokenCounter``
- ÂÆòÊñπ API
- ‚úÖ
- ‚úÖ
* - OpenAI
- ``OpenAITokenCounter``
- Êú¨Âú∞ËÆ°ÁÆó
- ‚úÖ
- ‚úÖ
* - Gemini
- ``GeminiTokenCounter``
- ÂÆòÊñπ API
- ‚úÖ
- ‚úÖ
* - HuggingFace
- ``HuggingFaceTokenCounter``
- Âü∫‰∫éTokenizerËÆ°ÁÆó
- ÂèñÂÜ≥‰∫éÊ®°Âûã
- ÂèñÂÜ≥‰∫éÊ®°Âûã
.. tip:: Ê†ºÂºèÂåñÂô®Ê®°ÂùóÂ∑≤ÈõÜÊàê‰∫Ü token ËÆ°Êï∞Âô®‰ª•ÊîØÊåÅÊèêÁ§∫Êà™Êñ≠„ÄÇÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØËØ∑ÂèÇËÄÉ :ref:`prompt` ÈÉ®ÂàÜ„ÄÇ
.. note::
- ÂØπ‰∫é DashScope Ê®°ÂûãÔºåÁõÆÂâç dashscope Â∫ì‰∏çÊèê‰æõ token ËÆ°Êï∞ API„ÄÇÂõ†Ê≠§Êàë‰ª¨Âª∫ËÆÆ‰ΩøÁî® HuggingFace token ËÆ°Êï∞Âô®‰ª£Êõø„ÄÇ
- ÂØπ‰∫é OpenAI Ê®°ÂûãÔºåÁî±‰∫éÂÆòÊñπÊú™Êèê‰æõ token ËÆ°Êï∞ APIÔºåÂõ†Ê≠§ÂèØËÉΩÂ≠òÂú®‰∏éÂÆòÊñπËÆ°ÁÆóÁªìÊûú‰∏ç‰∏ÄËá¥ÁöÑÊÉÖÂÜµ„ÄÇ
‰∏ãÈù¢Â±ïÁ§∫‰ΩøÁî® OpenAI token ËÆ°Êï∞Âô®ËÆ°ÁÆó token Êï∞ÈáèÁöÑÁ§∫‰æãÔºö
"""
import asyncio
from agentscope.token import OpenAITokenCounter
async def example_token_counting():
# Á§∫‰æãÊ∂àÊÅØ
messages = [
{"role": "user", "content": "Hello!"},
{"role": "assistant", "content": "Hi, how can I help you?"},
]
# OpenAI token ËÆ°Êï∞
openai_counter = OpenAITokenCounter(model_name="gpt-4.1")
n_tokens = await openai_counter.count(messages)
print(f"Token Êï∞Èáè: {n_tokens}")
asyncio.run(example_token_counting())
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ------------------------------
#
# - :ref:`prompt`
#
---- task_tool.py ----
# -*- coding: utf-8 -*-
"""
.. _tool:
Â∑•ÂÖ∑
=========================
‰∏∫‰∫ÜÁ°Æ‰øùÂáÜÁ°ÆÂèØÈù†ÁöÑÂ∑•ÂÖ∑Ëß£ÊûêÔºåAgentScope ÂÖ®Èù¢ÊîØÊåÅÂ∑•ÂÖ∑ API ÁöÑ‰ΩøÁî®ÔºåÂÖ∑Êúâ‰ª•‰∏ãÁâπÊÄßÔºö
- ÊîØÊåÅ‰ªéÊñáÊ°£Â≠óÁ¨¶‰∏≤ **Ëá™Âä®** Ëß£ÊûêÂ∑•ÂÖ∑ÂáΩÊï∞
- ÊîØÊåÅ **ÂêåÊ≠•ÂíåÂºÇÊ≠•** Â∑•ÂÖ∑ÂáΩÊï∞
- ÊîØÊåÅ **ÊµÅÂºè** Â∑•ÂÖ∑ÂìçÂ∫îÔºàÂêåÊ≠•ÊàñÂºÇÊ≠•ÁîüÊàêÂô®Ôºâ
- ÊîØÊåÅÂØπÂ∑•ÂÖ∑ JSON Schema ÁöÑ **Âä®ÊÄÅÊâ©Â±ï**
- ÊîØÊåÅÁî®Êà∑ÂÆûÊó∂ **‰∏≠Êñ≠** Â∑•ÂÖ∑ÁöÑÊâßË°å
- ÊîØÊåÅÊô∫ËÉΩ‰ΩìÁöÑ **Ëá™‰∏ªÂ∑•ÂÖ∑ÁÆ°ÁêÜ**
ÊâÄÊúâ‰∏äËø∞ÂäüËÉΩÈÉΩÁî± AgentScope ‰∏≠ÁöÑ ``Toolkit`` Á±ªÂÆûÁé∞ÔºåËØ•Á±ªË¥üË¥£ÁÆ°ÁêÜÂ∑•ÂÖ∑ÂáΩÊï∞ÂèäÂÖ∂ÊâßË°å„ÄÇ
.. tip:: MCPÔºàÊ®°Âûã‰∏ä‰∏ãÊñáÂçèËÆÆÔºâÁöÑÊîØÊåÅËØ∑ÂèÇËÄÉ :ref:`mcp` ÈÉ®ÂàÜ„ÄÇ
"""
import asyncio
import inspect
import json
from typing import Any, AsyncGenerator
from pydantic import BaseModel, Field
import agentscope
from agentscope.message import TextBlock, ToolUseBlock
from agentscope.tool import ToolResponse, Toolkit, execute_python_code
# %%
# Â∑•ÂÖ∑ÂáΩÊï∞
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Âú® AgentScope ‰∏≠ÔºåÂ∑•ÂÖ∑ÂáΩÊï∞ÊòØ‰∏Ä‰∏™ Python ÁöÑÂèØË∞ÉÁî®ÂØπË±°ÔºåÂÆÉ
#
# - ËøîÂõû‰∏Ä‰∏™ ``ToolResponse`` ÂØπË±°Êàñ‰∫ßÁîü ``ToolResponse`` ÂØπË±°ÁöÑÁîüÊàêÂô®ÔºàÂèØ‰ª•ÊòØÂºÇÊ≠•ÊàñÂêåÊ≠•Ôºâ
# - ÂÖ∑ÊúâÊèèËø∞Â∑•ÂÖ∑ÂäüËÉΩÂíåÂèÇÊï∞ÁöÑÊñáÊ°£Â≠óÁ¨¶‰∏≤
#
# Â∑•ÂÖ∑ÂáΩÊï∞ÁöÑÊ®°ÊùøÂ¶Ç‰∏ãÔºö
def tool_function(a: int, b: str) -> ToolResponse:
"""{ÂáΩÊï∞ÊèèËø∞}
Args:
a (int):
{Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÁöÑÊèèËø∞}
b (str):
{Á¨¨‰∫å‰∏™ÂèÇÊï∞ÁöÑÊèèËø∞}
"""
# %%
# .. tip:: ÂÆû‰æãÊñπÊ≥ïÂíåÁ±ªÊñπÊ≥ï‰πüÂèØ‰ª•Áî®‰ΩúÂ∑•ÂÖ∑ÂáΩÊï∞Ôºå``Toolkit`` ‰∏≠Â∞ÜËá™Âä®ÂøΩÁï• ``self`` Âíå ``cls`` ÂèÇÊï∞„ÄÇ
#
# AgentScope Âú® ``agentscope.tool`` Ê®°Âùó‰∏ãÊèê‰æõ‰∫ÜÂá†‰∏™ÂÜÖÁΩÆÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåÂ¶Ç ``execute_python_code``„ÄÅ``execute_shell_command`` ÂíåÊñáÊú¨Êñá‰ª∂ËØªÂÜôÂáΩÊï∞„ÄÇ
#
print("ÂÜÖÁΩÆÂ∑•ÂÖ∑ÂáΩÊï∞Ôºö")
for _ in agentscope.tool.__all__:
if _ not in ["Toolkit", "ToolResponse"]:
print(_)
# %%
# Â∑•ÂÖ∑Ê®°ÂùóÔºàToolkitÔºâ
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ``Toolkit`` Á±ªËÆæËÆ°Áî®‰∫éÁÆ°ÁêÜÂ∑•ÂÖ∑ÂáΩÊï∞Ôºå‰ªéÊñáÊ°£Â≠óÁ¨¶‰∏≤‰∏≠ÊèêÂèñÂÆÉ‰ª¨ÁöÑ JSON SchemaÔºåÂπ∂‰∏∫Â∑•ÂÖ∑ÊâßË°åÊèê‰æõÁªü‰∏ÄÊé•Âè£„ÄÇ
#
# Âü∫Êú¨Áî®Ê≥ï
# ------------------------------
# ``Toolkit`` Á±ªÁöÑÂü∫Êú¨ÂäüËÉΩÊòØÊ≥®ÂÜåÂ∑•ÂÖ∑ÂáΩÊï∞Âπ∂ÊâßË°åÂÆÉ‰ª¨„ÄÇ
#
# ÂáÜÂ§á‰∏Ä‰∏™Ëá™ÂÆö‰πâÂ∑•ÂÖ∑ÂáΩÊï∞
async def my_search(query: str, api_key: str) -> ToolResponse:
"""‰∏Ä‰∏™ÁÆÄÂçïÁöÑÁ§∫‰æãÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
Args:
query (str):
ÊêúÁ¥¢Êü•ËØ¢„ÄÇ
api_key (str):
Áî®‰∫éË∫´‰ªΩÈ™åËØÅÁöÑ API ÂØÜÈí•„ÄÇ
"""
return ToolResponse(
content=[
TextBlock(
type="text",
text=f"Ê≠£Âú®‰ΩøÁî® API ÂØÜÈí• '{api_key}' ÊêúÁ¥¢ '{query}'",
),
],
)
# Âú®Â∑•ÂÖ∑Ê®°Âùó‰∏≠Ê≥®ÂÜåÂ∑•ÂÖ∑ÂáΩÊï∞
toolkit = Toolkit()
toolkit.register_tool_function(my_search)
# %%
# Ê≥®ÂÜåÂ∑•ÂÖ∑ÂáΩÊï∞ÂêéÔºåÂèØ‰ª•ÈÄöËøáË∞ÉÁî® ``get_json_schemas`` ÊñπÊ≥ïËé∑ÂèñÂÖ∂ JSON Schema„ÄÇ
#
print("Â∑•ÂÖ∑ JSON SchemasÔºö")
print(json.dumps(toolkit.get_json_schemas(), indent=4, ensure_ascii=False))
# %%
# ``Toolkit`` ËøòÂÖÅËÆ∏ÂºÄÂèëËÄÖ‰∏∫Â∑•ÂÖ∑ÂáΩÊï∞È¢ÑËÆæÂèÇÊï∞ÔºåËøôÂØπ‰∫é API ÂØÜÈí•ÊàñÂÖ∂‰ªñÊïèÊÑü‰ø°ÊÅØÁâπÂà´ÊúâÁî®„ÄÇ
#
# ÂÖàÊ∏ÖÁ©∫Â∑•ÂÖ∑Ê®°Âùó
toolkit.clear()
# ‰ΩøÁî®È¢ÑËÆæÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ê≥®ÂÜåÂ∑•ÂÖ∑ÂáΩÊï∞
toolkit.register_tool_function(my_search, preset_kwargs={"api_key": "xxx"})
print("Â∏¶È¢ÑËÆæÂèÇÊï∞ÁöÑÂ∑•ÂÖ∑ JSON SchemasÔºö")
print(json.dumps(toolkit.get_json_schemas(), indent=4, ensure_ascii=False))
# %%
# È¢ÑËÆæÂèÇÊï∞ÂêéÔºåËØ•ÂèÇÊï∞Â∞Ü‰ªé JSON schema ‰∏≠Ë¢´ÁßªÈô§ÔºåÂπ∂Âú®Â∑•ÂÖ∑Ë∞ÉÁî®Êó∂Ëá™Âä®‰º†ÈÄíÁªôËØ•Â∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
#
# Âú® ``Toolkit`` ‰∏≠Ôºå``call_tool_function`` ÊñπÊ≥ï‰ª• ``ToolUseBlock`` ‰Ωú‰∏∫ËæìÂÖ•ÊâßË°åÊåáÂÆöÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåÁªü‰∏ÄËøîÂõû‰∏Ä‰∏™ **ÂºÇÊ≠•ÁîüÊàêÂô®**ÔºåËØ•ÁîüÊàêÂô®‰∫ßÁîü ``ToolResponse`` ÂØπË±°„ÄÇ
#
# .. note:: AgentScope ‰∏≠ÔºåÊµÅÂºèËøîÂõûÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞Â∫îËØ•ÊòØ **‚ÄúÁ¥ØÁßØÁöÑ‚Äù**ÔºåÂç≥ÂΩìÂâçÂùóÁöÑÂÜÖÂÆπÂ∫îÂåÖÂê´‰πãÂâçÊâÄÊúâÂùóÁöÑÂÜÖÂÆπ„ÄÇ
#
async def example_tool_execution() -> None:
"""Â∑•ÂÖ∑Ë∞ÉÁî®ÊâßË°åÁ§∫‰æã„ÄÇ"""
res = await toolkit.call_tool_function(
ToolUseBlock(
type="tool_use",
id="123",
name="my_search",
input={"query": "AgentScope"},
),
)
# ÈùûÊµÅÂºèËøîÂõûÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞Âè™Êúâ‰∏Ä‰∏™ ToolResponse ËøîÂõû
print("Â∑•ÂÖ∑ÂìçÂ∫îÔºö")
async for tool_response in res:
print(tool_response)
asyncio.run(example_tool_execution())
# %%
# Âä®ÊÄÅÊâ©Â±ï JSON Schema
# --------------------------------------
#
# Toolkit ÂÖÅËÆ∏ÈÄöËøáË∞ÉÁî® ``set_extended_model`` ÊñπÊ≥ïÂä®ÊÄÅÊâ©Â±ïÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑ JSON schemas„ÄÇ
# ËøôÁßçÂäüËÉΩÂÖÅËÆ∏ÂºÄÂèëËÄÖÂú®‰∏ç‰øÆÊîπÂ∑•ÂÖ∑ÂáΩÊï∞ÂéüÂßãÂÆö‰πâÁöÑÊÉÖÂÜµ‰∏ãÔºåÂêëÂ∑•ÂÖ∑ÂáΩÊï∞Ê∑ªÂä†Êõ¥Â§öÂèÇÊï∞„ÄÇ
#
# .. tip:: Áõ∏ÂÖ≥Âú∫ÊôØÂåÖÊã¨Âä®ÊÄÅ :ref:`structured-output` Âíå CoTÔºàÊÄùÁª¥ÈìæÔºâÊé®ÁêÜ
#
# .. note:: Ë¶ÅÊâ©Â±ïÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞Â∫îËØ•Êé•ÂèóÂèØÂèòÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ôºà``**kwargs``ÔºâÔºå‰ª•‰æøÈôÑÂä†Â≠óÊÆµÂèØ‰ª•‰º†ÈÄíÁªôÂÆÉ„ÄÇ
#
# ‰ª• CoT Êé®ÁêÜ‰∏∫‰æãÔºåÊàë‰ª¨ÂèØ‰ª•Áî® ``thinking`` Â≠óÊÆµÊâ©Â±ïÊâÄÊúâÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåÂÖÅËÆ∏Êô∫ËÉΩ‰ΩìÊÄªÁªìÂΩìÂâçÁä∂ÊÄÅÁÑ∂ÂêéÂÜ≥ÂÆö‰∏ã‰∏ÄÊ≠•ÂÅö‰ªÄ‰πà„ÄÇ
#
# Á§∫‰æãÂ∑•ÂÖ∑ÂáΩÊï∞
def tool_function(**kwargs: Any) -> ToolResponse:
"""‰∏Ä‰∏™Â∑•ÂÖ∑ÂáΩÊï∞"""
return ToolResponse(
content=[
TextBlock(
type="text",
text=f"Êé•Êî∂Âà∞ÁöÑÂèÇÊï∞Ôºö{kwargs}",
),
],
)
# Ê∑ªÂä†‰∏Ä‰∏™ÊÄùËÄÉÂ≠óÊÆµÔºå‰ª•‰æøÊô∫ËÉΩ‰ΩìÂú®ÁªôÂá∫ÂÖ∂‰ªñÂèÇÊï∞‰πãÂâçÂèØ‰ª•ÊÄùËÄÉ„ÄÇ
class ThinkingModel(BaseModel):
"""Áî®‰∫éÈôÑÂä†Â≠óÊÆµÁöÑ Pydantic Ê®°Âûã„ÄÇ"""
thinking: str = Field(
description="ÊÄªÁªìÂΩìÂâçÁä∂ÊÄÅÂπ∂ÂÜ≥ÂÆö‰∏ã‰∏ÄÊ≠•ÂÅö‰ªÄ‰πà„ÄÇ",
)
# Ê≥®ÂÜå
toolkit.set_extended_model("my_search", ThinkingModel)
print("Êâ©Â±ïÂêéÁöÑ JSON SchemaÔºö")
print(json.dumps(toolkit.get_json_schemas(), indent=4, ensure_ascii=False))
# %%
# ‰∏≠Êñ≠Â∑•ÂÖ∑ÊâßË°å
# ------------------------------
# ``Toolkit`` Á±ªÊîØÊåÅ **ÂºÇÊ≠•Â∑•ÂÖ∑ÂáΩÊï∞** ÁöÑ **ÊâßË°å‰∏≠Êñ≠**ÔºåÂπ∂Êèê‰æõ **Èù¢ÂêëÊô∫ËÉΩ‰ΩìÁöÑÂêéÂ§ÑÁêÜÊú∫Âà∂**„ÄÇ
# ËøôÁßç‰∏≠Êñ≠Âü∫‰∫é asyncio ÂèñÊ∂àÊú∫Âà∂ÂÆûÁé∞ÔºåÂÖ∂ÂêéÂ§ÑÁêÜËøáÁ®ãÊ†πÊçÆÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑËøîÂõûÁ±ªÂûãËÄåÊúâÊâÄ‰∏çÂêå„ÄÇ
#
# .. note:: ÂØπ‰∫éÂêåÊ≠•ÔºàÂ∑•ÂÖ∑ÔºâÂáΩÊï∞ÔºåÂÆÉ‰ª¨ÁöÑÊâßË°åÊó†Ê≥ïÈÄöËøá asyncio ÂèñÊ∂àÊù•‰∏≠Êñ≠„ÄÇÂõ†Ê≠§ÂÖ∂‰∏≠Êñ≠Âú®Êô∫ËÉΩ‰ΩìÂÜÖËÄå‰∏çÊòØÂ∑•ÂÖ∑Ê®°ÂùóÂÜÖÂ§ÑÁêÜ„ÄÇ
# ÊúâÂÖ≥Êõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇËÄÉ :ref:`agent` ÈÉ®ÂàÜ„ÄÇ
#
# ÂÖ∑‰ΩìÊù•ËØ¥ÔºåÂ¶ÇÊûúÂ∑•ÂÖ∑ÂáΩÊï∞ËøîÂõû ``ToolResponse`` ÂØπË±°ÔºåÂ∞Ü‰∫ßÁîü‰∏Ä‰∏™Â∏¶Êúâ‰∏≠Êñ≠Ê∂àÊÅØÁöÑ ``ToolResponse`` ÂØπË±°„ÄÇ
# ËøôÊ†∑Êô∫ËÉΩ‰ΩìÂèØ‰ª•ËßÇÂØüÂà∞Ëøô‰∏Ä‰∏≠Êñ≠Âπ∂Áõ∏Â∫îÂú∞Â§ÑÁêÜÂÆÉ„ÄÇ
# Ê≠§Â§ñÔºåËØ• ``ToolResponse`` ÂØπË±°‰∏≠ÁöÑ ``is_interrupted`` Â∞ÜËÆæÁΩÆ‰∏∫ ``True``ÔºåÂ§ñÈÉ®Ë∞ÉÁî®ËÄÖÂèØ‰ª•ÂÜ≥ÂÆöÊòØÂê¶Â∞Ü ``CancelledError`` ÂºÇÂ∏∏ÊäõÂá∫Âà∞Â§ñÂ±Ç„ÄÇ
#
# ÂèØ‰ª•Ë¢´‰∏≠Êñ≠ÁöÑÂºÇÊ≠•Â∑•ÂÖ∑ÂáΩÊï∞Á§∫‰æãÂ¶Ç‰∏ãÔºö
#
async def non_streaming_function() -> ToolResponse:
"""‰∏Ä‰∏™ÂèØ‰ª•Ë¢´‰∏≠Êñ≠ÁöÑÈùûÊµÅÂºèÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ"""
await asyncio.sleep(1) # Ê®°ÊãüÈïøÊó∂Èó¥ËøêË°åÁöÑ‰ªªÂä°
# ‰∏∫ÊºîÁ§∫ÁõÆÁöÑÊ®°Êãü‰∏≠Êñ≠
raise asyncio.CancelledError()
# Áî±‰∫éÂèñÊ∂àÔºå‰ª•‰∏ã‰ª£Á†Å‰∏ç‰ºöË¢´ÊâßË°å
return ToolResponse(
content=[
TextBlock(
type="text",
text="ËøêË°åÊàêÂäüÔºÅ",
),
],
)
async def example_tool_interruption() -> None:
"""Â∑•ÂÖ∑‰∏≠Êñ≠Á§∫‰æã„ÄÇ"""
toolkit = Toolkit()
toolkit.register_tool_function(non_streaming_function)
res = await toolkit.call_tool_function(
ToolUseBlock(
type="tool_use",
id="123",
name="non_streaming_function",
input={},
),
)
async for tool_response in res:
print("Â∑•ÂÖ∑ÂìçÂ∫îÔºö")
print(tool_response)
print("‰∏≠Êñ≠Ê†áÂøóÔºö")
print(tool_response.is_interrupted)
asyncio.run(example_tool_interruption())
# %%
# ÂØπ‰∫éÊµÅÂºèÂ∑•ÂÖ∑ÂáΩÊï∞Ôºå``Toolkit`` Â∞ÜÊää‰∏≠Êñ≠Ê∂àÊÅØÈôÑÂä†Âà∞‰∏≠Êñ≠ÂèëÁîüÊó∂ÁöÑ ``ToolResponse`` ‰∏ä„ÄÇ
# ÈÄöËøáËøôÁßçÊñπÂºèÔºåÊô∫ËÉΩ‰ΩìÂèØ‰ª•ËßÇÂØüÂà∞Â∑•ÂÖ∑Âú®‰∏≠Êñ≠ÂâçËøîÂõûÁöÑÂÜÖÂÆπ„ÄÇ
#
# ‰∏≠Êñ≠ÊµÅÂºèÂ∑•ÂÖ∑ÂáΩÊï∞ÁöÑÁ§∫‰æãÂ¶Ç‰∏ãÔºö
#
async def streaming_function() -> AsyncGenerator[ToolResponse, None]:
"""‰∏Ä‰∏™ÂèØ‰ª•Ë¢´‰∏≠Êñ≠ÁöÑÊµÅÂºèÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ"""
# Ê®°Êãü‰∏ÄÂùóÂìçÂ∫î
yield ToolResponse(
content=[
TextBlock(
type="text",
text="1234",
),
],
stream=True,
)
# Ê®°Êãü‰∏≠Êñ≠
raise asyncio.CancelledError()
# Áî±‰∫éÂèñÊ∂àÔºå‰ª•‰∏ã‰ª£Á†Å‰∏ç‰ºöË¢´ÊâßË°å
yield ToolResponse(
content=[
TextBlock(
type="text",
text="123456789",
),
],
)
async def example_streaming_tool_interruption() -> None:
"""ÊµÅÂºèÂ∑•ÂÖ∑‰∏≠Êñ≠Á§∫‰æã„ÄÇ"""
toolkit = Toolkit()
toolkit.register_tool_function(streaming_function)
res = await toolkit.call_tool_function(
ToolUseBlock(
type="tool_use",
id="xxx",
name="streaming_function",
input={},
),
)
i = 0
async for tool_response in res:
print(f"Âùó {i}Ôºö")
print(tool_response)
print("‰∏≠Êñ≠Ê†áÂøóÔºö", tool_response.is_interrupted, "\n")
i += 1
asyncio.run(example_streaming_tool_interruption())
# %%
# Ëá™Âä®Â∑•ÂÖ∑ÁÆ°ÁêÜ
# -------------------------------------
# .. image:: https://img.alicdn.com/imgextra/i3/O1CN013cvRpO27MfesMsTeh_!!6000000007783-2-tps-840-521.png
# :width: 100%
# :align: center
# :alt: Ëá™Âä®Â∑•ÂÖ∑ÁÆ°ÁêÜ
#
#
# ``Toolkit`` Á±ªÈÄöËøáÂºïÂÖ• **Â∑•ÂÖ∑ÁªÑ** ÔºàGroupÔºâ ÁöÑÊ¶ÇÂøµÔºå‰ª•ÂèäÂêç‰∏∫ ``reset_equipped_tools`` ÁöÑ **ÂÖÉÂ∑•ÂÖ∑ÂáΩÊï∞** ÔºàMeta ToolÔºâ Êù•ÊîØÊåÅ **Ëá™Âä®Â∑•ÂÖ∑ÁÆ°ÁêÜ** „ÄÇ
#
# Â∑•ÂÖ∑ÁªÑÊòØ‰∏ÄÁªÑÁõ∏ÂÖ≥Â∑•ÂÖ∑ÂáΩÊï∞ÁöÑÈõÜÂêàÔºå‰æãÂ¶ÇÊµèËßàÂô®‰ΩøÁî®Â∑•ÂÖ∑„ÄÅÂú∞ÂõæÊúçÂä°Â∑•ÂÖ∑Á≠âÔºåÂÆÉ‰ª¨Â∞ÜË¢´‰∏ÄËµ∑ÁÆ°ÁêÜ„ÄÇÂ∑•ÂÖ∑ÁªÑÊúâÊøÄÊ¥ªÂíåÈùûÊøÄÊ¥ª‰∏§ÁßçÁä∂ÊÄÅÔºå
# Âè™ÊúâÂ∑•ÂÖ∑ÁªÑË¢´ÊøÄÊ¥ªÔºåÂÖ∂‰∏≠ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞ÊâçÂØπÊô∫ËÉΩ‰ΩìÂèØËßÅÔºåÂç≥ÂèØ‰ª•ÈÄöËøá ``toolkit.get_json_schemas()`` ÊñπÊ≥ïËÆøÈóÆ„ÄÇ
#
# Ê≥®ÊÑèÊúâ‰∏Ä‰∏™Âêç‰∏∫ ``basic`` ÁöÑÁâπÊÆäÁªÑÔºåÂÆÉÂßãÁªàÂ§Ñ‰∫éÊøÄÊ¥ªÁä∂ÊÄÅÔºåÊ≥®ÂÜåÂ∑•ÂÖ∑Êó∂Â¶ÇÊûúÊú™ÊåáÂÆöÁªÑÂêçÔºåÂàôÂ∑•ÂÖ∑ÂáΩÊï∞Â∞ÜÈªòËÆ§Ê∑ªÂä†Âà∞Ê≠§ÁªÑ„ÄÇ
#
# .. tip:: ``basic`` ÁªÑÁ°Æ‰øùÂºÄÂèëËÄÖ‰∏çÈúÄË¶Å‚ÄúÁªÑÁÆ°ÁêÜ‚ÄùÁöÑÂäüËÉΩÊó∂ÔºåÂ∑•ÂÖ∑ÁöÑÂü∫Êú¨‰ΩøÁî®‰∏ç‰ºöÂèóÂà∞ÂΩ±Âìç„ÄÇ
#
# Áé∞Âú®Êàë‰ª¨Â∞ùËØïÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ ``browser_use`` ÁöÑÂ∑•ÂÖ∑ÁªÑÔºåÂÖ∂‰∏≠ÂåÖÂê´‰∏Ä‰∫õÁΩëÈ°µÊµèËßàÂ∑•ÂÖ∑„ÄÇ
#
# Êàë‰ª¨ÂàõÂª∫‰∏Ä‰∫õÊµèËßàÂô®Êìç‰ΩúÁõ∏ÂÖ≥ÁöÑÂ∑•ÂÖ∑
def navigate(url: str) -> ToolResponse:
"""ÂØºËà™Âà∞ÁΩëÈ°µ„ÄÇ
Args:
url (str):
Ë¶ÅÂØºËà™Âà∞ÁöÑÁΩëÈ°µÁöÑ URL„ÄÇ
"""
pass
def click_element(element_id: str) -> ToolResponse:
"""ÁÇπÂáªÁΩëÈ°µ‰∏äÁöÑÂÖÉÁ¥†„ÄÇ
Args:
element_id (str):
Ë¶ÅÁÇπÂáªÁöÑÂÖÉÁ¥†ÁöÑ ID„ÄÇ
"""
pass
toolkit = Toolkit()
# ÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ browser_use ÁöÑÂ∑•ÂÖ∑ÁªÑ
toolkit.create_tool_group(
group_name="browser_use",
description="Áî®‰∫éÁΩëÈ°µÊµèËßàÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ",
active=False,
# ‰ΩøÁî®Ëøô‰∫õÂ∑•ÂÖ∑Êó∂ÁöÑÊ≥®ÊÑè‰∫ãÈ°π
notes="""1. ‰ΩøÁî® ``navigate`` ÊâìÂºÄÁΩëÈ°µ„ÄÇ
2. ÂΩìÈúÄË¶ÅÁî®Êà∑Ë∫´‰ªΩÈ™åËØÅÊó∂ÔºåËØ∑ÂêëÁî®Êà∑ËØ¢ÈóÆÂá≠ÊçÆ
3. ...""",
)
toolkit.register_tool_function(navigate, group_name="browser_use")
toolkit.register_tool_function(click_element, group_name="browser_use")
# Êàë‰ª¨‰πüÂèØ‰ª•Ê≥®ÂÜå‰∏Ä‰∫õÂü∫Êú¨Â∑•ÂÖ∑
toolkit.register_tool_function(execute_python_code)
# %%
# Ê≠§Êó∂ ``browser_use`` Êú™Ë¢´ÊøÄÊ¥ªÔºåÂ¶ÇÊûúÊàë‰ª¨Ê£ÄÊü•Â∑•ÂÖ∑ JSON schemaÔºåÂè™ËÉΩÁúãÂà∞ ``execute_python_code`` Â∑•ÂÖ∑Ôºö
print("Ê≠§Êó∂ÂØπÊô∫ËÉΩ‰ΩìÂèØËßÅÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞ JSON SchemasÔºö")
print(json.dumps(toolkit.get_json_schemas(), indent=4, ensure_ascii=False))
# %%
# ‰ΩøÁî® ``update_tool_groups`` ÊñπÊ≥ïÊøÄÊ¥ªÊàñÂÅúÁî®Â∑•ÂÖ∑ÁªÑÔºö
toolkit.update_tool_groups(group_names=["browser_use"], active=True)
print("ÊøÄÊ¥ªÂêéÂØπÊô∫ËÉΩ‰ΩìÂèØËßÅÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞ JSON SchemasÔºö")
print(json.dumps(toolkit.get_json_schemas(), indent=4, ensure_ascii=False))
# %%
# Ê≠§Â§ñÔºå``Toolkit`` Êèê‰æõ‰∫Ü‰∏Ä‰∏™Âêç‰∏∫ ``reset_equipped_tools`` ÁöÑÂÖÉÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåÂÆÉ‰ºöÂ∞ÜÊâÄÊúâÁªÑÂêçÔºàÈô§‰∫Ü "basic"Ôºâ‰Ωú‰∏∫‰∏Ä‰∏™ bool ÂûãÁöÑÂèÇÊï∞Ôºå
# ËÆ©Êô∫ËÉΩ‰ΩìË∞ÉÁî®ËØ•Â∑•ÂÖ∑Êù•ÂÜ≥ÂÆöË¶ÅÊøÄÊ¥ªÂì™‰∫õÂ∑•ÂÖ∑ÁªÑÔºö
#
# .. note:: Âú® ``ReActAgent`` Á±ªÁöÑÂÆûÁé∞‰∏≠ÔºåÂè™ÈúÄË¶ÅÂú®ÊûÑÈÄ†ÂáΩÊï∞‰∏≠Â∞Ü ``enable_meta_tool`` ËÆæÁΩÆ‰∏∫ ``True`` Âç≥ÂèØÂêØÁî®ÂÖÉÂ∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
#
# Ê≥®ÂÜåÂÖÉÂ∑•ÂÖ∑ÂáΩÊï∞
toolkit.register_tool_function(toolkit.reset_equipped_tools)
reset_equipped = next(
tool
for tool in toolkit.get_json_schemas()
if tool["function"]["name"] == "reset_equipped_tools"
)
print("``reset_equipped_tools`` ÂáΩÊï∞ÁöÑ JSON schemaÔºö")
print(
json.dumps(
reset_equipped,
indent=4,
ensure_ascii=False,
),
)
# %%
# ÂΩìÊô∫ËÉΩ‰ΩìË∞ÉÁî® ``reset_equipped_tools`` Êó∂ÔºåÂØπÂ∫îÂ∑•ÂÖ∑ÁªÑÂ∞ÜË¢´ÊøÄÊ¥ªÔºåÂêåÊó∂ËøîÂõûÁöÑÁªìÊûú‰∏≠Â∞ÜÂåÖÂê´Â∑•ÂÖ∑ÁöÑ‰ΩøÁî®Ê≥®ÊÑè‰∫ãÈ°π„ÄÇ
#
async def mock_agent_reset_tools() -> None:
"""Ê®°ÊãüÊô∫ËÉΩ‰ΩìË∞ÉÁî® reset_equipped_tools ÂáΩÊï∞„ÄÇ"""
res = await toolkit.call_tool_function(
ToolUseBlock(
type="tool_use",
id="456",
name="reset_equipped_tools",
input={
"browser_use": True, # ÊøÄÊ¥ªÊµèËßàÂô®‰ΩøÁî®Â∑•ÂÖ∑ÁªÑ
},
),
)
async for tool_response in res:
print("Â∑•ÂÖ∑ÂìçÂ∫î‰∏≠ÁöÑÊñáÂ≠óËøîÂõûÔºö")
print(tool_response.content[0]["text"])
asyncio.run(mock_agent_reset_tools())
# %%
# Ê≠§Â§ñÔºå``Toolkit`` ËøòÈÄöËøá ``get_activated_notes`` ÂáΩÊï∞Êèê‰æõÂ∑≤ÁªèË¢´ÊøÄÊ¥ª‰∫ÜÁöÑÂ∑•ÂÖ∑ÁªÑÁöÑ notesÔºåÂºÄÂèëËÄÖ‰πüÂèØ‰ª•Â∞ÜÂÖ∂ÁªÑË£ÖÂà∞Êô∫ËÉΩ‰ΩìÁöÑÁ≥ªÁªüÊèêÁ§∫‰∏≠Ôºå‰ªéËÄåËææÂà∞Âä®ÊÄÅÁÆ°ÁêÜÂ∑•ÂÖ∑ÁöÑ‰ΩúÁî®„ÄÇ
#
# .. tip:: Ëá™Âä®Â∑•ÂÖ∑ÁÆ°ÁêÜÂäüËÉΩÂ∑≤Âú® ``ReActAgent`` Á±ª‰∏≠ÂÆûÁé∞ÔºåÊúâÂÖ≥Êõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇËÄÉ :ref:`agent` ÈÉ®ÂàÜ„ÄÇ
#
# ÂÜçÂàõÂª∫‰∏Ä‰∏™Â∑•ÂÖ∑ÁªÑ
toolkit.create_tool_group(
group_name="map_service",
description="Ë∞∑Ê≠åÂú∞ÂõæÊúçÂä°Â∑•ÂÖ∑„ÄÇ",
active=True,
notes="""1. ‰ΩøÁî® ``get_location`` Ëé∑ÂèñÂú∞ÁÇπÁöÑ‰ΩçÁΩÆ„ÄÇ
2. ...""",
)
print("ÊøÄÊ¥ªÂ∑•ÂÖ∑ÁªÑÁöÑÊ±áÊÄªÊ≥®ÊÑè‰∫ãÈ°πÔºö")
print(toolkit.get_activated_notes())
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ---------------------
# - :ref:`agent`
# - :ref:`state`
# - :ref:`mcp`
#
---- task_tracing.py ----
# -*- coding: utf-8 -*-
"""
.. _tracing:
ËøΩË∏™
==============================
AgentScope ÂÆûÁé∞‰∫ÜÂü∫‰∫é OpenTelemetry ÁöÑËøΩË∏™Êù•ÁõëÊéßÂíåË∞ÉËØï
Êô∫ËÉΩ‰ΩìÂ∫îÁî®Á®ãÂ∫èÁöÑÊâßË°åÔºåÂÖ∑Êúâ‰ª•‰∏ãÁâπÊÄß
- ‰∏∫ LLM„ÄÅÂ∑•ÂÖ∑„ÄÅÊô∫ËÉΩ‰Ωì„ÄÅÊ†ºÂºèÂåñÂô®Á≠âÊèê‰æõÂÜÖÁΩÆËøΩË∏™
- ÊîØÊåÅÈîôËØØÂíåÂºÇÂ∏∏ËøΩË∏™
- Âú® AgentScope Studio ‰∏≠Êèê‰æõÂéüÁîüËøΩË∏™ **ÂèØËßÜÂåñ**
- ÊîØÊåÅËøûÊé•Âà∞ **Á¨¨‰∏âÊñπÂπ≥Âè∞**ÔºåÂ¶Ç `Arize-Phoenix <https://github.com/Arize-ai/phoenix>`_„ÄÅ`Langfuse <https://langfuse.com/>`_ Á≠â
ËÆæÁΩÆ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note:: ËøûÊé•Âà∞ :ref:`studio` ÊàñÁ¨¨‰∏âÊñπÂπ≥Âè∞Â∫îËØ•Âú®Â∫îÁî®Á®ãÂ∫èÂºÄÂßãÊó∂ÈÄöËøáË∞ÉÁî® ``agentscope.init`` ÂáΩÊï∞ÂÆåÊàê„ÄÇ
AgentScope Studio
---------------------------------------
.. figure:: ../../_static/images/studio_tracing.png
:width: 100%
:alt: AgentScope Studio ËøΩË∏™È°µÈù¢
:class: bordered-image
:align: center
*AgentScope Studio ‰∏≠ÁöÑËøΩË∏™È°µÈù¢*
ÂΩìËøûÊé•Âà∞ AgentScope Studio Êó∂ÔºåÂè™ÈúÄÂú® ``agentscope.init`` ÂáΩÊï∞‰∏≠Êèê‰æõ ``studio_url`` ÂèÇÊï∞„ÄÇ
.. code-block:: python
import agentscope
agentscope.init(studio_url="http://xxx:port")
Á¨¨‰∏âÊñπÂπ≥Âè∞
---------------------------------------
Ë¶ÅËøûÊé•Âà∞Á¨¨‰∏âÊñπËøΩË∏™Âπ≥Âè∞ÔºåËØ∑Âú® ``agentscope.init`` ÂáΩÊï∞‰∏≠ËÆæÁΩÆ ``tracing_url`` ÂèÇÊï∞„ÄÇ
``tracing_url`` ÊòØÊÇ®ÁöÑ OpenTelemetry Êî∂ÈõÜÂô®Êàñ‰ªª‰ΩïÊîØÊåÅ OTLPÔºàOpenTelemetry ÂçèËÆÆÔºâÁöÑÊúçÂä°Âô® URL„ÄÇ
.. code-block:: python
import agentscope
# ËøûÊé•Âà∞ OpenTelemetry ÂÖºÂÆπÁöÑÂêéÁ´Ø
agentscope.init(tracing_url="https://your-tracing-backend:port/traces")
‰ª• Arize-Phoenix Âíå Langfuse ‰∏∫‰æãÔºö
**Arize-Phoenix**ÔºöÈúÄË¶ÅÂú®ÁéØÂ¢ÉÂèòÈáè‰∏≠ËÆæÁΩÆ ``PHOENIX_API_KEY``„ÄÇ
.. code-block:: python
:caption: ËøûÊé•Âà∞ Arize Phoenix
# Arize Phoenix ÈõÜÊàê
import os
PHOENIX_API_KEY = os.environ.get("PHOENIX_API_KEY")
os.environ["OTEL_EXPORTER_OTLP_HEADERS"] = f"api_key={PHOENIX_API_KEY}"
agentscope.init(tracing_url="https://app.phoenix.arize.com/v1/traces")
**LangFuse**ÔºöÈúÄË¶ÅÂú®ÁéØÂ¢ÉÂèòÈáè‰∏≠ËÆæÁΩÆ ``LANGFUSE_PUBLIC_KEY`` Âíå ``LANGFUSE_SECRET_KEY``„ÄÇ
ÊéàÊùÉÂ§¥ÊòØ‰ΩøÁî®Ëøô‰∫õÂØÜÈí•ÊûÑÂª∫ÁöÑ„ÄÇ
.. code-block:: python
:caption: ËøûÊé•Âà∞ LangFuse
import os, base64
LANGFUSE_PUBLIC_KEY = os.environ["LANGFUSE_PUBLIC_KEY"]
LANGFUSE_SECRET_KEY = os.environ["LANGFUSE_SECRET_KEY"]
LANGFUSE_AUTH_STRING = f"{LANGFUSE_PUBLIC_KEY}:{LANGFUSE_SECRET_KEY}"
LANGFUSE_AUTH = base64.b64encode(LANGFUSE_AUTH_STRING.encode("utf-8")).decode("ascii")
os.environ["OTEL_EXPORTER_OTLP_HEADERS"] = f"Authorization=Basic {LANGFUSE_AUTH}"
# Ê¨ßÁõüÊï∞ÊçÆÂå∫Âüü
agentscope.init(tracing_url="https://cloud.langfuse.com/api/public/otel/v1/traces")
# ÁæéÂõΩÊï∞ÊçÆÂå∫Âüü
# agentscope.init(tracing_url="https://us.cloud.langfuse.com/api/public/otel/v1/traces")
Ëá™ÂÆö‰πâËøΩË∏™
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Â¶ÇÂâçÊâÄËø∞ÔºåAgentScope ‰∏≠ÁöÑËøΩË∏™ÂäüËÉΩÊòØÂü∫‰∫é OpenTelemetry ÂÆûÁé∞ÁöÑ„ÄÇ
ËøôÊÑèÂë≥ÁùÄ AgentScope ‰∏≠ÁöÑËøΩË∏™‰∏éÂºÄÂèëËÄÖÂü∫‰∫é OpenTelemetry SDK Ëá™Â∑±ÂÆûÁé∞ÁöÑÁöÑËøΩË∏™‰ª£Á†Å**ÂÆåÂÖ®ÂÖºÂÆπ**„ÄÇ
Ê≠§Â§ñÔºåAgentScope ÂÜÖÁΩÆ‰∫Ü‰ª•‰∏ãË£ÖÈ•∞Âô®Êù•ËøΩË∏™Áõ∏Â∫îÁöÑÊ®°ÂùóÔºåÂÆÉ‰ª¨ÂØπ‰∏çÂêåÁ±ªÁöÑÁâπÊÆäÂ±ûÊÄßÔºå‰ª•ÂèäËøîÂõûÂÄºÂÅö‰∫ÜÁõ∏Â∫îÁöÑÁâπÊÆäÂ§ÑÁêÜÔºö
- ``@trace_llm``ÔºöËøΩË∏™ ``ChatModelBase`` Â≠êÁ±ªÁöÑ ``__call__`` ÂáΩÊï∞
- ``@trace_reply``ÔºöËøΩË∏™ ``AgentBase`` Â≠êÁ±ªÁöÑ ``reply`` ÂáΩÊï∞
- ``@trace_format``ÔºöËøΩË∏™ ``FormatterBase`` Â≠êÁ±ªÁöÑ ``format`` ÂáΩÊï∞
- ``@trace``ÔºöËøΩË∏™‰∏ÄËà¨ÂáΩÊï∞
ËøΩË∏™Â§ßËØ≠Ë®ÄÊ®°Âûã
----------------------------------------
``@trace_llm`` Ë£ÖÈ•∞Âô®Áî®‰∫éËøΩË∏™ ``ChatModelBase`` Á±ªÁöÑ ``__call__`` ÂáΩÊï∞„ÄÇ
.. code-block:: python
:caption: ËøΩË∏™Êñ∞ÁöÑ ChatModel Á±ª
class ExampleChatModel(ChatModelBase):
\"\"\"Á§∫‰æãÊ®°Âûã\"\"\"
...
@trace_llm
async def __call__(
self,
*args: Any,
**kwargs: Any,
) -> AsyncGenerator[ChatResponse, None] | ChatResponse:
\"\"\"LLM Ë∞ÉÁî®\"\"\"
...
ËøΩË∏™Êô∫ËÉΩ‰Ωì
----------------------------------------
``@trace_reply`` Ë£ÖÈ•∞Âô®Áî®‰∫éËøΩË∏™Êô∫ËÉΩ‰ΩìÁöÑ `reply` ÂáΩÊï∞„ÄÇ
.. code-block:: python
:caption: ËøΩË∏™Êñ∞ÁöÑ Agent Á±ª
class ExampleAgent(AgentBase):
\"\"\"Á§∫‰æãÊô∫ËÉΩ‰ΩìÁ±ª\"\"\"
@trace_reply
async def reply(self, *args: Any, **kwargs: Any) -> Msg:
\"\"\"ÂõûÂ§çÊ∂àÊÅØ„ÄÇ\"\"\"
...
ËøΩË∏™Ê†ºÂºèÂåñÂô®
----------------------------------------
``@trace_format`` Ë£ÖÈ•∞Âô®Áî®‰∫éÊ†ºÂºèÂåñÂô®ÂÆûÁé∞Âπ∂ËøΩË∏™ `format` ÂáΩÊï∞„ÄÇ
.. code-block:: python
:caption: ËøΩË∏™Êñ∞ÁöÑ Formatter Á±ª
class ExampleFormatter(FormatterBase):
\"\"\"ÁÆÄÂçïÁöÑÁ§∫‰æãÊ†ºÂºèÂåñÂô®Á±ª\"\"\"
@trace_format
async def format(self, *args: Any, **kwargs: Any) -> list[dict]:
\"\"\"Á§∫‰æãÊ†ºÂºèÂåñ\"\"\"
‰∏ÄËà¨ÂáΩÊï∞ËøΩË∏™
----------------------------------------
``@trace`` Ë£ÖÈ•∞Âô®‰∏é‰∏äËø∞Ë£ÖÈ•∞Âô®‰∏çÂêåÔºåÂÆÉÊòØ‰∏Ä‰∏™ÈÄöÁî®ÁöÑËøΩË∏™Ë£ÖÈ•∞Âô®ÔºåÂèØ‰ª•Â∫îÁî®‰∫é‰ªª‰ΩïÂáΩÊï∞„ÄÇ
ÂÆÉÈúÄË¶Å‰∏Ä‰∏™ `name` ÂèÇÊï∞Êù•Ê†áËØÜË¢´ËøΩË∏™ÁöÑÂáΩÊï∞ÔºåÂπ∂‰∏îÂèØ‰ª•ËøΩË∏™ÂêÑÁßçÁ±ªÂûãÁöÑÂáΩÊï∞ÔºåÂåÖÊã¨Ôºö
- ÂêåÊ≠•ÂáΩÊï∞
- ÂêåÊ≠•ÁîüÊàêÂô®ÂáΩÊï∞
- ÂºÇÊ≠•ÂáΩÊï∞
- ÂºÇÊ≠•ÁîüÊàêÂô®ÂáΩÊï∞
.. code-block:: python
:caption: ‰∏ÄËà¨ËøΩË∏™Á§∫‰æã
# 1. ÂêåÊ≠•ÂáΩÊï∞
@trace(name='simple_function')
def simple_function(name: str, age: int) -> str:
\"\"\"Â∏¶ÊúâËá™Âä®ËøΩË∏™ÁöÑÁÆÄÂçïÂáΩÊï∞„ÄÇ\"\"\"
return f"‰Ω†Â•Ω, {name}! ‰Ω†ÁöÑÂπ¥ÈæÑÊòØ {age} Â≤Å„ÄÇ"
# 2. ÂêåÊ≠•ÁîüÊàêÂô®ÂáΩÊï∞
@trace(name='number_generator')
def number_generator(n: int) -> Generator[int, None, None]:
\"\"\"ÁîüÊàê‰ªé 0 Âà∞ n-1 ÁöÑÊï∞Â≠ó„ÄÇ\"\"\"
for i in range(n):
yield i
# 3. ÂºÇÊ≠•ÂáΩÊï∞
@trace(name='async_function')
async def async_function(data: dict) -> dict:
\"\"\"ÂºÇÊ≠•Â§ÑÁêÜÊï∞ÊçÆ„ÄÇ\"\"\"
return {"processed": data}
# 4. ÂºÇÊ≠•ÁîüÊàêÂô®ÂáΩÊï∞
@trace(name='async_stream')
async def async_stream(n: int) -> AsyncGenerator[str, None]:
\"\"\"ÂºÇÊ≠•ÁîüÊàêÊï∞ÊçÆÊµÅ„ÄÇ\"\"\"
for i in range(n):
yield f"data_{i}"
"""
---- workflow_concurrent_agents.py ----
# -*- coding: utf-8 -*-
"""
Concurrent Agents
===================================
Âú®ÂºÇÊ≠•ÁºñÁ®ãÁöÑÂ∏ÆÂä©‰∏ãÔºåÂ§öÊô∫ËÉΩ‰ΩìÂπ∂ÂèëÂèØ‰ª•ÈÄöËøá Python ‰∏≠ÁöÑ ``asyncio.gather`` ÊâßË°å„ÄÇ
‰∏ãÈù¢Â±ïÁ§∫‰∫Ü‰∏Ä‰∏™ÁÆÄÂçïÁöÑÁ§∫‰æãÔºåÂÖ∂‰∏≠ÂàõÂª∫‰∫Ü‰∏§‰∏™Êô∫ËÉΩ‰ΩìÂπ∂Âπ∂ÂèëÊâßË°å„ÄÇ
"""
import asyncio
from datetime import datetime
from typing import Any
from agentscope.agent import AgentBase
class ExampleAgent(AgentBase):
"""Áî®‰∫éÂπ∂ÂèëÊâßË°åÁöÑÁ§∫‰æãÊô∫ËÉΩ‰Ωì„ÄÇ"""
def __init__(self, name: str) -> None:
"""‰ΩøÁî®Êô∫ËÉΩ‰ΩìÂêçÁß∞ÂàùÂßãÂåñÊô∫ËÉΩ‰Ωì„ÄÇ"""
super().__init__()
self.name = name
async def reply(self, *args: Any, **kwargs: Any) -> None:
"""ÂõûÂ§çÊ∂àÊÅØ„ÄÇ"""
start_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
print(f"{self.name} ÂºÄÂßã‰∫é {start_time}")
await asyncio.sleep(3) # Ê®°ÊãüÈïøÊó∂Èó¥ËøêË°åÁöÑ‰ªªÂä°
end_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
print(f"{self.name} ÁªìÊùü‰∫é {end_time}")
async def run_concurrent_agents() -> None:
"""ËøêË°åÂπ∂ÂèëÊô∫ËÉΩ‰Ωì„ÄÇ"""
agent1 = ExampleAgent("Êô∫ËÉΩ‰Ωì 1")
agent2 = ExampleAgent("Êô∫ËÉΩ‰Ωì 2")
await asyncio.gather(agent1(), agent2())
asyncio.run(run_concurrent_agents())
---- workflow_conversation.py ----
# -*- coding: utf-8 -*-
"""
.. _conversation:
Conversation
======================
Conversation ÊòØ‰∏ÄÁßçÊô∫ËÉΩ‰ΩìÈó¥‰∫§Êç¢ÂíåÂÖ±‰∫´‰ø°ÊÅØÁöÑËÆæËÆ°Ê®°ÂºèÔºåÂ∏∏ËßÅ‰∫éÊ∏∏Êàè„ÄÅËÅäÂ§©Êú∫Âô®‰∫∫ÂíåÂ§öÊô∫ËÉΩ‰ΩìËÆ®ËÆ∫Âú∫ÊôØ„ÄÇ
Âú® AgentScope ‰∏≠Ôºåconversation ÁöÑÊûÑÂª∫Âú® **ÊòæÂºèÁöÑÊ∂àÊÅØ‰º†ÈÄí** Âü∫Á°Ä‰∏ä„ÄÇÂú®Êú¨Á´†‰∏≠ÔºåÊàë‰ª¨Â∞ÜÊºîÁ§∫Â¶Ç‰ΩïÊûÑÂª∫Ôºö
- User-assistant ‰πãÈó¥ÁöÑÂØπËØùÔºàËÅäÂ§©Êú∫Âô®‰∫∫Ôºâ
- Â§öÂÆû‰ΩìÂØπËØùÔºàÊ∏∏Êàè„ÄÅËÆ®ËÆ∫Á≠âÔºâ
ÂÆÉ‰ª¨ÁöÑ‰∏ªË¶ÅÂå∫Âà´Âú®‰∫é
- **ÊèêÁ§∫ÁöÑÊûÑÂª∫ÊñπÂºè**Ôºå‰ª•Âèä
- ‰ø°ÊÅØÂú®Êô∫ËÉΩ‰Ωì‰πãÈó¥ÁöÑ **‰º†Êí≠/ÂÖ±‰∫´** ÊñπÂºè„ÄÇ
"""
import asyncio
import json
import os
from agentscope.agent import ReActAgent, UserAgent
from agentscope.memory import InMemoryMemory
from agentscope.formatter import (
DashScopeChatFormatter,
DashScopeMultiAgentFormatter,
)
from agentscope.model import DashScopeChatModel
from agentscope.message import Msg
from agentscope.pipeline import MsgHub
from agentscope.tool import Toolkit
# %%
# User-Assistant ÂØπËØù
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User-assistant ÂØπËØùÔºå‰πüÁß∞‰∏∫ËÅäÂ§©Êú∫Âô®‰∫∫ÔºàchatbotÔºâÔºåÊòØÊúÄÂ∏∏ËßÅÁöÑÊô∫ËÉΩ‰ΩìÂ∫îÁî®Ôºå‰πüÊòØÂΩìÂâçÂ§ßÂ§öÊï∞ LLM API ÁöÑËÆæËÆ°Ê®°Âºè„ÄÇ
# Âú®ËøôÁßçÂØπËØùÂè™Êúâ‰∏§‰∏™ÂèÇ‰∏éËÄÖÔºöÁî®Êà∑ÔºàuserÔºâÂíåÊô∫ËÉΩ‰ΩìÔºàassistantÔºâ„ÄÇ
#
# Âú® AgentScope ‰∏≠ÔºåÂêçÁß∞‰∏≠Â∏¶Êúâ **"Chat"** ÁöÑÊ†ºÂºèÂåñÂô®‰∏ì‰∏∫ user-assistant ÂØπËØùËÆæËÆ°Ôºå
# Â¶Ç ``DashScopeChatFormatter``„ÄÅ``AnthropicChatFormatter`` Á≠â„ÄÇ
# ÂÆÉ‰ª¨‰ΩøÁî®Ê∂àÊÅØ‰∏≠ÁöÑ ``role`` Â≠óÊÆµÊù•Âå∫ÂàÜÁî®Êà∑ÂíåÊô∫ËÉΩ‰ΩìÔºåÂπ∂Áõ∏Â∫îÂú∞Ê†ºÂºèÂåñÊ∂àÊÅØ„ÄÇ
#
# ËøôÈáåÊàë‰ª¨ÊûÑÂª∫Êô∫ËÉΩ‰Ωì ``Friday`` ÂíåÁî®Êà∑‰πãÈó¥ÁöÑÁÆÄÂçïÂØπËØù„ÄÇ
#
# .. tip:: AgentScope Êèê‰æõ‰∫ÜÂÜÖÁΩÆÁöÑ ``UserAgent`` Á±ªÔºåÁî®‰∫é‰∫∫Êú∫‰∫§‰∫íÔºàHITLÔºâ„ÄÇÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØËØ∑ÂèÇËÄÉ :ref:`user-agent`„ÄÇ
#
friday = ReActAgent(
name="Friday",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Friday ÁöÑÊúâÁî®Âä©Êâã",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
),
formatter=DashScopeChatFormatter(), # Áî®‰∫é user-assistant ÂØπËØùÁöÑÊ†ºÂºèÂåñÂô®
memory=InMemoryMemory(),
toolkit=Toolkit(),
)
# ÂàõÂª∫Áî®Êà∑Êô∫ËÉΩ‰Ωì
user = UserAgent(name="User")
# %%
# Áé∞Âú®ÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáÂú®Ëøô‰∏§‰∏™Êô∫ËÉΩ‰Ωì‰πãÈó¥‰∫§Êç¢Ê∂àÊÅØÊù•ÂºÄÂßãÂØπËØùÔºåÁõ¥Âà∞Áî®Êà∑ËæìÂÖ•"exit"ÁªìÊùüÂØπËØù„ÄÇ
#
# .. code-block:: python
#
# async def run_conversation() -> None:
# """ËøêË°å Friday ÂíåÁî®Êà∑‰πãÈó¥ÁöÑÁÆÄÂçïÂØπËØù„ÄÇ"""
# msg = None
# while True:
# msg = await friday(msg)
# msg = await user(msg)
# if msg.get_text_content() == "exit":
# break
#
# asyncio.run(run_conversation())
#
# %%
# Â§öÂÆû‰ΩìÂØπËØù
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Â¶ÇÂºÄÂ§¥ÊâÄËø∞ÔºåÊàë‰ª¨ÊºîÁ§∫Â¶Ç‰ΩïÂú® **ÊèêÁ§∫ÊûÑÂª∫** Âíå **‰ø°ÊÅØÂÖ±‰∫´** ÊñπÈù¢ÊûÑÂª∫Â§öÊô∫ËÉΩ‰ΩìÂØπËØù„ÄÇ
#
# ÊûÑÂª∫ÊèêÁ§∫
# -------------------------------
# Âú® AgentScope ‰∏≠ÔºåÊàë‰ª¨‰∏∫Â§öÊô∫ËÉΩ‰ΩìÂØπËØùÊèê‰æõ‰∫ÜÂÜÖÁΩÆÊ†ºÂºèÂåñÂô®ÔºåÂÖ∂ÂêçÁß∞‰∏≠Â∏¶Êúâ **"MultiAgent"**Ôºå
# Â¶Ç ``DashScopeMultiAgentFormatter``„ÄÅ``AnthropicMultiAgentFormatter`` Á≠â„ÄÇ
#
# ÂÖ∑‰ΩìËÄåË®ÄÔºåÂÆÉ‰ª¨‰ΩøÁî®Ê∂àÊÅØ‰∏≠ÁöÑ ``name`` Â≠óÊÆµÊù•Âå∫ÂàÜ‰∏çÂêåÁöÑÂÆû‰ΩìÔºåÂπ∂Â∞ÜÂØπËØùÂéÜÂè≤Ê†ºÂºèÂåñ‰∏∫Âçï‰∏™Áî®Êà∑Ê∂àÊÅØ„ÄÇ
# ‰ª• ``DashScopeMultiAgentFormatter`` ‰∏∫‰æãÔºö
#
# .. tip:: ÊúâÂÖ≥Ê†ºÂºèÂåñÂô®ÁöÑÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÂèØ‰ª•Âú® :ref:`prompt` ‰∏≠ÊâæÂà∞„ÄÇ
#
async def example_multi_agent_prompt() -> None:
msgs = [
Msg("system", "‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Bob ÁöÑÊúâÁî®Âä©Êâã„ÄÇ", "system"),
Msg("Alice", "Âó®ÔºÅ", "user"),
Msg("Bob", "Âó®ÔºÅÂæàÈ´òÂÖ¥ËßÅÂà∞Â§ßÂÆ∂„ÄÇ", "assistant"),
Msg("Charlie", "Êàë‰πüÊòØÔºÅÈ°∫‰æøËØ¥‰∏Ä‰∏ãÔºåÊàëÊòØ Charlie„ÄÇ", "assistant"),
]
formatter = DashScopeMultiAgentFormatter()
prompt = await formatter.format(msgs)
print("Ê†ºÂºèÂåñÁöÑÊèêÁ§∫Ôºö")
print(json.dumps(prompt, indent=4, ensure_ascii=False))
# Êàë‰ª¨Âú®ËøôÈáåÊâìÂç∞ÁªÑÂêàÁî®Êà∑Ê∂àÊÅØÁöÑÂÜÖÂÆπ‰ª•‰æøÊõ¥Â•ΩÂú∞ÁêÜËß£Ôºö
print("-------------")
print("ÁªÑÂêàÊ∂àÊÅØ")
print(prompt[1]["content"])
asyncio.run(example_multi_agent_prompt())
# %%
# Ê∂àÊÅØÂÖ±‰∫´
# -------------------------------
# Âú®Â§öÊô∫ËÉΩ‰ΩìÂØπËØù‰∏≠ÔºåÊòæÂºè‰∫§Êç¢Ê∂àÊÅØÂèØËÉΩ‰∏çÂ§üÈ´òÊïàÂíå‰æøÂà©Ôºå
# ÁâπÂà´ÊòØÂú®Â§ö‰∏™Êô∫ËÉΩ‰Ωì‰πãÈó¥ÂπøÊí≠Ê∂àÊÅØÊó∂„ÄÇ
#
# Âõ†Ê≠§ÔºåAgentScope Êèê‰æõ‰∫Ü‰∏Ä‰∏™Âêç‰∏∫ ``MsgHub`` ÁöÑÂºÇÊ≠•‰∏ä‰∏ãÊñáÁÆ°ÁêÜÂô®Êù•ÁÆÄÂåñÊ∂àÊÅØÂπøÊí≠„ÄÇ
# ÂÖ∑‰ΩìËÄåË®ÄÔºåÂêå‰∏Ä‰∏™ ``MsgHub`` ‰∏≠ÁöÑÊô∫ËÉΩ‰ΩìÂ∞ÜËá™Âä®Êé•Êî∂ÂÖ∂ÂÆÉÂèÇ‰∏éËÄÖÈÄöËøá ``reply`` ÂáΩÊï∞ËøîÂõûÁöÑÊ∂àÊÅØ„ÄÇ
#
# ‰∏ãÈù¢Êàë‰ª¨ÊûÑÂª∫‰∏Ä‰∏™Â§ö‰∫∫ËÅäÂ§©ÁöÑÂú∫ÊôØÔºåÂ§ö‰∏™Êô∫ËÉΩ‰ΩìÊâÆÊºî‰∏çÂêåÁöÑËßíËâ≤Ôºö
#
model = DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
)
formatter = DashScopeMultiAgentFormatter()
alice = ReActAgent(
name="Alice",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Alice ÁöÑÂ≠¶Áîü„ÄÇ",
model=model,
formatter=formatter,
)
bob = ReActAgent(
name="Bob",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Bob ÁöÑÂ≠¶Áîü„ÄÇ",
model=model,
formatter=formatter,
)
charlie = ReActAgent(
name="Charlie",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ Charlie ÁöÑÂ≠¶Áîü„ÄÇ",
model=model,
formatter=formatter,
)
async def example_msghub() -> None:
"""‰ΩøÁî® MsgHub ËøõË°åÂ§öÊô∫ËÉΩ‰ΩìÂØπËØùÁöÑÁ§∫‰æã„ÄÇ"""
async with MsgHub(
[alice, bob, charlie],
# ËøõÂÖ• MsgHub Êó∂ÁöÑÂÖ¨ÂëäÊ∂àÊÅØ
announcement=Msg(
"system",
"Áé∞Âú®Â§ßÂÆ∂‰∫íÁõ∏ËÆ§ËØÜ‰∏Ä‰∏ãÔºåÁÆÄÂçïËá™Êàë‰ªãÁªç„ÄÇ",
"system",
),
):
await alice()
await bob()
await charlie()
asyncio.run(example_msghub())
# %%
# Áé∞Âú®Êàë‰ª¨ÊâìÂç∞ Alice ÁöÑËÆ∞ÂøÜÔºåÊ£ÄÊü•Â•πÁöÑËÆ∞ÂøÜÊòØÂê¶Ê≠£Á°ÆÊõ¥Êñ∞„ÄÇ
#
async def example_memory() -> None:
"""ÊâìÂç∞ Alice ÁöÑËÆ∞ÂøÜ„ÄÇ"""
print("Alice ÁöÑËÆ∞ÂøÜÔºö")
for msg in await alice.memory.get_memory():
print(
f"{msg.name}: {json.dumps(msg.content, indent=4, ensure_ascii=False)}",
)
asyncio.run(example_memory())
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# - :ref:`prompt`
# - :ref:`pipeline`
#
---- workflow_handoffs.py ----
# -*- coding: utf-8 -*-
"""
.. _handoffs:
Handoffs
========================================
Handoffs ÊòØÁî± OpenAI ÊèêÂá∫ÁöÑÂ∑•‰ΩúÊµÅÊ®°ÂºèÔºåÈÄöËøáË∞ÉÁî®Â≠êÊô∫ËÉΩ‰ΩìÁöÑÊñπÂºèÊù•ÂÆåÊàêÁõÆÊ†á‰ªªÂä°„ÄÇ
Âú® AgentScope ‰∏≠ÈÄöËøáÂ∑•ÂÖ∑Ë∞ÉÁî®ÁöÑÊñπÂºèÂÆûÁé∞ handoffs ÈùûÂ∏∏ÁÆÄÂçï„ÄÇÈ¶ñÂÖàÔºåÊàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™ÂáΩÊï∞Êù•ÂÖÅËÆ∏ÂçèË∞ÉËÄÖÂä®ÊÄÅÂàõÂª∫Â≠êÊô∫ËÉΩ‰Ωì„ÄÇ
.. figure:: ../../_static/images/handoffs.png
:width: 80%
:align: center
:alt: ÂçèË∞ÉËÄÖ-Â≠êÊô∫ËÉΩ‰ΩìÂ∑•‰ΩúÊµÅ
*Handoffs Á§∫‰æã*
"""
import asyncio
import os
from agentscope.agent import ReActAgent
from agentscope.formatter import DashScopeChatFormatter
from agentscope.memory import InMemoryMemory
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.tool import (
ToolResponse,
Toolkit,
execute_python_code,
)
# ÂàõÂª∫Â≠êÊô∫ËÉΩ‰ΩìÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
async def create_worker(
task_description: str,
) -> ToolResponse:
"""ÂàõÂª∫‰∏Ä‰∏™Â≠êÊô∫ËÉΩ‰ΩìÊù•ÂÆåÊàêÁªôÂÆöÁöÑ‰ªªÂä°„ÄÇÂ≠êÊô∫ËÉΩ‰ΩìÈÖçÂ§á‰∫Ü Python ÊâßË°åÂ∑•ÂÖ∑„ÄÇ
Args:
task_description (``str``):
Â≠êÊô∫ËÉΩ‰ΩìË¶ÅÂÆåÊàêÁöÑ‰ªªÂä°ÊèèËø∞„ÄÇ
"""
# ‰∏∫Â≠êÊô∫ËÉΩ‰ΩìÊô∫ËÉΩ‰ΩìÈÖçÂ§á‰∏Ä‰∫õÂ∑•ÂÖ∑
toolkit = Toolkit()
toolkit.register_tool_function(execute_python_code)
# ÂàõÂª∫Â≠êÊô∫ËÉΩ‰ΩìÊô∫ËÉΩ‰Ωì
worker = ReActAgent(
name="Worker",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Êô∫ËÉΩ‰Ωì„ÄÇ‰Ω†ÁöÑÁõÆÊ†áÊòØÂÆåÊàêÁªôÂÆöÁöÑ‰ªªÂä°„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
formatter=DashScopeChatFormatter(),
toolkit=toolkit,
)
# ËÆ©Â≠êÊô∫ËÉΩ‰ΩìÂÆåÊàê‰ªªÂä°
res = await worker(Msg("user", task_description, "user"))
return ToolResponse(
content=res.get_content_blocks("text"),
)
async def run_handoffs() -> None:
"""‰∫§Êé•Â∑•‰ΩúÊµÅÁ§∫‰æã„ÄÇ"""
# ÂàùÂßãÂåñÂçèË∞ÉËÄÖÊô∫ËÉΩ‰Ωì
toolkit = Toolkit()
toolkit.register_tool_function(create_worker)
orchestrator = ReActAgent(
name="Orchestrator",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™ÂçèË∞ÉËÄÖÊô∫ËÉΩ‰Ωì„ÄÇ‰Ω†ÁöÑÁõÆÊ†áÊòØÈÄöËøáÂ∞Ü‰ªªÂä°ÂàÜËß£‰∏∫Êõ¥Â∞èÁöÑ‰ªªÂä°Âπ∂ÂàõÂª∫Â≠êÊô∫ËÉΩ‰ΩìÊù•ÂÆåÊàêÂÆÉ‰ª¨Ôºå‰ªéËÄåÂÆåÊàêÁªôÂÆöÁöÑ‰ªªÂä°„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
memory=InMemoryMemory(),
formatter=DashScopeChatFormatter(),
toolkit=toolkit,
)
# ‰ªªÂä°ÊèèËø∞
task_description = "Âú® Python ‰∏≠ÊâßË°å hello world"
# ÂàõÂª∫Â≠êÊô∫ËÉΩ‰ΩìÊù•ÂÆåÊàê‰ªªÂä°
await orchestrator(Msg("user", task_description, "user"))
asyncio.run(run_handoffs())
---- workflow_multiagent_debate.py ----
# -*- coding: utf-8 -*-
"""
.. _multiagent-debate:
Multi-Agent Debate
========================
Multi-Agent debate Ê®°Êãü‰∏çÂêåÊô∫ËÉΩ‰Ωì‰πãÈó¥ÁöÑÂ§öËΩÆËÆ®ËÆ∫Âú∫ÊôØÔºåÈÄöÂ∏∏ÂåÖÊã¨Âá†‰∏™ solver Âíå‰∏Ä‰∏™ aggregator„ÄÇ
ÂÖ∏ÂûãÊÉÖÂÜµ‰∏ãÔºåsolver ÁîüÊàêÂπ∂‰∫§Êç¢‰ªñ‰ª¨ÁöÑÁ≠îÊ°àÔºåËÄå aggregator Êî∂ÈõÜÂπ∂ÊÄªÁªìÁ≠îÊ°à„ÄÇ
Êàë‰ª¨ÂÆûÁé∞‰∫Ü `EMNLP 2024`_ ‰∏≠ÁöÑÁ§∫‰æãÔºåÂÖ∂‰∏≠‰∏§‰∏™ solver Êô∫ËÉΩ‰ΩìÂ∞ÜÊåâÂõ∫ÂÆöÈ°∫Â∫èËÆ®ËÆ∫‰∏Ä‰∏™ËØùÈ¢òÔºåÊ†πÊçÆÂÖàÂâçÁöÑËæ©ËÆ∫ÂéÜÂè≤Ë°®Ëææ‰ªñ‰ª¨ÁöÑËÆ∫ÁÇπ„ÄÇ
Âú®ÊØè‰∏ÄËΩÆ‰∏≠Ôºå‰∏ªÊåÅ‰∫∫Êô∫ËÉΩ‰ΩìÂ∞ÜÂÜ≥ÂÆöÊòØÂê¶ÂèØ‰ª•Âú®ÂΩìÂâçËΩÆËé∑ÂæóÊúÄÁªàÁöÑÊ≠£Á°ÆÁ≠îÊ°à„ÄÇ
"""
import asyncio
import os
from pydantic import Field, BaseModel
from agentscope.agent import ReActAgent
from agentscope.formatter import (
DashScopeMultiAgentFormatter,
)
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.pipeline import MsgHub
# ÂáÜÂ§á‰∏Ä‰∏™ËØùÈ¢ò
topic = "‰∏§‰∏™ÂúÜÂ§ñÂàá‰∏îÊ≤°ÊúâÁõ∏ÂØπÊªëÂä®„ÄÇÂúÜAÁöÑÂçäÂæÑÊòØÂúÜBÂçäÂæÑÁöÑ1/3„ÄÇÂúÜAÁªïÂúÜBÊªöÂä®‰∏ÄÂúàÂõûÂà∞Ëµ∑ÁÇπ„ÄÇÂúÜAÊÄªÂÖ±‰ºöÊóãËΩ¨Â§öÂ∞ëÊ¨°Ôºü"
# ÂàõÂª∫‰∏§‰∏™Ëæ©ËÆ∫ËÄÖÊô∫ËÉΩ‰ΩìÔºåAlice Âíå BobÔºå‰ªñ‰ª¨Â∞ÜËÆ®ËÆ∫Ëøô‰∏™ËØùÈ¢ò„ÄÇ
def create_solver_agent(name: str) -> ReActAgent:
"""Ëé∑Âèñ‰∏Ä‰∏™Ëß£ÂÜ≥ËÄÖÊô∫ËÉΩ‰Ωì„ÄÇ"""
return ReActAgent(
name=name,
sys_prompt=f"‰Ω†ÊòØ‰∏Ä‰∏™Âêç‰∏∫ {name} ÁöÑËæ©ËÆ∫ËÄÖ„ÄÇ‰Ω†Â•ΩÔºåÊ¨¢ËøéÊù•Âà∞"
"Ëæ©ËÆ∫ÊØîËµõ„ÄÇÊàë‰ª¨ÁöÑÁõÆÊ†áÊòØÊâæÂà∞Ê≠£Á°ÆÁ≠îÊ°àÔºåÂõ†Ê≠§‰Ω†Ê≤°ÊúâÂøÖË¶ÅÂÆåÂÖ®ÂêåÊÑèÂØπÊñπ"
f"ÁöÑËßÇÁÇπ„ÄÇËæ©ËÆ∫ËØùÈ¢òÂ¶Ç‰∏ãÊâÄËø∞Ôºö{topic}",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
formatter=DashScopeMultiAgentFormatter(),
)
alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]
# ÂàõÂª∫‰∏ªÊåÅ‰∫∫Êô∫ËÉΩ‰Ωì
moderator = ReActAgent(
name="Aggregator",
sys_prompt=f"""‰Ω†ÊòØ‰∏Ä‰∏™‰∏ªÊåÅ‰∫∫„ÄÇÂ∞ÜÊúâ‰∏§‰∏™Ëæ©ËÆ∫ËÄÖÂèÇ‰∏éËæ©ËÆ∫ÊØîËµõ„ÄÇ‰ªñ‰ª¨Â∞ÜÂ∞±‰ª•‰∏ãËØùÈ¢òÊèêÂá∫ËßÇÁÇπÂπ∂ËøõË°åËÆ®ËÆ∫Ôºö
``````
{topic}
``````
Âú®ÊØèËΩÆËÆ®ËÆ∫ÁªìÊùüÊó∂Ôºå‰Ω†Â∞ÜËØÑ‰º∞Ëæ©ËÆ∫ÊòØÂê¶ÁªìÊùüÔºå‰ª•ÂèäËØùÈ¢òÊ≠£Á°ÆÁöÑÁ≠îÊ°à„ÄÇ""",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
# ‰ΩøÁî®Â§öÊô∫ËÉΩ‰ΩìÊ†ºÂºèÂåñÂô®ÔºåÂõ†‰∏∫‰∏ªÊåÅ‰∫∫Â∞ÜÊé•Êî∂Êù•Ëá™Â§ö‰∫éÁî®Êà∑ÂíåÂä©ÊâãÁöÑÊ∂àÊÅØ
formatter=DashScopeMultiAgentFormatter(),
)
# ‰∏ªÊåÅ‰∫∫ÁöÑÁªìÊûÑÂåñËæìÂá∫Ê®°Âûã
class JudgeModel(BaseModel):
"""‰∏ªÊåÅ‰∫∫ÁöÑÁªìÊûÑÂåñËæìÂá∫Ê®°Âûã„ÄÇ"""
finished: bool = Field(description="Ëæ©ËÆ∫ÊòØÂê¶ÁªìÊùü„ÄÇ")
correct_answer: str | None = Field(
description="Ëæ©ËÆ∫ËØùÈ¢òÁöÑÊ≠£Á°ÆÁ≠îÊ°àÔºå‰ªÖÂΩìËæ©ËÆ∫ÁªìÊùüÊó∂Êèê‰æõËØ•Â≠óÊÆµ„ÄÇÂê¶Âàô‰øùÁïô‰∏∫ None„ÄÇ",
default=None,
)
async def run_multiagent_debate() -> None:
"""ËøêË°åÂ§öÊô∫ËÉΩ‰ΩìËæ©ËÆ∫Â∑•‰ΩúÊµÅ„ÄÇ"""
while True:
# MsgHub ‰∏≠ÂèÇ‰∏éËÄÖÁöÑÂõûÂ§çÊ∂àÊÅØÂ∞ÜÂπøÊí≠ÁªôÊâÄÊúâÂèÇ‰∏éËÄÖ„ÄÇ
async with MsgHub(participants=[alice, bob, moderator]):
await alice(
Msg(
"user",
"‰Ω†ÊòØÊ≠£ÊñπÔºåËØ∑Ë°®Ëææ‰Ω†ÁöÑËßÇÁÇπ„ÄÇ",
"user",
),
)
await bob(
Msg(
"user",
"‰Ω†ÊòØÂèçÊñπ„ÄÇ‰Ω†‰∏çÂêåÊÑèÊ≠£ÊñπÁöÑËßÇÁÇπ„ÄÇËØ∑Ë°®Ëææ‰Ω†ÁöÑËßÇÁÇπÂíåÁêÜÁî±„ÄÇ",
"user",
),
)
# Alice Âíå Bob ‰∏çÈúÄË¶ÅÁü•ÈÅì‰∏ªÊåÅ‰∫∫ÁöÑÊ∂àÊÅØÔºåÊâÄ‰ª•‰∏ªÊåÅ‰∫∫Âú® MsgHub Â§ñÈÉ®Ë∞ÉÁî®„ÄÇ
msg_judge = await moderator(
Msg(
"user",
"Áé∞Âú®‰Ω†Â∑≤ÁªèÂê¨Âà∞‰∫Ü‰ªñ‰ª¨ÁöÑËæ©ËÆ∫ÔºåÁé∞Âú®Âà§Êñ≠Ëæ©ËÆ∫ÊòØÂê¶ÁªìÊùüÔºå‰ª•Âèä‰Ω†ËÉΩÂæóÂà∞Ê≠£Á°ÆÁ≠îÊ°àÂêóÔºü",
"user",
),
structured_model=JudgeModel,
)
if msg_judge.metadata.get("finished"):
print(
"\nËæ©ËÆ∫ÁªìÊùüÔºåÊ≠£Á°ÆÁ≠îÊ°àÊòØÔºö",
msg_judge.metadata.get("correct_answer"),
)
break
asyncio.run(run_multiagent_debate())
# %%
# Ëøõ‰∏ÄÊ≠•ÈòÖËØª
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# - :ref:`pipeline`
#
# .. _EMNLP 2024:
# Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.
#
---- workflow_routing.py ----
# -*- coding: utf-8 -*-
"""
.. _routing:
Routing
==========================
Âú® AgentScope ‰∏≠Êúâ‰∏§ÁßçÂÆûÁé∞ Routing ÁöÑÊñπÊ≥ïÔºåÈÉΩÁÆÄÂçïÊòìÂÆûÁé∞Ôºö
- ‰ΩøÁî®ÁªìÊûÑÂåñËæìÂá∫ÁöÑÊòæÂºè routing
- ‰ΩøÁî®Â∑•ÂÖ∑Ë∞ÉÁî®ÁöÑÈöêÂºè routing
.. tip:: ËÄÉËôëÂà∞Êô∫ËÉΩ‰Ωì routing Ê≤°ÊúâÁªü‰∏ÄÁöÑÊ†áÂáÜ/ÂÆö‰πâÔºåÊàë‰ª¨ÈÅµÂæ™ `Building effective agents <https://www.anthropic.com/engineering/building-effective-agents>`_ ‰∏≠ÁöÑËÆæÁΩÆ
ÊòæÂºè Routing
~~~~~~~~~~~~~~~~~~~~~~~~~~
Âú®ÊòæÂºè routing ‰∏≠ÔºåÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®Êô∫ËÉΩ‰ΩìÁöÑÁªìÊûÑÂåñËæìÂá∫Êù•Á°ÆÂÆöÂ∞ÜÊ∂àÊÅØË∑ØÁî±Âà∞Âì™‰∏™Êô∫ËÉΩ‰Ωì„ÄÇ
ÂàùÂßãÂåñ routing Êô∫ËÉΩ‰Ωì
"""
import asyncio
import json
import os
from typing import Literal
from pydantic import BaseModel, Field
from agentscope.agent import ReActAgent
from agentscope.formatter import DashScopeChatFormatter
from agentscope.memory import InMemoryMemory
from agentscope.message import Msg
from agentscope.model import DashScopeChatModel
from agentscope.tool import Toolkit, ToolResponse
router = ReActAgent(
name="Router",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Ë∑ØÁî±Êô∫ËÉΩ‰Ωì„ÄÇ‰Ω†ÁöÑÁõÆÊ†áÊòØÂ∞ÜÁî®Êà∑Êü•ËØ¢Ë∑ØÁî±Âà∞Ê≠£Á°ÆÁöÑÂêéÁª≠‰ªªÂä°ÔºåÊ≥®ÊÑè‰Ω†‰∏çÈúÄË¶ÅÂõûÁ≠îÁî®Êà∑ÁöÑÈóÆÈ¢ò„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
formatter=DashScopeChatFormatter(),
)
# ‰ΩøÁî®ÁªìÊûÑÂåñËæìÂá∫ÊåáÂÆöË∑ØÁî±‰ªªÂä°
class RoutingChoice(BaseModel):
your_choice: Literal[
"Content Generation",
"Programming",
"Information Retrieval",
None,
] = Field(
description="ÈÄâÊã©Ê≠£Á°ÆÁöÑÂêéÁª≠‰ªªÂä°ÔºåÂ¶ÇÊûú‰ªªÂä°Â§™ÁÆÄÂçïÊàñÊ≤°ÊúâÂêàÈÄÇÁöÑ‰ªªÂä°ÔºåÂàôÈÄâÊã© ``None``",
)
task_description: str | None = Field(
description="‰ªªÂä°ÊèèËø∞",
default=None,
)
async def example_router_explicit() -> None:
"""‰ΩøÁî®ÁªìÊûÑÂåñËæìÂá∫ËøõË°åÊòæÂºèË∑ØÁî±ÁöÑÁ§∫‰æã„ÄÇ"""
msg_user = Msg(
"user",
"Â∏ÆÊàëÂÜô‰∏ÄÈ¶ñËØó",
"user",
)
# Ë∑ØÁî±Êü•ËØ¢
msg_res = await router(
msg_user,
structured_model=RoutingChoice,
)
# ÁªìÊûÑÂåñËæìÂá∫Â≠òÂÇ®Âú® metadata Â≠óÊÆµ‰∏≠
print("ÁªìÊûÑÂåñËæìÂá∫Ôºö")
print(json.dumps(msg_res.metadata, indent=4, ensure_ascii=False))
asyncio.run(example_router_explicit())
# %%
# ÈöêÂºè Routing
# ~~~~~~~~~~~~~~~~~~~~~~~~~
# Âè¶‰∏ÄÁßçÊñπÊ≥ïÊòØÂ∞Ü‰∏ãÊ∏∏Êô∫ËÉΩ‰ΩìÂåÖË£ÖÊàêÂ∑•ÂÖ∑ÂáΩÊï∞ÔºåËøôÊ†∑Ë∑ØÁî±Êô∫ËÉΩ‰ΩìÂ∞±ÂèØ‰ª•Ê†πÊçÆÁî®Êà∑Êü•ËØ¢ÂÜ≥ÂÆöË∞ÉÁî®Âì™‰∏™Â∑•ÂÖ∑„ÄÇ
#
# Êàë‰ª¨È¶ñÂÖàÂÆö‰πâÂá†‰∏™Â∑•ÂÖ∑ÂáΩÊï∞Ôºö
#
async def generate_python(demand: str) -> ToolResponse:
"""Ê†πÊçÆÈúÄÊ±ÇÁîüÊàê Python ‰ª£Á†Å„ÄÇ
Args:
demand (``str``):
ÂØπ Python ‰ª£Á†ÅÁöÑÈúÄÊ±Ç„ÄÇ
"""
# Á§∫‰æãÈúÄÊ±ÇÊô∫ËÉΩ‰Ωì
python_agent = ReActAgent(
name="PythonAgent",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™ Python ‰∏ìÂÆ∂Ôºå‰Ω†ÁöÑÁõÆÊ†áÊòØÊ†πÊçÆÈúÄÊ±ÇÁîüÊàê Python ‰ª£Á†Å„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
memory=InMemoryMemory(),
formatter=DashScopeChatFormatter(),
toolkit=Toolkit(),
)
msg_res = await python_agent(Msg("user", demand, "user"))
return ToolResponse(
content=msg_res.get_content_blocks("text"),
)
# ‰∏∫ÊºîÁ§∫ÁõÆÁöÑÊ®°Êãü‰∏Ä‰∫õÂÖ∂‰ªñÂ∑•ÂÖ∑ÂáΩÊï∞
async def generate_poem(demand: str) -> ToolResponse:
"""Ê†πÊçÆÈúÄÊ±ÇÁîüÊàêËØóÊ≠å„ÄÇ
Args:
demand (``str``):
ÂØπËØóÊ≠åÁöÑÈúÄÊ±Ç„ÄÇ
"""
pass
async def web_search(query: str) -> ToolResponse:
"""Âú®ÁΩëÁªú‰∏äÊêúÁ¥¢Êü•ËØ¢„ÄÇ
Args:
query (``str``):
Ë¶ÅÊêúÁ¥¢ÁöÑÊü•ËØ¢„ÄÇ
"""
pass
# %%
# ‰πãÂêéÔºåÊàë‰ª¨ÂÆö‰πâ‰∏Ä‰∏™Ë∑ØÁî±Êô∫ËÉΩ‰ΩìÂπ∂‰∏∫ÂÖ∂ÈÖçÂ§á‰∏äËø∞Â∑•ÂÖ∑ÂáΩÊï∞„ÄÇ
#
toolkit = Toolkit()
toolkit.register_tool_function(generate_python)
toolkit.register_tool_function(generate_poem)
toolkit.register_tool_function(web_search)
# ‰ΩøÁî®Â∑•ÂÖ∑Ê®°ÂùóÂàùÂßãÂåñË∑ØÁî±Êô∫ËÉΩ‰Ωì
router_implicit = ReActAgent(
name="Router",
sys_prompt="‰Ω†ÊòØ‰∏Ä‰∏™Ë∑ØÁî±Êô∫ËÉΩ‰Ωì„ÄÇ‰Ω†ÁöÑÁõÆÊ†áÊòØÂ∞ÜÁî®Êà∑Êü•ËØ¢Ë∑ØÁî±Âà∞Ê≠£Á°ÆÁöÑÂêéÁª≠‰ªªÂä°„ÄÇ",
model=DashScopeChatModel(
model_name="qwen-max",
api_key=os.environ["DASHSCOPE_API_KEY"],
stream=False,
),
formatter=DashScopeChatFormatter(),
toolkit=toolkit,
memory=InMemoryMemory(),
)
async def example_router_implicit() -> None:
"""‰ΩøÁî®Â∑•ÂÖ∑Ë∞ÉÁî®ËøõË°åÈöêÂºèË∑ØÁî±ÁöÑÁ§∫‰æã„ÄÇ"""
msg_user = Msg(
"user",
"Â∏ÆÊàëÂú® Python ‰∏≠ÁîüÊàê‰∏Ä‰∏™Âø´ÈÄüÊéíÂ∫èÂáΩÊï∞",
"user",
)
# Ë∑ØÁî±Êü•ËØ¢
await router_implicit(msg_user)
asyncio.run(example_router_implicit())