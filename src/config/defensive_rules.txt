# -*- coding: utf-8 -*-
"""
深度研究平台防御性编程规则
Critical Security Rules - Must be followed by all developers
"""

# =============================================================================
# CRITICAL SECURITY RULES - 绝对禁止的操作
# =============================================================================

1. 永远不要使用 exec() 或 eval() - 使用 SecurePythonExecutor 代替
   FORBIDDEN: exec(user_code), eval(user_expression)
   ALLOWED: await SecurePythonExecutor().execute(user_code)

2. 永远不要拼接 SQL 字符串 - 使用参数化查询
   FORBIDDEN: f"SELECT * FROM users WHERE name = '{name}'"
   ALLOWED: session.execute(select(User).where(User.name == name))

3. 永远不要信任文件路径 - 始终验证和规范化路径
   FORBIDDEN: open(user_path)
   ALLOWED: validated_path = validate_safe_path(user_path, allowed_dirs)

4. 永远不要硬编码 API 密钥 - 使用环境变量通过配置系统
   FORBIDDEN: api_key = "sk-1234567890"
   ALLOWED: api_key = settings.llm_provider_api_key

5. 永远不要在代码中存储密码 - 使用哈希和安全的密码处理
   FORBIDDEN: password = "plaintext_password"
   ALLOWED: password_hash = hash_password(password)

# =============================================================================
# INPUT VALIDATION RULES - 输入验证规则
# =============================================================================

6. 所有用户输入必须验证
   - 使用 Pydantic 模型验证 API 输入
   - 验证文件类型、大小和内容
   - 对所有字符串输入进行长度限制
   - 验证数字范围和格式

7. 文件上传安全
   - 验证文件扩展名和 MIME 类型
   - 扫描恶意软件
   - 限制文件大小（默认：50MB）
   - 将上传文件存储在安全目录中

8. 路径遍历保护
   - 绝不使用用户提供的路径直接访问文件系统
   - 始终在允许的目录范围内验证路径
   - 使用路径规范化和白名单验证

# =============================================================================
# DATABASE SECURITY RULES - 数据库安全规则
# =============================================================================

9. 数据库访问原则
   - 始终使用 DAO/Repository 模式
   - 不在 API 控制器中直接编写 ORM 查询
   - 使用事务处理数据库操作
   - 在生产环境中禁用 AUTO_CREATE_TABLES

10. SQL 注入防护
    - 使用 SQLAlchemy 的参数化查询
    - 绝不使用字符串格式化构建 SQL
    - 验证所有数据库输入参数
    - 使用最小权限原则配置数据库用户

11. 敏感数据处理
    - 对敏感字段进行加密存储
    - 不在日志中记录敏感信息
    - 使用安全的密钥管理
    - 定期轮换加密密钥

# =============================================================================
# AUTHENTICATION AND AUTHORIZATION - 认证和授权规则
# =============================================================================

12. 认证安全
    - 使用强密码哈希算法（bcrypt/argon2）
    - 实施多因素认证
    - 设置合理的会话超时时间
    - 使用安全的令牌生成（JWT）

13. 授权控制
    - 实施基于角色的访问控制（RBAC）
    - 在每个操作前验证用户权限
    - 使用最小权限原则
    - 定期审查和更新权限设置

14. 会话管理
    - 使用安全的会话存储
    - 实施会话固定保护
    - 在敏感操作后重新生成会话ID
    - 提供安全的登出机制

# =============================================================================
# API SECURITY RULES - API 安全规则
# =============================================================================

15. API 安全最佳实践
    - 使用 HTTPS 进行所有 API 通信
    - 实施适当的 CORS 策略
    - 使用 API 版本控制
    - 实施速率限制和请求节流

16. 请求和响应安全
    - 验证所有 API 输入
    - 不暴露敏感的系统信息
    - 使用安全的错误消息
    - 实施内容安全策略（CSP）

17. API 密钥管理
    - 使用强随机密钥生成
    - 定期轮换 API 密钥
    - 实施密钥撤销机制
    - 监控 API 密钥使用情况

# =============================================================================
# CODE EXECUTION SECURITY - 代码执行安全规则
# =============================================================================

18. 代码执行安全
    - 使用沙箱环境执行用户代码
    - 限制 CPU 和内存使用
    - 设置执行时间限制
    - 禁用危险的系统调用

19. 代码验证
    - 在执行前进行静态代码分析
    - 检查危险的导入和函数调用
    - 验证代码的语法正确性
    - 记录所有代码执行尝试

# =============================================================================
# LOGGING AND MONITORING - 日志和监控规则
# =============================================================================

20. 安全日志
    - 记录所有认证尝试（成功和失败）
    - 记录管理员的敏感操作
    - 记录异常的安全事件
    - 定期审查和分析日志

21. 监控和告警
    - 监控异常的系统行为
    - 设置安全事件的实时告警
    - 监控资源使用情况
    - 定期进行安全扫描

# =============================================================================
# CONFIGURATION SECURITY - 配置安全规则
# =============================================================================

22. 配置管理
    - 使用分层配置系统（环境变量 > .env > 配置文件）
    - 不在代码中硬编码配置
    - 对敏感配置使用加密存储
    - 定期审查和更新配置

23. 生产环境安全
    - 禁用调试模式和详细错误信息
    - 使用安全的默认配置
    - 定期更新依赖包
    - 实施安全补丁管理流程

# =============================================================================
# DATA PROTECTION RULES - 数据保护规则
# =============================================================================

24. 数据保护
    - 对个人数据进行分类和保护
    - 实施数据最小化原则
    - 定期备份重要数据
    - 安全地删除不再需要的数据

25. 隐私保护
    - 遵守相关的隐私法规（GDPR/CCPA）
    - 实施数据匿名化技术
    - 提供数据访问和删除机制
    - 定期进行隐私影响评估

# =============================================================================
# DEVELOPMENT RULES - 开发规则
# =============================================================================

26. 安全开发实践
    - 进行安全代码审查
    - 使用静态和动态安全分析工具
    - 定期进行安全测试
    - 培训开发团队安全意识

27. 依赖管理
    - 使用可信的依赖源
    - 定期更新依赖包
    - 扫描依赖包的已知漏洞
    - 锁定生产环境的依赖版本

# =============================================================================
# ENFORCEMENT - 强制执行
# =============================================================================

这些规则通过以下机制强制执行：
- 自动化代码扫描（Bandit, Semgrep）
- CI/CD 管道中的安全检查
- 强制性代码审查流程
- 定期安全审计
- 安全培训和要求确认

违反这些规则可能导致：
- 代码被拒绝合并
- 安全事件报告
- 访问权限撤销
- 纪律处分

所有开发者必须熟悉并遵守这些规则。如有疑问，请联系安全团队。